
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003210  0800aec0  0800aec0  0001aec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0d0  0800e0d0  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0d0  0800e0d0  0001e0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0d8  0800e0d8  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0d8  0800e0d8  0001e0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0dc  0800e0dc  0001e0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800e0e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          00000d74  200000d8  200000d8  000200d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e4c  20000e4c  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028214  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e32  00000000  00000000  0004831c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f8  00000000  00000000  0004d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016f8  00000000  00000000  0004ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028c02  00000000  00000000  00050140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022d8e  00000000  00000000  00078d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e20af  00000000  00000000  0009bad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017db7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071b4  00000000  00000000  0017dbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aea8 	.word	0x0800aea8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800aea8 	.word	0x0800aea8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96e 	b.w	8000e7c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8083 	bne.w	8000cce <__udivmoddi4+0x116>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d947      	bls.n	8000c5e <__udivmoddi4+0xa6>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b142      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd4:	f1c2 0020 	rsb	r0, r2, #32
 8000bd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4097      	lsls	r7, r2
 8000be0:	ea40 0c01 	orr.w	ip, r0, r1
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf0:	fa1f fe87 	uxth.w	lr, r7
 8000bf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0a:	f080 8119 	bcs.w	8000e40 <__udivmoddi4+0x288>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8116 	bls.w	8000e40 <__udivmoddi4+0x288>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3310 	mls	r3, r8, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	f080 8105 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f240 8102 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c40:	3802      	subs	r0, #2
 8000c42:	443c      	add	r4, r7
 8000c44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c48:	eba4 040e 	sub.w	r4, r4, lr
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	b11d      	cbz	r5, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c5 4300 	strd	r4, r3, [r5]
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xaa>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d150      	bne.n	8000d0c <__udivmoddi4+0x154>
 8000c6a:	1bcb      	subs	r3, r1, r7
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f f887 	uxth.w	r8, r7
 8000c74:	2601      	movs	r6, #1
 8000c76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7a:	0c21      	lsrs	r1, r4, #16
 8000c7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb08 f30c 	mul.w	r3, r8, ip
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000c8c:	1879      	adds	r1, r7, r1
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0xe2>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	f200 80e9 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x10c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x10a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80d9 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e7bf      	b.n	8000c4e <__udivmoddi4+0x96>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x12e>
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	f000 80b1 	beq.w	8000e3a <__udivmoddi4+0x282>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	e9c5 0100 	strd	r0, r1, [r5]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f683 	clz	r6, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d14a      	bne.n	8000d84 <__udivmoddi4+0x1cc>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x140>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80b8 	bhi.w	8000e68 <__udivmoddi4+0x2b0>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	468c      	mov	ip, r1
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d0a8      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000d06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f603 	lsr.w	r6, r0, r3
 8000d14:	4097      	lsls	r7, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1e:	40d9      	lsrs	r1, r3
 8000d20:	4330      	orrs	r0, r6
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d28:	fa1f f887 	uxth.w	r8, r7
 8000d2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb06 f108 	mul.w	r1, r6, r8
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x19c>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d46:	f080 808d 	bcs.w	8000e64 <__udivmoddi4+0x2ac>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 808a 	bls.w	8000e64 <__udivmoddi4+0x2ac>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b281      	uxth	r1, r0
 8000d58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb00 f308 	mul.w	r3, r0, r8
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x1c4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d72:	d273      	bcs.n	8000e5c <__udivmoddi4+0x2a4>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d971      	bls.n	8000e5c <__udivmoddi4+0x2a4>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4439      	add	r1, r7
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d82:	e778      	b.n	8000c76 <__udivmoddi4+0xbe>
 8000d84:	f1c6 0c20 	rsb	ip, r6, #32
 8000d88:	fa03 f406 	lsl.w	r4, r3, r6
 8000d8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d96:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da2:	431f      	orrs	r7, r3
 8000da4:	0c3b      	lsrs	r3, r7, #16
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fa1f f884 	uxth.w	r8, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000db6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dba:	458a      	cmp	sl, r1
 8000dbc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x220>
 8000dc6:	1861      	adds	r1, r4, r1
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	d248      	bcs.n	8000e60 <__udivmoddi4+0x2a8>
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	d946      	bls.n	8000e60 <__udivmoddi4+0x2a8>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4421      	add	r1, r4
 8000dd8:	eba1 010a 	sub.w	r1, r1, sl
 8000ddc:	b2bf      	uxth	r7, r7
 8000dde:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dea:	fb00 f808 	mul.w	r8, r0, r8
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x24a>
 8000df2:	19e7      	adds	r7, r4, r7
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d22e      	bcs.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d92c      	bls.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4427      	add	r7, r4
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	eba7 0708 	sub.w	r7, r7, r8
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	454f      	cmp	r7, r9
 8000e10:	46c6      	mov	lr, r8
 8000e12:	4649      	mov	r1, r9
 8000e14:	d31a      	bcc.n	8000e4c <__udivmoddi4+0x294>
 8000e16:	d017      	beq.n	8000e48 <__udivmoddi4+0x290>
 8000e18:	b15d      	cbz	r5, 8000e32 <__udivmoddi4+0x27a>
 8000e1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e26:	40f2      	lsrs	r2, r6
 8000e28:	ea4c 0202 	orr.w	r2, ip, r2
 8000e2c:	40f7      	lsrs	r7, r6
 8000e2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e32:	2600      	movs	r6, #0
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e70b      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6fd      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e48:	4543      	cmp	r3, r8
 8000e4a:	d2e5      	bcs.n	8000e18 <__udivmoddi4+0x260>
 8000e4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e50:	eb69 0104 	sbc.w	r1, r9, r4
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7df      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e7d2      	b.n	8000e02 <__udivmoddi4+0x24a>
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	e78d      	b.n	8000d7c <__udivmoddi4+0x1c4>
 8000e60:	4681      	mov	r9, r0
 8000e62:	e7b9      	b.n	8000dd8 <__udivmoddi4+0x220>
 8000e64:	4666      	mov	r6, ip
 8000e66:	e775      	b.n	8000d54 <__udivmoddi4+0x19c>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e74a      	b.n	8000d02 <__udivmoddi4+0x14a>
 8000e6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e70:	4439      	add	r1, r7
 8000e72:	e713      	b.n	8000c9c <__udivmoddi4+0xe4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	e724      	b.n	8000cc4 <__udivmoddi4+0x10c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000e94:	4a3d      	ldr	r2, [pc, #244]	; (8000f8c <MX_ADC1_Init+0x10c>)
 8000e96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e98:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9e:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ea4:	4b38      	ldr	r3, [pc, #224]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb0:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb8:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebe:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ec0:	4a33      	ldr	r2, [pc, #204]	; (8000f90 <MX_ADC1_Init+0x110>)
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ecc:	2205      	movs	r2, #5
 8000ece:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ede:	482a      	ldr	r0, [pc, #168]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ee0:	f003 feb2 	bl	8004c48 <HAL_ADC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f001 fc0d 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	4619      	mov	r1, r3
 8000efe:	4822      	ldr	r0, [pc, #136]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f00:	f003 fee6 	bl	8004cd0 <HAL_ADC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f0a:	f001 fbfd 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481b      	ldr	r0, [pc, #108]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f1c:	f003 fed8 	bl	8004cd0 <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f26:	f001 fbef 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f38:	f003 feca 	bl	8004cd0 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f42:	f001 fbe1 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f46:	230b      	movs	r3, #11
 8000f48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f54:	f003 febc 	bl	8004cd0 <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f5e:	f001 fbd3 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f62:	230c      	movs	r3, #12
 8000f64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f66:	2305      	movs	r3, #5
 8000f68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f70:	f003 feae 	bl	8004cd0 <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f7a:	f001 fbc5 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000994 	.word	0x20000994
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	0f000001 	.word	0x0f000001

08000f94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a3c      	ldr	r2, [pc, #240]	; (80010a4 <HAL_ADC_MspInit+0x110>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d171      	bne.n	800109a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a3a      	ldr	r2, [pc, #232]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a33      	ldr	r2, [pc, #204]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800100a:	2307      	movs	r3, #7
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4823      	ldr	r0, [pc, #140]	; (80010ac <HAL_ADC_MspInit+0x118>)
 800101e:	f004 fd03 	bl	8005a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001022:	2303      	movs	r3, #3
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001026:	2303      	movs	r3, #3
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	481e      	ldr	r0, [pc, #120]	; (80010b0 <HAL_ADC_MspInit+0x11c>)
 8001036:	f004 fcf7 	bl	8005a28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800103c:	4a1e      	ldr	r2, [pc, #120]	; (80010b8 <HAL_ADC_MspInit+0x124>)
 800103e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001058:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800105c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001060:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001064:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001068:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800106c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001070:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001080:	f004 f956 	bl	8005330 <HAL_DMA_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800108a:	f001 fb3d 	bl	8002708 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001092:	639a      	str	r2, [r3, #56]	; 0x38
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40012000 	.word	0x40012000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020400 	.word	0x40020400
 80010b4:	200009dc 	.word	0x200009dc
 80010b8:	40026410 	.word	0x40026410

080010bc <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	at24c_Check();
 80010c0:	f000 f83c 	bl	800113c <at24c_Check>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010d6:	88fa      	ldrh	r2, [r7, #6]
 80010d8:	230a      	movs	r3, #10
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	f107 030f 	add.w	r3, r7, #15
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2310      	movs	r3, #16
 80010e8:	21a0      	movs	r1, #160	; 0xa0
 80010ea:	4804      	ldr	r0, [pc, #16]	; (80010fc <at24c_ReadOneByte+0x34>)
 80010ec:	f005 f8a8 	bl	8006240 <HAL_I2C_Mem_Read>
	return temp;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000a8c 	.word	0x20000a8c

08001100 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	4603      	mov	r3, r0
 8001108:	460a      	mov	r2, r1
 800110a:	80fb      	strh	r3, [r7, #6]
 800110c:	4613      	mov	r3, r2
 800110e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001110:	88fa      	ldrh	r2, [r7, #6]
 8001112:	230a      	movs	r3, #10
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2301      	movs	r3, #1
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	1d7b      	adds	r3, r7, #5
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2310      	movs	r3, #16
 8001120:	21a0      	movs	r1, #160	; 0xa0
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <at24c_WriteOneByte+0x38>)
 8001124:	f004 ff92 	bl	800604c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001128:	2005      	movs	r0, #5
 800112a:	f003 fd69 	bl	8004c00 <HAL_Delay>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000a8c 	.word	0x20000a8c

0800113c <at24c_Check>:

uint8_t at24c_Check(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 8001142:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001146:	f7ff ffbf 	bl	80010c8 <at24c_ReadOneByte>
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b55      	cmp	r3, #85	; 0x55
 8001152:	d101      	bne.n	8001158 <at24c_Check+0x1c>
 8001154:	2300      	movs	r3, #0
 8001156:	e010      	b.n	800117a <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001158:	2155      	movs	r1, #85	; 0x55
 800115a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800115e:	f7ff ffcf 	bl	8001100 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 8001162:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001166:	f7ff ffaf 	bl	80010c8 <at24c_ReadOneByte>
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b55      	cmp	r3, #85	; 0x55
 8001172:	d101      	bne.n	8001178 <at24c_Check+0x3c>
 8001174:	2300      	movs	r3, #0
 8001176:	e000      	b.n	800117a <at24c_Check+0x3e>
	}
	return 1;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 8001182:	b590      	push	{r4, r7, lr}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	6039      	str	r1, [r7, #0]
 800118c:	80fb      	strh	r3, [r7, #6]
 800118e:	4613      	mov	r3, r2
 8001190:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001192:	e00d      	b.n	80011b0 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	80fa      	strh	r2, [r7, #6]
 800119a:	683c      	ldr	r4, [r7, #0]
 800119c:	1c62      	adds	r2, r4, #1
 800119e:	603a      	str	r2, [r7, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff91 	bl	80010c8 <at24c_ReadOneByte>
 80011a6:	4603      	mov	r3, r0
 80011a8:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1ee      	bne.n	8001194 <at24c_Read+0x12>
	}
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd90      	pop	{r4, r7, pc}

080011c0 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	80fb      	strh	r3, [r7, #6]
 80011cc:	4613      	mov	r3, r2
 80011ce:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011d0:	e00c      	b.n	80011ec <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff90 	bl	8001100 <at24c_WriteOneByte>
		WriteAddr++;
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	3301      	adds	r3, #1
 80011e4:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011ec:	88bb      	ldrh	r3, [r7, #4]
 80011ee:	1e5a      	subs	r2, r3, #1
 80011f0:	80ba      	strh	r2, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ed      	bne.n	80011d2 <at24c_Write+0x12>
	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_DMA_Init+0x3c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <MX_DMA_Init+0x3c>)
 8001210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_DMA_Init+0x3c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2038      	movs	r0, #56	; 0x38
 8001228:	f004 f84b 	bl	80052c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800122c:	2038      	movs	r0, #56	; 0x38
 800122e:	f004 f864 	bl	80052fa <HAL_NVIC_EnableIRQ>

}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <fsm_machine>:
int buzzer_flag = BUZZER_OFF;
int buzzer_check = 0;
int colon = 0;
int send_flag = 0;

void fsm_machine(){
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af04      	add	r7, sp, #16
	switch (status) {
 8001246:	4b65      	ldr	r3, [pc, #404]	; (80013dc <fsm_machine+0x19c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b02      	cmp	r3, #2
 800124c:	f000 80a7 	beq.w	800139e <fsm_machine+0x15e>
 8001250:	2b02      	cmp	r3, #2
 8001252:	f300 80b9 	bgt.w	80013c8 <fsm_machine+0x188>
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <fsm_machine+0x20>
 800125a:	2b01      	cmp	r3, #1
 800125c:	d01a      	beq.n	8001294 <fsm_machine+0x54>
			re_init();
			screen_play();
		}
		break;
	default:
		break;
 800125e:	e0b3      	b.n	80013c8 <fsm_machine+0x188>
		screen_init();
 8001260:	f001 fa58 	bl	8002714 <screen_init>
		if(isButtonStart()){
 8001264:	f003 fa42 	bl	80046ec <isButtonStart>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80ae 	beq.w	80013cc <fsm_machine+0x18c>
			status = PLAY;
 8001270:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <fsm_machine+0x19c>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]
			count = 0;
 8001276:	4b5a      	ldr	r3, [pc, #360]	; (80013e0 <fsm_machine+0x1a0>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 800127c:	2000      	movs	r0, #0
 800127e:	f000 fb9d 	bl	80019bc <lcd_Clear>
			re_init();
 8001282:	f001 fcfd 	bl	8002c80 <re_init>
			screen_play();
 8001286:	f001 fa6b 	bl	8002760 <screen_play>
			setTimer4(1000);
 800128a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128e:	f001 fee1 	bl	8003054 <setTimer4>
		break;
 8001292:	e09b      	b.n	80013cc <fsm_machine+0x18c>
		if(isButtonUp()){
 8001294:	f003 fa4e 	bl	8004734 <isButtonUp>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00b      	beq.n	80012b6 <fsm_machine+0x76>
			sw_up = 0;
 800129e:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <fsm_machine+0x1a4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 80012a4:	4b50      	ldr	r3, [pc, #320]	; (80013e8 <fsm_machine+0x1a8>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 80012aa:	4b50      	ldr	r3, [pc, #320]	; (80013ec <fsm_machine+0x1ac>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 80012b0:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <fsm_machine+0x1b0>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
		if(isButtonDown()){
 80012b6:	f003 fa60 	bl	800477a <isButtonDown>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00b      	beq.n	80012d8 <fsm_machine+0x98>
			sw_up = 1;
 80012c0:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <fsm_machine+0x1a4>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
			sw_down = 0;
 80012c6:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <fsm_machine+0x1a8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 80012cc:	4b47      	ldr	r3, [pc, #284]	; (80013ec <fsm_machine+0x1ac>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 80012d2:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <fsm_machine+0x1b0>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
		if(isButtonLeft()){
 80012d8:	f003 fa74 	bl	80047c4 <isButtonLeft>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <fsm_machine+0xba>
			sw_up = 1;
 80012e2:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <fsm_machine+0x1a4>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 80012e8:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <fsm_machine+0x1a8>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
			sw_left = 0;
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <fsm_machine+0x1ac>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 80012f4:	4b3e      	ldr	r3, [pc, #248]	; (80013f0 <fsm_machine+0x1b0>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
		if(isButtonRight()){
 80012fa:	f003 fa88 	bl	800480e <isButtonRight>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00b      	beq.n	800131c <fsm_machine+0xdc>
			sw_up = 1;
 8001304:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <fsm_machine+0x1a4>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <fsm_machine+0x1a8>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001310:	4b36      	ldr	r3, [pc, #216]	; (80013ec <fsm_machine+0x1ac>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]
			sw_right = 0;
 8001316:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <fsm_machine+0x1b0>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
		wait_check();
 800131c:	f001 fd8c 	bl	8002e38 <wait_check>
		update_grid();
 8001320:	f001 fb0e 	bl	8002940 <update_grid>
		if(flag_timer3 == 1){
 8001324:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <fsm_machine+0x1b4>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d10b      	bne.n	8001344 <fsm_machine+0x104>
			setTimer3(speed);
 800132c:	4b32      	ldr	r3, [pc, #200]	; (80013f8 <fsm_machine+0x1b8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	b29b      	uxth	r3, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fe72 	bl	800301c <setTimer3>
			move_snake();
 8001338:	f001 fbca 	bl	8002ad0 <move_snake>
			screen_score();
 800133c:	f001 fa46 	bl	80027cc <screen_score>
			update_grid();
 8001340:	f001 fafe 	bl	8002940 <update_grid>
		if(lose == 1){
 8001344:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <fsm_machine+0x1bc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d141      	bne.n	80013d0 <fsm_machine+0x190>
			status = GAME_OVER;
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <fsm_machine+0x19c>)
 800134e:	2202      	movs	r2, #2
 8001350:	601a      	str	r2, [r3, #0]
			send_flag = 1;
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <fsm_machine+0x1c0>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
			send_flag =0;
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <fsm_machine+0x1c0>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 800135e:	2000      	movs	r0, #0
 8001360:	f000 fb2c 	bl	80019bc <lcd_Clear>
			lcd_Fill(50, 250, 190, 300, RED);
 8001364:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800136e:	22be      	movs	r2, #190	; 0xbe
 8001370:	21fa      	movs	r1, #250	; 0xfa
 8001372:	2032      	movs	r0, #50	; 0x32
 8001374:	f000 fb54 	bl	8001a20 <lcd_Fill>
			lcd_ShowStr(80,260,"RESTART",WHITE,WHITE,24,1);
 8001378:	2301      	movs	r3, #1
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2318      	movs	r3, #24
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138a:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <fsm_machine+0x1c4>)
 800138c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001390:	2050      	movs	r0, #80	; 0x50
 8001392:	f000 fffd 	bl	8002390 <lcd_ShowStr>
			lose = 0;
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <fsm_machine+0x1bc>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
		break;
 800139c:	e018      	b.n	80013d0 <fsm_machine+0x190>
		screen_game_over();
 800139e:	f001 fa3d 	bl	800281c <screen_game_over>
		if(isButtonRestart()){
 80013a2:	f003 fa59 	bl	8004858 <isButtonRestart>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <fsm_machine+0x194>
			count = 0;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <fsm_machine+0x1a0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
			status = PLAY;
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <fsm_machine+0x19c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 faff 	bl	80019bc <lcd_Clear>
			re_init();
 80013be:	f001 fc5f 	bl	8002c80 <re_init>
			screen_play();
 80013c2:	f001 f9cd 	bl	8002760 <screen_play>
		break;
 80013c6:	e005      	b.n	80013d4 <fsm_machine+0x194>
		break;
 80013c8:	bf00      	nop
 80013ca:	e004      	b.n	80013d6 <fsm_machine+0x196>
		break;
 80013cc:	bf00      	nop
 80013ce:	e002      	b.n	80013d6 <fsm_machine+0x196>
		break;
 80013d0:	bf00      	nop
 80013d2:	e000      	b.n	80013d6 <fsm_machine+0x196>
		break;
 80013d4:	bf00      	nop
	}
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200000f4 	.word	0x200000f4
 80013e0:	200000f8 	.word	0x200000f8
 80013e4:	2000001c 	.word	0x2000001c
 80013e8:	20000020 	.word	0x20000020
 80013ec:	20000028 	.word	0x20000028
 80013f0:	20000024 	.word	0x20000024
 80013f4:	20000966 	.word	0x20000966
 80013f8:	20000000 	.word	0x20000000
 80013fc:	2000095c 	.word	0x2000095c
 8001400:	200000fc 	.word	0x200000fc
 8001404:	0800aec0 	.word	0x0800aec0

08001408 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001422:	463b      	mov	r3, r7
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
 8001430:	615a      	str	r2, [r3, #20]
 8001432:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001434:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <MX_FSMC_Init+0xec>)
 8001436:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800143a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800143c:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <MX_FSMC_Init+0xec>)
 800143e:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <MX_FSMC_Init+0xf0>)
 8001440:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <MX_FSMC_Init+0xec>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001448:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <MX_FSMC_Init+0xec>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <MX_FSMC_Init+0xec>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <MX_FSMC_Init+0xec>)
 8001456:	2210      	movs	r2, #16
 8001458:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <MX_FSMC_Init+0xec>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001460:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <MX_FSMC_Init+0xec>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <MX_FSMC_Init+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800146c:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <MX_FSMC_Init+0xec>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <MX_FSMC_Init+0xec>)
 8001474:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_FSMC_Init+0xec>)
 800147c:	2200      	movs	r2, #0
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_FSMC_Init+0xec>)
 8001482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001486:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_FSMC_Init+0xec>)
 800148a:	2200      	movs	r2, #0
 800148c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_FSMC_Init+0xec>)
 8001490:	2200      	movs	r2, #0
 8001492:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_FSMC_Init+0xec>)
 8001496:	2200      	movs	r2, #0
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800149a:	230f      	movs	r3, #15
 800149c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800149e:	230f      	movs	r3, #15
 80014a0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80014a2:	233c      	movs	r3, #60	; 0x3c
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80014aa:	2310      	movs	r3, #16
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80014ae:	2311      	movs	r3, #17
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014b2:	2300      	movs	r3, #0
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80014b6:	2308      	movs	r3, #8
 80014b8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80014ba:	230f      	movs	r3, #15
 80014bc:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80014be:	2309      	movs	r3, #9
 80014c0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80014c6:	2310      	movs	r3, #16
 80014c8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80014ca:	2311      	movs	r3, #17
 80014cc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80014d2:	463a      	mov	r2, r7
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_FSMC_Init+0xec>)
 80014dc:	f006 fb36 	bl	8007b4c <HAL_SRAM_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80014e6:	f001 f90f 	bl	8002708 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80014ea:	bf00      	nop
 80014ec:	3738      	adds	r7, #56	; 0x38
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000a3c 	.word	0x20000a3c
 80014f8:	a0000104 	.word	0xa0000104

080014fc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_FSMC_MspInit+0x88>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d131      	bne.n	800157c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_FSMC_MspInit+0x88>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_FSMC_MspInit+0x8c>)
 8001524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001526:	4a18      	ldr	r2, [pc, #96]	; (8001588 <HAL_FSMC_MspInit+0x8c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6393      	str	r3, [r2, #56]	; 0x38
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_FSMC_MspInit+0x8c>)
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800153a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800153e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800154c:	230c      	movs	r3, #12
 800154e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <HAL_FSMC_MspInit+0x90>)
 8001556:	f004 fa67 	bl	8005a28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800155a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800155e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800156c:	230c      	movs	r3, #12
 800156e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4806      	ldr	r0, [pc, #24]	; (8001590 <HAL_FSMC_MspInit+0x94>)
 8001576:	f004 fa57 	bl	8005a28 <HAL_GPIO_Init>
 800157a:	e000      	b.n	800157e <HAL_FSMC_MspInit+0x82>
    return;
 800157c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000100 	.word	0x20000100
 8001588:	40023800 	.word	0x40023800
 800158c:	40021000 	.word	0x40021000
 8001590:	40020c00 	.word	0x40020c00

08001594 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800159c:	f7ff ffae 	bl	80014fc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	; 0x38
 80015ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
 80015c2:	4b7e      	ldr	r3, [pc, #504]	; (80017bc <MX_GPIO_Init+0x214>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a7d      	ldr	r2, [pc, #500]	; (80017bc <MX_GPIO_Init+0x214>)
 80015c8:	f043 0310 	orr.w	r3, r3, #16
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b7b      	ldr	r3, [pc, #492]	; (80017bc <MX_GPIO_Init+0x214>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	623b      	str	r3, [r7, #32]
 80015d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	4b77      	ldr	r3, [pc, #476]	; (80017bc <MX_GPIO_Init+0x214>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a76      	ldr	r2, [pc, #472]	; (80017bc <MX_GPIO_Init+0x214>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b74      	ldr	r3, [pc, #464]	; (80017bc <MX_GPIO_Init+0x214>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	4b70      	ldr	r3, [pc, #448]	; (80017bc <MX_GPIO_Init+0x214>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a6f      	ldr	r2, [pc, #444]	; (80017bc <MX_GPIO_Init+0x214>)
 8001600:	f043 0320 	orr.w	r3, r3, #32
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b6d      	ldr	r3, [pc, #436]	; (80017bc <MX_GPIO_Init+0x214>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0320 	and.w	r3, r3, #32
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	4b69      	ldr	r3, [pc, #420]	; (80017bc <MX_GPIO_Init+0x214>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a68      	ldr	r2, [pc, #416]	; (80017bc <MX_GPIO_Init+0x214>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b66      	ldr	r3, [pc, #408]	; (80017bc <MX_GPIO_Init+0x214>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b62      	ldr	r3, [pc, #392]	; (80017bc <MX_GPIO_Init+0x214>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a61      	ldr	r2, [pc, #388]	; (80017bc <MX_GPIO_Init+0x214>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b5f      	ldr	r3, [pc, #380]	; (80017bc <MX_GPIO_Init+0x214>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <MX_GPIO_Init+0x214>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a5a      	ldr	r2, [pc, #360]	; (80017bc <MX_GPIO_Init+0x214>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b58      	ldr	r3, [pc, #352]	; (80017bc <MX_GPIO_Init+0x214>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b54      	ldr	r3, [pc, #336]	; (80017bc <MX_GPIO_Init+0x214>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a53      	ldr	r2, [pc, #332]	; (80017bc <MX_GPIO_Init+0x214>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b51      	ldr	r3, [pc, #324]	; (80017bc <MX_GPIO_Init+0x214>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b4d      	ldr	r3, [pc, #308]	; (80017bc <MX_GPIO_Init+0x214>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a4c      	ldr	r2, [pc, #304]	; (80017bc <MX_GPIO_Init+0x214>)
 800168c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <MX_GPIO_Init+0x214>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	2170      	movs	r1, #112	; 0x70
 80016a2:	4847      	ldr	r0, [pc, #284]	; (80017c0 <MX_GPIO_Init+0x218>)
 80016a4:	f004 fb74 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80016ae:	4845      	ldr	r0, [pc, #276]	; (80017c4 <MX_GPIO_Init+0x21c>)
 80016b0:	f004 fb6e 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80016ba:	4843      	ldr	r0, [pc, #268]	; (80017c8 <MX_GPIO_Init+0x220>)
 80016bc:	f004 fb68 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c6:	4841      	ldr	r0, [pc, #260]	; (80017cc <MX_GPIO_Init+0x224>)
 80016c8:	f004 fb62 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2108      	movs	r1, #8
 80016d0:	483f      	ldr	r0, [pc, #252]	; (80017d0 <MX_GPIO_Init+0x228>)
 80016d2:	f004 fb5d 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80016d6:	2370      	movs	r3, #112	; 0x70
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	4834      	ldr	r0, [pc, #208]	; (80017c0 <MX_GPIO_Init+0x218>)
 80016ee:	f004 f99b 	bl	8005a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80016f2:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	4619      	mov	r1, r3
 800170a:	482e      	ldr	r0, [pc, #184]	; (80017c4 <MX_GPIO_Init+0x21c>)
 800170c:	f004 f98c 	bl	8005a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001710:	23c0      	movs	r3, #192	; 0xc0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001714:	2300      	movs	r3, #0
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	482a      	ldr	r0, [pc, #168]	; (80017cc <MX_GPIO_Init+0x224>)
 8001724:	f004 f980 	bl	8005a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001728:	2330      	movs	r3, #48	; 0x30
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172c:	2300      	movs	r3, #0
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	4822      	ldr	r0, [pc, #136]	; (80017c4 <MX_GPIO_Init+0x21c>)
 800173c:	f004 f974 	bl	8005a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001740:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	4619      	mov	r1, r3
 8001758:	481b      	ldr	r0, [pc, #108]	; (80017c8 <MX_GPIO_Init+0x220>)
 800175a:	f004 f965 	bl	8005a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 800175e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001768:	2301      	movs	r3, #1
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	4814      	ldr	r0, [pc, #80]	; (80017c4 <MX_GPIO_Init+0x21c>)
 8001774:	f004 f958 	bl	8005a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	4619      	mov	r1, r3
 8001790:	480e      	ldr	r0, [pc, #56]	; (80017cc <MX_GPIO_Init+0x224>)
 8001792:	f004 f949 	bl	8005a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001796:	2308      	movs	r3, #8
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	4619      	mov	r1, r3
 80017ac:	4808      	ldr	r0, [pc, #32]	; (80017d0 <MX_GPIO_Init+0x228>)
 80017ae:	f004 f93b 	bl	8005a28 <HAL_GPIO_Init>

}
 80017b2:	bf00      	nop
 80017b4:	3738      	adds	r7, #56	; 0x38
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40020800 	.word	0x40020800
 80017c8:	40021800 	.word	0x40021800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020c00 	.word	0x40020c00

080017d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_I2C1_Init+0x50>)
 80017da:	4a13      	ldr	r2, [pc, #76]	; (8001828 <MX_I2C1_Init+0x54>)
 80017dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_I2C1_Init+0x50>)
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <MX_I2C1_Init+0x58>)
 80017e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_I2C1_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_I2C1_Init+0x50>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_I2C1_Init+0x50>)
 80017f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <MX_I2C1_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_I2C1_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <MX_I2C1_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_I2C1_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001810:	4804      	ldr	r0, [pc, #16]	; (8001824 <MX_I2C1_Init+0x50>)
 8001812:	f004 fad7 	bl	8005dc4 <HAL_I2C_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800181c:	f000 ff74 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000a8c 	.word	0x20000a8c
 8001828:	40005400 	.word	0x40005400
 800182c:	000186a0 	.word	0x000186a0

08001830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_I2C_MspInit+0x84>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12b      	bne.n	80018aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800186e:	23c0      	movs	r3, #192	; 0xc0
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001872:	2312      	movs	r3, #18
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187e:	2304      	movs	r3, #4
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <HAL_I2C_MspInit+0x8c>)
 800188a:	f004 f8cd 	bl	8005a28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 8001898:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	; 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40005400 	.word	0x40005400
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020400 	.word	0x40020400

080018c0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <LCD_WR_REG+0x1c>)
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	8013      	strh	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	600ffffe 	.word	0x600ffffe

080018e0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80018ea:	4a04      	ldr	r2, [pc, #16]	; (80018fc <LCD_WR_DATA+0x1c>)
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	8053      	strh	r3, [r2, #2]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	600ffffe 	.word	0x600ffffe

08001900 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <LCD_RD_DATA+0x20>)
 8001908:	885b      	ldrh	r3, [r3, #2]
 800190a:	b29b      	uxth	r3, r3
 800190c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	b29b      	uxth	r3, r3
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	600ffffe 	.word	0x600ffffe

08001924 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4604      	mov	r4, r0
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4623      	mov	r3, r4
 8001934:	80fb      	strh	r3, [r7, #6]
 8001936:	4603      	mov	r3, r0
 8001938:	80bb      	strh	r3, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	807b      	strh	r3, [r7, #2]
 800193e:	4613      	mov	r3, r2
 8001940:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001942:	202a      	movs	r0, #42	; 0x2a
 8001944:	f7ff ffbc 	bl	80018c0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	b29b      	uxth	r3, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ffc6 	bl	80018e0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	b29b      	uxth	r3, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ffc0 	bl	80018e0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	b29b      	uxth	r3, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ffba 	bl	80018e0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	b29b      	uxth	r3, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ffb4 	bl	80018e0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001978:	202b      	movs	r0, #43	; 0x2b
 800197a:	f7ff ffa1 	bl	80018c0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800197e:	88bb      	ldrh	r3, [r7, #4]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	b29b      	uxth	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ffab 	bl	80018e0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	b29b      	uxth	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ffa5 	bl	80018e0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001996:	883b      	ldrh	r3, [r7, #0]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	b29b      	uxth	r3, r3
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff9f 	bl	80018e0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80019a2:	883b      	ldrh	r3, [r7, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff99 	bl	80018e0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80019ae:	202c      	movs	r0, #44	; 0x2c
 80019b0:	f7ff ff86 	bl	80018c0 <LCD_WR_REG>
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}

080019bc <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <lcd_Clear+0x60>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <lcd_Clear+0x60>)
 80019d0:	885b      	ldrh	r3, [r3, #2]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2100      	movs	r1, #0
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff ffa3 	bl	8001924 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80019de:	2300      	movs	r3, #0
 80019e0:	81fb      	strh	r3, [r7, #14]
 80019e2:	e011      	b.n	8001a08 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	81bb      	strh	r3, [r7, #12]
 80019e8:	e006      	b.n	80019f8 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff77 	bl	80018e0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80019f2:	89bb      	ldrh	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	81bb      	strh	r3, [r7, #12]
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <lcd_Clear+0x60>)
 80019fa:	885b      	ldrh	r3, [r3, #2]
 80019fc:	89ba      	ldrh	r2, [r7, #12]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3f3      	bcc.n	80019ea <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	3301      	adds	r3, #1
 8001a06:	81fb      	strh	r3, [r7, #14]
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <lcd_Clear+0x60>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	89fa      	ldrh	r2, [r7, #14]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d3e8      	bcc.n	80019e4 <lcd_Clear+0x28>
		}
	}
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000ae0 	.word	0x20000ae0

08001a20 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4604      	mov	r4, r0
 8001a28:	4608      	mov	r0, r1
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4623      	mov	r3, r4
 8001a30:	80fb      	strh	r3, [r7, #6]
 8001a32:	4603      	mov	r3, r0
 8001a34:	80bb      	strh	r3, [r7, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	807b      	strh	r3, [r7, #2]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	883b      	ldrh	r3, [r7, #0]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	88b9      	ldrh	r1, [r7, #4]
 8001a4c:	88f8      	ldrh	r0, [r7, #6]
 8001a4e:	f7ff ff69 	bl	8001924 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001a52:	88bb      	ldrh	r3, [r7, #4]
 8001a54:	81fb      	strh	r3, [r7, #14]
 8001a56:	e010      	b.n	8001a7a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	81bb      	strh	r3, [r7, #12]
 8001a5c:	e006      	b.n	8001a6c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001a5e:	8c3b      	ldrh	r3, [r7, #32]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff3d 	bl	80018e0 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001a66:	89bb      	ldrh	r3, [r7, #12]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	81bb      	strh	r3, [r7, #12]
 8001a6c:	89ba      	ldrh	r2, [r7, #12]
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d3f4      	bcc.n	8001a5e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001a74:	89fb      	ldrh	r3, [r7, #14]
 8001a76:	3301      	adds	r3, #1
 8001a78:	81fb      	strh	r3, [r7, #14]
 8001a7a:	89fa      	ldrh	r2, [r7, #14]
 8001a7c:	883b      	ldrh	r3, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d3ea      	bcc.n	8001a58 <lcd_Fill+0x38>
		}
	}
}
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
 8001a96:	460b      	mov	r3, r1
 8001a98:	80bb      	strh	r3, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	88b9      	ldrh	r1, [r7, #4]
 8001aa4:	88f8      	ldrh	r0, [r7, #6]
 8001aa6:	f7ff ff3d 	bl	8001924 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff17 	bl	80018e0 <LCD_WR_DATA>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001aba:	b590      	push	{r4, r7, lr}
 8001abc:	b08d      	sub	sp, #52	; 0x34
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	4608      	mov	r0, r1
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4623      	mov	r3, r4
 8001aca:	80fb      	strh	r3, [r7, #6]
 8001acc:	4603      	mov	r3, r0
 8001ace:	80bb      	strh	r3, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001ae0:	887a      	ldrh	r2, [r7, #2]
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001ae8:	883a      	ldrh	r2, [r7, #0]
 8001aea:	88bb      	ldrh	r3, [r7, #4]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001af4:	88bb      	ldrh	r3, [r7, #4]
 8001af6:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	dd02      	ble.n	8001b04 <lcd_DrawLine+0x4a>
 8001afe:	2301      	movs	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e00b      	b.n	8001b1c <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <lcd_DrawLine+0x56>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e005      	b.n	8001b1c <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001b10:	f04f 33ff 	mov.w	r3, #4294967295
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	425b      	negs	r3, r3
 8001b1a:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	dd02      	ble.n	8001b28 <lcd_DrawLine+0x6e>
 8001b22:	2301      	movs	r3, #1
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	e00b      	b.n	8001b40 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <lcd_DrawLine+0x7a>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	e005      	b.n	8001b40 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	425b      	negs	r3, r3
 8001b3e:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001b40:	6a3a      	ldr	r2, [r7, #32]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dd02      	ble.n	8001b4e <lcd_DrawLine+0x94>
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	e001      	b.n	8001b52 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001b56:	e02b      	b.n	8001bb0 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	b291      	uxth	r1, r2
 8001b60:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff91 	bl	8001a8c <lcd_DrawPoint>
		xerr+=delta_x;
 8001b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	4413      	add	r3, r2
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dd07      	ble.n	8001b92 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	dd07      	ble.n	8001baa <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001baa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bac:	3301      	adds	r3, #1
 8001bae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001bb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	dacf      	bge.n	8001b58 <lcd_DrawLine+0x9e>
		}
	}
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3734      	adds	r7, #52	; 0x34
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd90      	pop	{r4, r7, pc}
	...

08001bc4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4604      	mov	r4, r0
 8001bcc:	4608      	mov	r0, r1
 8001bce:	4611      	mov	r1, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	80fb      	strh	r3, [r7, #6]
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80bb      	strh	r3, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	70fb      	strb	r3, [r7, #3]
 8001bde:	4613      	mov	r3, r2
 8001be0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001bea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bee:	085b      	lsrs	r3, r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf14      	ite	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	fb12 f303 	smulbb	r3, r2, r3
 8001c1a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	3b20      	subs	r3, #32
 8001c20:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	4413      	add	r3, r2
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b29c      	uxth	r4, r3
 8001c30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	88bb      	ldrh	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	88b9      	ldrh	r1, [r7, #4]
 8001c42:	88f8      	ldrh	r0, [r7, #6]
 8001c44:	4622      	mov	r2, r4
 8001c46:	f7ff fe6d 	bl	8001924 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	827b      	strh	r3, [r7, #18]
 8001c4e:	e07a      	b.n	8001d46 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001c50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	d028      	beq.n	8001caa <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001c58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c5c:	2b10      	cmp	r3, #16
 8001c5e:	d108      	bne.n	8001c72 <lcd_ShowChar+0xae>
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	8a7b      	ldrh	r3, [r7, #18]
 8001c64:	493c      	ldr	r1, [pc, #240]	; (8001d58 <lcd_ShowChar+0x194>)
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	440a      	add	r2, r1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	75fb      	strb	r3, [r7, #23]
 8001c70:	e01b      	b.n	8001caa <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001c72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c76:	2b18      	cmp	r3, #24
 8001c78:	d10b      	bne.n	8001c92 <lcd_ShowChar+0xce>
 8001c7a:	78fa      	ldrb	r2, [r7, #3]
 8001c7c:	8a79      	ldrh	r1, [r7, #18]
 8001c7e:	4837      	ldr	r0, [pc, #220]	; (8001d5c <lcd_ShowChar+0x198>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	4403      	add	r3, r0
 8001c8a:	440b      	add	r3, r1
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	75fb      	strb	r3, [r7, #23]
 8001c90:	e00b      	b.n	8001caa <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001c92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d15a      	bne.n	8001d50 <lcd_ShowChar+0x18c>
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	8a7b      	ldrh	r3, [r7, #18]
 8001c9e:	4930      	ldr	r1, [pc, #192]	; (8001d60 <lcd_ShowChar+0x19c>)
 8001ca0:	0192      	lsls	r2, r2, #6
 8001ca2:	440a      	add	r2, r1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	75bb      	strb	r3, [r7, #22]
 8001cae:	e044      	b.n	8001d3a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001cb0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d120      	bne.n	8001cfa <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001cb8:	7dfa      	ldrb	r2, [r7, #23]
 8001cba:	7dbb      	ldrb	r3, [r7, #22]
 8001cbc:	fa42 f303 	asr.w	r3, r2, r3
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d004      	beq.n	8001cd2 <lcd_ShowChar+0x10e>
 8001cc8:	883b      	ldrh	r3, [r7, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fe08 	bl	80018e0 <LCD_WR_DATA>
 8001cd0:	e003      	b.n	8001cda <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001cd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fe03 	bl	80018e0 <LCD_WR_DATA>
				m++;
 8001cda:	7d7b      	ldrb	r3, [r7, #21]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001ce0:	7d7b      	ldrb	r3, [r7, #21]
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ce8:	fb02 f201 	mul.w	r2, r2, r1
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d11f      	bne.n	8001d34 <lcd_ShowChar+0x170>
				{
					m=0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	757b      	strb	r3, [r7, #21]
					break;
 8001cf8:	e022      	b.n	8001d40 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001cfa:	7dfa      	ldrb	r2, [r7, #23]
 8001cfc:	7dbb      	ldrb	r3, [r7, #22]
 8001cfe:	fa42 f303 	asr.w	r3, r2, r3
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <lcd_ShowChar+0x152>
 8001d0a:	883a      	ldrh	r2, [r7, #0]
 8001d0c:	88b9      	ldrh	r1, [r7, #4]
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff febb 	bl	8001a8c <lcd_DrawPoint>
				x++;
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001d1c:	88fa      	ldrh	r2, [r7, #6]
 8001d1e:	8a3b      	ldrh	r3, [r7, #16]
 8001d20:	1ad2      	subs	r2, r2, r3
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d105      	bne.n	8001d34 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001d28:	8a3b      	ldrh	r3, [r7, #16]
 8001d2a:	80fb      	strh	r3, [r7, #6]
					y++;
 8001d2c:	88bb      	ldrh	r3, [r7, #4]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	80bb      	strh	r3, [r7, #4]
					break;
 8001d32:	e005      	b.n	8001d40 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001d34:	7dbb      	ldrb	r3, [r7, #22]
 8001d36:	3301      	adds	r3, #1
 8001d38:	75bb      	strb	r3, [r7, #22]
 8001d3a:	7dbb      	ldrb	r3, [r7, #22]
 8001d3c:	2b07      	cmp	r3, #7
 8001d3e:	d9b7      	bls.n	8001cb0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001d40:	8a7b      	ldrh	r3, [r7, #18]
 8001d42:	3301      	adds	r3, #1
 8001d44:	827b      	strh	r3, [r7, #18]
 8001d46:	8a7a      	ldrh	r2, [r7, #18]
 8001d48:	89bb      	ldrh	r3, [r7, #12]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d380      	bcc.n	8001c50 <lcd_ShowChar+0x8c>
 8001d4e:	e000      	b.n	8001d52 <lcd_ShowChar+0x18e>
		else return;
 8001d50:	bf00      	nop
				}
			}
		}
	}
}
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	0800afe4 	.word	0x0800afe4
 8001d5c:	0800b5d4 	.word	0x0800b5d4
 8001d60:	0800c7a4 	.word	0x0800c7a4

08001d64 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	4613      	mov	r3, r2
 8001d72:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001d74:	2301      	movs	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001d78:	e004      	b.n	8001d84 <mypow+0x20>
 8001d7a:	79fa      	ldrb	r2, [r7, #7]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	1e5a      	subs	r2, r3, #1
 8001d88:	71ba      	strb	r2, [r7, #6]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f5      	bne.n	8001d7a <mypow+0x16>
	return result;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af04      	add	r7, sp, #16
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001dbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	e059      	b.n	8001e80 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001dcc:	887c      	ldrh	r4, [r7, #2]
 8001dce:	787a      	ldrb	r2, [r7, #1]
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4619      	mov	r1, r3
 8001ddc:	200a      	movs	r0, #10
 8001dde:	f7ff ffc1 	bl	8001d64 <mypow>
 8001de2:	4603      	mov	r3, r0
 8001de4:	fbb4 f1f3 	udiv	r1, r4, r3
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <lcd_ShowIntNum+0xf8>)
 8001dea:	fba3 2301 	umull	r2, r3, r3, r1
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	1aca      	subs	r2, r1, r3
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001dfe:	7bbb      	ldrb	r3, [r7, #14]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d121      	bne.n	8001e48 <lcd_ShowIntNum+0xac>
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	787b      	ldrb	r3, [r7, #1]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	da1c      	bge.n	8001e48 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001e0e:	7b3b      	ldrb	r3, [r7, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d117      	bne.n	8001e44 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	7b7b      	ldrb	r3, [r7, #13]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	fb12 f303 	smulbb	r3, r2, r3
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	4413      	add	r3, r2
 8001e26:	b298      	uxth	r0, r3
 8001e28:	8c3a      	ldrh	r2, [r7, #32]
 8001e2a:	88b9      	ldrh	r1, [r7, #4]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f7ff fec1 	bl	8001bc4 <lcd_ShowChar>
				continue;
 8001e42:	e01a      	b.n	8001e7a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	7b7b      	ldrb	r3, [r7, #13]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	fb12 f303 	smulbb	r3, r2, r3
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	4413      	add	r3, r2
 8001e5a:	b298      	uxth	r0, r3
 8001e5c:	7b3b      	ldrb	r3, [r7, #12]
 8001e5e:	3330      	adds	r3, #48	; 0x30
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	8c3c      	ldrh	r4, [r7, #32]
 8001e64:	88b9      	ldrh	r1, [r7, #4]
 8001e66:	2300      	movs	r3, #0
 8001e68:	9302      	str	r3, [sp, #8]
 8001e6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	4623      	mov	r3, r4
 8001e76:	f7ff fea5 	bl	8001bc4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	787b      	ldrb	r3, [r7, #1]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3a1      	bcc.n	8001dcc <lcd_ShowIntNum+0x30>
	}
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	cccccccd 	.word	0xcccccccd

08001e98 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <lcd_SetDir+0x44>)
 8001eb4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001eb8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <lcd_SetDir+0x44>)
 8001ebc:	22f0      	movs	r2, #240	; 0xf0
 8001ebe:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001ec0:	e006      	b.n	8001ed0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <lcd_SetDir+0x44>)
 8001ec4:	22f0      	movs	r2, #240	; 0xf0
 8001ec6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <lcd_SetDir+0x44>)
 8001eca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ece:	805a      	strh	r2, [r3, #2]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	20000ae0 	.word	0x20000ae0

08001ee0 <lcd_init>:


void lcd_init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eea:	48aa      	ldr	r0, [pc, #680]	; (8002194 <lcd_init+0x2b4>)
 8001eec:	f003 ff50 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ef0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ef4:	f002 fe84 	bl	8004c00 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001efe:	48a5      	ldr	r0, [pc, #660]	; (8002194 <lcd_init+0x2b4>)
 8001f00:	f003 ff46 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f08:	f002 fe7a 	bl	8004c00 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff ffc3 	bl	8001e98 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001f12:	20d3      	movs	r0, #211	; 0xd3
 8001f14:	f7ff fcd4 	bl	80018c0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001f18:	f7ff fcf2 	bl	8001900 <LCD_RD_DATA>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b9d      	ldr	r3, [pc, #628]	; (8002198 <lcd_init+0x2b8>)
 8001f22:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001f24:	f7ff fcec 	bl	8001900 <LCD_RD_DATA>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b9a      	ldr	r3, [pc, #616]	; (8002198 <lcd_init+0x2b8>)
 8001f2e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001f30:	f7ff fce6 	bl	8001900 <LCD_RD_DATA>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b97      	ldr	r3, [pc, #604]	; (8002198 <lcd_init+0x2b8>)
 8001f3a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001f3c:	4b96      	ldr	r3, [pc, #600]	; (8002198 <lcd_init+0x2b8>)
 8001f3e:	889b      	ldrh	r3, [r3, #4]
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b94      	ldr	r3, [pc, #592]	; (8002198 <lcd_init+0x2b8>)
 8001f46:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001f48:	f7ff fcda 	bl	8001900 <LCD_RD_DATA>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b91      	ldr	r3, [pc, #580]	; (8002198 <lcd_init+0x2b8>)
 8001f52:	889b      	ldrh	r3, [r3, #4]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	4b8f      	ldr	r3, [pc, #572]	; (8002198 <lcd_init+0x2b8>)
 8001f5a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001f5c:	20cf      	movs	r0, #207	; 0xcf
 8001f5e:	f7ff fcaf 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff fcbc 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001f68:	20c1      	movs	r0, #193	; 0xc1
 8001f6a:	f7ff fcb9 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001f6e:	2030      	movs	r0, #48	; 0x30
 8001f70:	f7ff fcb6 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001f74:	20ed      	movs	r0, #237	; 0xed
 8001f76:	f7ff fca3 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001f7a:	2064      	movs	r0, #100	; 0x64
 8001f7c:	f7ff fcb0 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001f80:	2003      	movs	r0, #3
 8001f82:	f7ff fcad 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001f86:	2012      	movs	r0, #18
 8001f88:	f7ff fcaa 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001f8c:	2081      	movs	r0, #129	; 0x81
 8001f8e:	f7ff fca7 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f92:	20e8      	movs	r0, #232	; 0xe8
 8001f94:	f7ff fc94 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001f98:	2085      	movs	r0, #133	; 0x85
 8001f9a:	f7ff fca1 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f9e:	2010      	movs	r0, #16
 8001fa0:	f7ff fc9e 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001fa4:	207a      	movs	r0, #122	; 0x7a
 8001fa6:	f7ff fc9b 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001faa:	20cb      	movs	r0, #203	; 0xcb
 8001fac:	f7ff fc88 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001fb0:	2039      	movs	r0, #57	; 0x39
 8001fb2:	f7ff fc95 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001fb6:	202c      	movs	r0, #44	; 0x2c
 8001fb8:	f7ff fc92 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff fc8f 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001fc2:	2034      	movs	r0, #52	; 0x34
 8001fc4:	f7ff fc8c 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001fc8:	2002      	movs	r0, #2
 8001fca:	f7ff fc89 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001fce:	20f7      	movs	r0, #247	; 0xf7
 8001fd0:	f7ff fc76 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001fd4:	2020      	movs	r0, #32
 8001fd6:	f7ff fc83 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001fda:	20ea      	movs	r0, #234	; 0xea
 8001fdc:	f7ff fc70 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fc7d 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff fc7a 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001fec:	20c0      	movs	r0, #192	; 0xc0
 8001fee:	f7ff fc67 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001ff2:	201b      	movs	r0, #27
 8001ff4:	f7ff fc74 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001ff8:	20c1      	movs	r0, #193	; 0xc1
 8001ffa:	f7ff fc61 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001ffe:	2001      	movs	r0, #1
 8002000:	f7ff fc6e 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002004:	20c5      	movs	r0, #197	; 0xc5
 8002006:	f7ff fc5b 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800200a:	2030      	movs	r0, #48	; 0x30
 800200c:	f7ff fc68 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002010:	2030      	movs	r0, #48	; 0x30
 8002012:	f7ff fc65 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002016:	20c7      	movs	r0, #199	; 0xc7
 8002018:	f7ff fc52 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800201c:	20b7      	movs	r0, #183	; 0xb7
 800201e:	f7ff fc5f 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002022:	2036      	movs	r0, #54	; 0x36
 8002024:	f7ff fc4c 	bl	80018c0 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002028:	2008      	movs	r0, #8
 800202a:	f7ff fc59 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800202e:	203a      	movs	r0, #58	; 0x3a
 8002030:	f7ff fc46 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002034:	2055      	movs	r0, #85	; 0x55
 8002036:	f7ff fc53 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800203a:	20b1      	movs	r0, #177	; 0xb1
 800203c:	f7ff fc40 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fc4d 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002046:	201a      	movs	r0, #26
 8002048:	f7ff fc4a 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800204c:	20b6      	movs	r0, #182	; 0xb6
 800204e:	f7ff fc37 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002052:	200a      	movs	r0, #10
 8002054:	f7ff fc44 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002058:	20a2      	movs	r0, #162	; 0xa2
 800205a:	f7ff fc41 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800205e:	20f2      	movs	r0, #242	; 0xf2
 8002060:	f7ff fc2e 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff fc3b 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800206a:	2026      	movs	r0, #38	; 0x26
 800206c:	f7ff fc28 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002070:	2001      	movs	r0, #1
 8002072:	f7ff fc35 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002076:	20e0      	movs	r0, #224	; 0xe0
 8002078:	f7ff fc22 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800207c:	200f      	movs	r0, #15
 800207e:	f7ff fc2f 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002082:	202a      	movs	r0, #42	; 0x2a
 8002084:	f7ff fc2c 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002088:	2028      	movs	r0, #40	; 0x28
 800208a:	f7ff fc29 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800208e:	2008      	movs	r0, #8
 8002090:	f7ff fc26 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002094:	200e      	movs	r0, #14
 8002096:	f7ff fc23 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800209a:	2008      	movs	r0, #8
 800209c:	f7ff fc20 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80020a0:	2054      	movs	r0, #84	; 0x54
 80020a2:	f7ff fc1d 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80020a6:	20a9      	movs	r0, #169	; 0xa9
 80020a8:	f7ff fc1a 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80020ac:	2043      	movs	r0, #67	; 0x43
 80020ae:	f7ff fc17 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80020b2:	200a      	movs	r0, #10
 80020b4:	f7ff fc14 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020b8:	200f      	movs	r0, #15
 80020ba:	f7ff fc11 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020be:	2000      	movs	r0, #0
 80020c0:	f7ff fc0e 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff fc0b 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7ff fc08 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff fc05 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80020d6:	20e1      	movs	r0, #225	; 0xe1
 80020d8:	f7ff fbf2 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff fbff 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80020e2:	2015      	movs	r0, #21
 80020e4:	f7ff fbfc 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80020e8:	2017      	movs	r0, #23
 80020ea:	f7ff fbf9 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80020ee:	2007      	movs	r0, #7
 80020f0:	f7ff fbf6 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80020f4:	2011      	movs	r0, #17
 80020f6:	f7ff fbf3 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80020fa:	2006      	movs	r0, #6
 80020fc:	f7ff fbf0 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002100:	202b      	movs	r0, #43	; 0x2b
 8002102:	f7ff fbed 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002106:	2056      	movs	r0, #86	; 0x56
 8002108:	f7ff fbea 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800210c:	203c      	movs	r0, #60	; 0x3c
 800210e:	f7ff fbe7 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002112:	2005      	movs	r0, #5
 8002114:	f7ff fbe4 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002118:	2010      	movs	r0, #16
 800211a:	f7ff fbe1 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800211e:	200f      	movs	r0, #15
 8002120:	f7ff fbde 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002124:	203f      	movs	r0, #63	; 0x3f
 8002126:	f7ff fbdb 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800212a:	203f      	movs	r0, #63	; 0x3f
 800212c:	f7ff fbd8 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002130:	200f      	movs	r0, #15
 8002132:	f7ff fbd5 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002136:	202b      	movs	r0, #43	; 0x2b
 8002138:	f7ff fbc2 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800213c:	2000      	movs	r0, #0
 800213e:	f7ff fbcf 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff fbcc 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002148:	2001      	movs	r0, #1
 800214a:	f7ff fbc9 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800214e:	203f      	movs	r0, #63	; 0x3f
 8002150:	f7ff fbc6 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002154:	202a      	movs	r0, #42	; 0x2a
 8002156:	f7ff fbb3 	bl	80018c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800215a:	2000      	movs	r0, #0
 800215c:	f7ff fbc0 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff fbbd 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff fbba 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800216c:	20ef      	movs	r0, #239	; 0xef
 800216e:	f7ff fbb7 	bl	80018e0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002172:	2011      	movs	r0, #17
 8002174:	f7ff fba4 	bl	80018c0 <LCD_WR_REG>
	HAL_Delay(120);
 8002178:	2078      	movs	r0, #120	; 0x78
 800217a:	f002 fd41 	bl	8004c00 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800217e:	2029      	movs	r0, #41	; 0x29
 8002180:	f7ff fb9e 	bl	80018c0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002184:	2201      	movs	r2, #1
 8002186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800218a:	4804      	ldr	r0, [pc, #16]	; (800219c <lcd_init+0x2bc>)
 800218c:	f003 fe00 	bl	8005d90 <HAL_GPIO_WritePin>
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40020800 	.word	0x40020800
 8002198:	20000ae0 	.word	0x20000ae0
 800219c:	40020000 	.word	0x40020000

080021a0 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	b298      	uxth	r0, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	8b3a      	ldrh	r2, [r7, #24]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7ff fc5f 	bl	8001a8c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	b298      	uxth	r0, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	b29a      	uxth	r2, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	8b3a      	ldrh	r2, [r7, #24]
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7ff fc4f 	bl	8001a8c <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	b298      	uxth	r0, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	b29b      	uxth	r3, r3
 8002206:	8b3a      	ldrh	r2, [r7, #24]
 8002208:	4619      	mov	r1, r3
 800220a:	f7ff fc3f 	bl	8001a8c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	b29a      	uxth	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	b29b      	uxth	r3, r3
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	b298      	uxth	r0, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	b29a      	uxth	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	b29b      	uxth	r3, r3
 8002226:	8b3a      	ldrh	r2, [r7, #24]
 8002228:	4619      	mov	r1, r3
 800222a:	f7ff fc2f 	bl	8001a8c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	b29a      	uxth	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4413      	add	r3, r2
 8002238:	b298      	uxth	r0, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	b29a      	uxth	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	b29b      	uxth	r3, r3
 8002242:	4413      	add	r3, r2
 8002244:	b29b      	uxth	r3, r3
 8002246:	8b3a      	ldrh	r2, [r7, #24]
 8002248:	4619      	mov	r1, r3
 800224a:	f7ff fc1f 	bl	8001a8c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	b29a      	uxth	r2, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	b298      	uxth	r0, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	b29a      	uxth	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	b29b      	uxth	r3, r3
 8002262:	4413      	add	r3, r2
 8002264:	b29b      	uxth	r3, r3
 8002266:	8b3a      	ldrh	r2, [r7, #24]
 8002268:	4619      	mov	r1, r3
 800226a:	f7ff fc0f 	bl	8001a8c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	4413      	add	r3, r2
 8002278:	b298      	uxth	r0, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	b29a      	uxth	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	b29b      	uxth	r3, r3
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	b29b      	uxth	r3, r3
 8002286:	8b3a      	ldrh	r2, [r7, #24]
 8002288:	4619      	mov	r1, r3
 800228a:	f7ff fbff 	bl	8001a8c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	b29a      	uxth	r2, r3
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	b298      	uxth	r0, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	b29a      	uxth	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	8b3a      	ldrh	r2, [r7, #24]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7ff fbef 	bl	8001a8c <lcd_DrawPoint>
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b08a      	sub	sp, #40	; 0x28
 80022ba:	af02      	add	r7, sp, #8
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4613      	mov	r3, r2
 80022c4:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	f1c3 0303 	rsb	r3, r3, #3
 80022d6:	613b      	str	r3, [r7, #16]


	if (fill)
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d04f      	beq.n	800237e <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80022de:	e029      	b.n	8002334 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e00a      	b.n	80022fc <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7ff ff55 	bl	80021a0 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	429a      	cmp	r2, r3
 8002302:	ddf0      	ble.n	80022e6 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	da06      	bge.n	8002318 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	009a      	lsls	r2, r3, #2
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4413      	add	r3, r2
 8002312:	3306      	adds	r3, #6
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	e00a      	b.n	800232e <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	009a      	lsls	r2, r3, #2
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	330a      	adds	r3, #10
 8002326:	613b      	str	r3, [r7, #16]
				y--;
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	3b01      	subs	r3, #1
 800232c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	429a      	cmp	r2, r3
 800233a:	ddd1      	ble.n	80022e0 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 800233c:	e023      	b.n	8002386 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f7ff ff29 	bl	80021a0 <_draw_circle_8>
			if (d < 0) {
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	da06      	bge.n	8002362 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	009a      	lsls	r2, r3, #2
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	3306      	adds	r3, #6
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	e00a      	b.n	8002378 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	009a      	lsls	r2, r3, #2
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	330a      	adds	r3, #10
 8002370:	613b      	str	r3, [r7, #16]
				y--;
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	3b01      	subs	r3, #1
 8002376:	61bb      	str	r3, [r7, #24]
			x++;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	3301      	adds	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	429a      	cmp	r2, r3
 8002384:	dddb      	ble.n	800233e <lcd_DrawCircle+0x88>
}
 8002386:	bf00      	nop
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b08b      	sub	sp, #44	; 0x2c
 8002394:	af04      	add	r7, sp, #16
 8002396:	60ba      	str	r2, [r7, #8]
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	81fb      	strh	r3, [r7, #14]
 800239e:	460b      	mov	r3, r1
 80023a0:	81bb      	strh	r3, [r7, #12]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80023a6:	89fb      	ldrh	r3, [r7, #14]
 80023a8:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80023ae:	e048      	b.n	8002442 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d145      	bne.n	8002442 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80023b6:	89fa      	ldrh	r2, [r7, #14]
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <lcd_ShowStr+0xc4>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	1acb      	subs	r3, r1, r3
 80023c8:	429a      	cmp	r2, r3
 80023ca:	dc3f      	bgt.n	800244c <lcd_ShowStr+0xbc>
 80023cc:	89ba      	ldrh	r2, [r7, #12]
 80023ce:	4b21      	ldr	r3, [pc, #132]	; (8002454 <lcd_ShowStr+0xc4>)
 80023d0:	885b      	ldrh	r3, [r3, #2]
 80023d2:	4619      	mov	r1, r3
 80023d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80023d8:	1acb      	subs	r3, r1, r3
 80023da:	429a      	cmp	r2, r3
 80023dc:	dc36      	bgt.n	800244c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b80      	cmp	r3, #128	; 0x80
 80023e4:	d902      	bls.n	80023ec <lcd_ShowStr+0x5c>
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
 80023ea:	e02a      	b.n	8002442 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b0d      	cmp	r3, #13
 80023f2:	d10b      	bne.n	800240c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80023f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	89bb      	ldrh	r3, [r7, #12]
 80023fc:	4413      	add	r3, r2
 80023fe:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002400:	8abb      	ldrh	r3, [r7, #20]
 8002402:	81fb      	strh	r3, [r7, #14]
					str++;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	3301      	adds	r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	e017      	b.n	800243c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	88fc      	ldrh	r4, [r7, #6]
 8002412:	89b9      	ldrh	r1, [r7, #12]
 8002414:	89f8      	ldrh	r0, [r7, #14]
 8002416:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800241a:	9302      	str	r3, [sp, #8]
 800241c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	4623      	mov	r3, r4
 8002428:	f7ff fbcc 	bl	8001bc4 <lcd_ShowChar>
					x+=sizey/2;
 800242c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002430:	085b      	lsrs	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	b29a      	uxth	r2, r3
 8002436:	89fb      	ldrh	r3, [r7, #14]
 8002438:	4413      	add	r3, r2
 800243a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	3301      	adds	r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1b2      	bne.n	80023b0 <lcd_ShowStr+0x20>
 800244a:	e000      	b.n	800244e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800244c:	bf00      	nop
			}
		}
	}
}
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	20000ae0 	.word	0x20000ae0

08002458 <led7_Scan>:

void led7_init(){//khoi tao
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){//quet led
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800245c:	4b3f      	ldr	r3, [pc, #252]	; (800255c <led7_Scan+0x104>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	b29a      	uxth	r2, r3
 8002464:	4b3d      	ldr	r3, [pc, #244]	; (800255c <led7_Scan+0x104>)
 8002466:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002468:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <led7_Scan+0x108>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a3d      	ldr	r2, [pc, #244]	; (8002564 <led7_Scan+0x10c>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	b21a      	sxth	r2, r3
 8002474:	4b39      	ldr	r3, [pc, #228]	; (800255c <led7_Scan+0x104>)
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b21b      	sxth	r3, r3
 800247a:	4313      	orrs	r3, r2
 800247c:	b21b      	sxth	r3, r3
 800247e:	b29a      	uxth	r2, r3
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <led7_Scan+0x104>)
 8002482:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002484:	4b36      	ldr	r3, [pc, #216]	; (8002560 <led7_Scan+0x108>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d847      	bhi.n	800251c <led7_Scan+0xc4>
 800248c:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <led7_Scan+0x3c>)
 800248e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002492:	bf00      	nop
 8002494:	080024a5 	.word	0x080024a5
 8002498:	080024c3 	.word	0x080024c3
 800249c:	080024e1 	.word	0x080024e1
 80024a0:	080024ff 	.word	0x080024ff
	case 0:
		spi_buffer |= 0x00b0;
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <led7_Scan+0x104>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	4b2b      	ldr	r3, [pc, #172]	; (800255c <led7_Scan+0x104>)
 80024b0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80024b2:	4b2a      	ldr	r3, [pc, #168]	; (800255c <led7_Scan+0x104>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <led7_Scan+0x104>)
 80024be:	801a      	strh	r2, [r3, #0]
		break;
 80024c0:	e02d      	b.n	800251e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80024c2:	4b26      	ldr	r3, [pc, #152]	; (800255c <led7_Scan+0x104>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <led7_Scan+0x104>)
 80024ce:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <led7_Scan+0x104>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	f023 0320 	bic.w	r3, r3, #32
 80024d8:	b29a      	uxth	r2, r3
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <led7_Scan+0x104>)
 80024dc:	801a      	strh	r2, [r3, #0]
		break;
 80024de:	e01e      	b.n	800251e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <led7_Scan+0x104>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <led7_Scan+0x104>)
 80024ec:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80024ee:	4b1b      	ldr	r3, [pc, #108]	; (800255c <led7_Scan+0x104>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	f023 0310 	bic.w	r3, r3, #16
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <led7_Scan+0x104>)
 80024fa:	801a      	strh	r2, [r3, #0]
		break;
 80024fc:	e00f      	b.n	800251e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <led7_Scan+0x104>)
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002506:	b29a      	uxth	r2, r3
 8002508:	4b14      	ldr	r3, [pc, #80]	; (800255c <led7_Scan+0x104>)
 800250a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <led7_Scan+0x104>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <led7_Scan+0x104>)
 8002518:	801a      	strh	r2, [r3, #0]
		break;
 800251a:	e000      	b.n	800251e <led7_Scan+0xc6>
	default:
		break;
 800251c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <led7_Scan+0x108>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	425a      	negs	r2, r3
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	f002 0203 	and.w	r2, r2, #3
 800252e:	bf58      	it	pl
 8002530:	4253      	negpl	r3, r2
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <led7_Scan+0x108>)
 8002534:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	480b      	ldr	r0, [pc, #44]	; (8002568 <led7_Scan+0x110>)
 800253c:	f003 fc28 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002540:	2301      	movs	r3, #1
 8002542:	2202      	movs	r2, #2
 8002544:	4905      	ldr	r1, [pc, #20]	; (800255c <led7_Scan+0x104>)
 8002546:	4809      	ldr	r0, [pc, #36]	; (800256c <led7_Scan+0x114>)
 8002548:	f005 f8f9 	bl	800773e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800254c:	2201      	movs	r2, #1
 800254e:	2140      	movs	r1, #64	; 0x40
 8002550:	4805      	ldr	r0, [pc, #20]	; (8002568 <led7_Scan+0x110>)
 8002552:	f003 fc1d 	bl	8005d90 <HAL_GPIO_WritePin>
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	2000000c 	.word	0x2000000c
 8002560:	20000104 	.word	0x20000104
 8002564:	20000008 	.word	0x20000008
 8002568:	40021800 	.word	0x40021800
 800256c:	20000b1c 	.word	0x20000b1c

08002570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002574:	f002 fad2 	bl	8004b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002578:	f000 f830 	bl	80025dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800257c:	f7ff f814 	bl	80015a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002580:	f001 f8a8 	bl	80036d4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002584:	f000 fe86 	bl	8003294 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002588:	f7fe ff3e 	bl	8001408 <MX_FSMC_Init>
  MX_I2C1_Init();
 800258c:	f7ff f922 	bl	80017d4 <MX_I2C1_Init>
  MX_TIM13_Init();
 8002590:	f001 f8ec 	bl	800376c <MX_TIM13_Init>
  MX_DMA_Init();
 8002594:	f7fe fe34 	bl	8001200 <MX_DMA_Init>
  MX_ADC1_Init();
 8002598:	f7fe fc72 	bl	8000e80 <MX_ADC1_Init>
  MX_TIM1_Init();
 800259c:	f001 f84a 	bl	8003634 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80025a0:	f002 f9b2 	bl	8004908 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025a4:	f002 f9da 	bl	800495c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80025a8:	f000 f882 	bl	80026b0 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 //touch_Adjust();
 setTimer3(100);
 80025ac:	2064      	movs	r0, #100	; 0x64
 80025ae:	f000 fd35 	bl	800301c <setTimer3>
 setTimer5(10);
 80025b2:	200a      	movs	r0, #10
 80025b4:	f000 fd6a 	bl	800308c <setTimer5>
 setTimer7(10);
 80025b8:	200a      	movs	r0, #10
 80025ba:	f000 fd83 	bl	80030c4 <setTimer7>
 while (1)
  {
	  // 50ms task
	  while(!flag_timer2);
 80025be:	bf00      	nop
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <main+0x68>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0fb      	beq.n	80025c0 <main+0x50>
	  flag_timer2 = 0;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <main+0x68>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	801a      	strh	r2, [r3, #0]

	  touch_Scan();
 80025ce:	f002 f859 	bl	8004684 <touch_Scan>
	  fsm_machine();
 80025d2:	f7fe fe35 	bl	8001240 <fsm_machine>
	  while(!flag_timer2);
 80025d6:	e7f2      	b.n	80025be <main+0x4e>
 80025d8:	20000960 	.word	0x20000960

080025dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b094      	sub	sp, #80	; 0x50
 80025e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025e2:	f107 0320 	add.w	r3, r7, #32
 80025e6:	2230      	movs	r2, #48	; 0x30
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f007 fb72 	bl	8009cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <SystemClock_Config+0xcc>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	4a27      	ldr	r2, [pc, #156]	; (80026a8 <SystemClock_Config+0xcc>)
 800260a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260e:	6413      	str	r3, [r2, #64]	; 0x40
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <SystemClock_Config+0xcc>)
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800261c:	2300      	movs	r3, #0
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	4b22      	ldr	r3, [pc, #136]	; (80026ac <SystemClock_Config+0xd0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a21      	ldr	r2, [pc, #132]	; (80026ac <SystemClock_Config+0xd0>)
 8002626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <SystemClock_Config+0xd0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002638:	2302      	movs	r3, #2
 800263a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800263c:	2301      	movs	r3, #1
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002640:	2310      	movs	r3, #16
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002644:	2302      	movs	r3, #2
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002648:	2300      	movs	r3, #0
 800264a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800264c:	2308      	movs	r3, #8
 800264e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002650:	23a8      	movs	r3, #168	; 0xa8
 8002652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002654:	2302      	movs	r3, #2
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002658:	2304      	movs	r3, #4
 800265a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800265c:	f107 0320 	add.w	r3, r7, #32
 8002660:	4618      	mov	r0, r3
 8002662:	f004 fb6f 	bl	8006d44 <HAL_RCC_OscConfig>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800266c:	f000 f84c 	bl	8002708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002670:	230f      	movs	r3, #15
 8002672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002674:	2302      	movs	r3, #2
 8002676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800267c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002682:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002688:	f107 030c 	add.w	r3, r7, #12
 800268c:	2105      	movs	r1, #5
 800268e:	4618      	mov	r0, r3
 8002690:	f004 fdd0 	bl	8007234 <HAL_RCC_ClockConfig>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800269a:	f000 f835 	bl	8002708 <Error_Handler>
  }
}
 800269e:	bf00      	nop
 80026a0:	3750      	adds	r7, #80	; 0x50
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40007000 	.word	0x40007000

080026b0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af04      	add	r7, sp, #16
	  timer_init();
 80026b6:	f000 fc87 	bl	8002fc8 <timer_init>
	  lcd_init();
 80026ba:	f7ff fc11 	bl	8001ee0 <lcd_init>
	  touch_init();
 80026be:	f001 ffd1 	bl	8004664 <touch_init>
	  setTimer2(50);
 80026c2:	2032      	movs	r0, #50	; 0x32
 80026c4:	f000 fc8e 	bl	8002fe4 <setTimer2>

	  lcd_Clear(BLACK);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7ff f977 	bl	80019bc <lcd_Clear>
	  lcd_Fill(70, 220, 170, 280, RED);
 80026ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80026d8:	22aa      	movs	r2, #170	; 0xaa
 80026da:	21dc      	movs	r1, #220	; 0xdc
 80026dc:	2046      	movs	r0, #70	; 0x46
 80026de:	f7ff f99f 	bl	8001a20 <lcd_Fill>
	  lcd_ShowStr(95,235,"PLAY",WHITE,WHITE,24,1);
 80026e2:	2301      	movs	r3, #1
 80026e4:	9302      	str	r3, [sp, #8]
 80026e6:	2318      	movs	r3, #24
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f4:	4a03      	ldr	r2, [pc, #12]	; (8002704 <system_init+0x54>)
 80026f6:	21eb      	movs	r1, #235	; 0xeb
 80026f8:	205f      	movs	r0, #95	; 0x5f
 80026fa:	f7ff fe49 	bl	8002390 <lcd_ShowStr>
}
 80026fe:	bf00      	nop
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	0800aec8 	.word	0x0800aec8

08002708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800270c:	b672      	cpsid	i
}
 800270e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002710:	e7fe      	b.n	8002710 <Error_Handler+0x8>
	...

08002714 <screen_init>:
 *      Author: Admin
 */

#include "screen.h"

void screen_init(){
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af04      	add	r7, sp, #16
	lcd_ShowStr(60,90,"WELCOME TO",WHITE,WHITE,24,1);
 800271a:	2301      	movs	r3, #1
 800271c:	9302      	str	r3, [sp, #8]
 800271e:	2318      	movs	r3, #24
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <screen_init+0x44>)
 800272e:	215a      	movs	r1, #90	; 0x5a
 8002730:	203c      	movs	r0, #60	; 0x3c
 8002732:	f7ff fe2d 	bl	8002390 <lcd_ShowStr>
	lcd_ShowStr(40,120,"SNAKE GAME",WHITE,WHITE,32,1);
 8002736:	2301      	movs	r3, #1
 8002738:	9302      	str	r3, [sp, #8]
 800273a:	2320      	movs	r3, #32
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <screen_init+0x48>)
 800274a:	2178      	movs	r1, #120	; 0x78
 800274c:	2028      	movs	r0, #40	; 0x28
 800274e:	f7ff fe1f 	bl	8002390 <lcd_ShowStr>
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	0800aed8 	.word	0x0800aed8
 800275c:	0800aee4 	.word	0x0800aee4

08002760 <screen_play>:

void screen_play(){
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af02      	add	r7, sp, #8
	lcd_Fill(0, 0, 240, 200, WHITE);
 8002766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	23c8      	movs	r3, #200	; 0xc8
 800276e:	22f0      	movs	r2, #240	; 0xf0
 8002770:	2100      	movs	r1, #0
 8002772:	2000      	movs	r0, #0
 8002774:	f7ff f954 	bl	8001a20 <lcd_Fill>
	lcd_DrawCircle(120, 230, GBLUE, 20, 1);
 8002778:	2301      	movs	r3, #1
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2314      	movs	r3, #20
 800277e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002782:	21e6      	movs	r1, #230	; 0xe6
 8002784:	2078      	movs	r0, #120	; 0x78
 8002786:	f7ff fd96 	bl	80022b6 <lcd_DrawCircle>
	lcd_DrawCircle(120, 280, GBLUE, 20, 1);
 800278a:	2301      	movs	r3, #1
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2314      	movs	r3, #20
 8002790:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002794:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002798:	2078      	movs	r0, #120	; 0x78
 800279a:	f7ff fd8c 	bl	80022b6 <lcd_DrawCircle>
	lcd_DrawCircle(50, 280, GBLUE, 20, 1);
 800279e:	2301      	movs	r3, #1
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2314      	movs	r3, #20
 80027a4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80027a8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80027ac:	2032      	movs	r0, #50	; 0x32
 80027ae:	f7ff fd82 	bl	80022b6 <lcd_DrawCircle>
	lcd_DrawCircle(190, 280, GBLUE, 20, 1);
 80027b2:	2301      	movs	r3, #1
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2314      	movs	r3, #20
 80027b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80027bc:	f44f 718c 	mov.w	r1, #280	; 0x118
 80027c0:	20be      	movs	r0, #190	; 0xbe
 80027c2:	f7ff fd78 	bl	80022b6 <lcd_DrawCircle>
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <screen_score>:

void screen_score(){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af04      	add	r7, sp, #16
	lcd_ShowStr(0, 205, "Score: ", WHITE, WHITE, 24, 1);
 80027d2:	2301      	movs	r3, #1
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	2318      	movs	r3, #24
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027e4:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <screen_score+0x48>)
 80027e6:	21cd      	movs	r1, #205	; 0xcd
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7ff fdd1 	bl	8002390 <lcd_ShowStr>
	lcd_ShowIntNum(70, 205, score, 2, WHITE, BLACK, 24);
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <screen_score+0x4c>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	2318      	movs	r3, #24
 80027f6:	9302      	str	r3, [sp, #8]
 80027f8:	2300      	movs	r3, #0
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2302      	movs	r3, #2
 8002804:	21cd      	movs	r1, #205	; 0xcd
 8002806:	2046      	movs	r0, #70	; 0x46
 8002808:	f7ff fac8 	bl	8001d9c <lcd_ShowIntNum>
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	0800aef0 	.word	0x0800aef0
 8002818:	20000958 	.word	0x20000958

0800281c <screen_game_over>:

void screen_game_over(){
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af04      	add	r7, sp, #16
	lcd_ShowStr(40,110,"GAME OVER!",WHITE,WHITE,32,1);
 8002822:	2301      	movs	r3, #1
 8002824:	9302      	str	r3, [sp, #8]
 8002826:	2320      	movs	r3, #32
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002834:	4a12      	ldr	r2, [pc, #72]	; (8002880 <screen_game_over+0x64>)
 8002836:	216e      	movs	r1, #110	; 0x6e
 8002838:	2028      	movs	r0, #40	; 0x28
 800283a:	f7ff fda9 	bl	8002390 <lcd_ShowStr>
	lcd_ShowStr(70, 220, "Score: ", WHITE, WHITE, 24, 1);
 800283e:	2301      	movs	r3, #1
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	2318      	movs	r3, #24
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002850:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <screen_game_over+0x68>)
 8002852:	21dc      	movs	r1, #220	; 0xdc
 8002854:	2046      	movs	r0, #70	; 0x46
 8002856:	f7ff fd9b 	bl	8002390 <lcd_ShowStr>
	lcd_ShowIntNum(150, 220, score, 2, WHITE, BLACK, 24);
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <screen_game_over+0x6c>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b29a      	uxth	r2, r3
 8002860:	2318      	movs	r3, #24
 8002862:	9302      	str	r3, [sp, #8]
 8002864:	2300      	movs	r3, #0
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	2302      	movs	r3, #2
 8002870:	21dc      	movs	r1, #220	; 0xdc
 8002872:	2096      	movs	r0, #150	; 0x96
 8002874:	f7ff fa92 	bl	8001d9c <lcd_ShowIntNum>
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	0800aef8 	.word	0x0800aef8
 8002884:	0800aef0 	.word	0x0800aef0
 8002888:	20000958 	.word	0x20000958

0800288c <draw_snake>:
int sw_right = 1;
int sw_left = 1;
uint8_t score = 0;
int lose = 0;

void draw_snake(int x,int y){
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af02      	add	r7, sp, #8
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, GREEN, 5, 1);
 8002896:	2301      	movs	r3, #1
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	2305      	movs	r3, #5
 800289c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80028a0:	6839      	ldr	r1, [r7, #0]
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fd07 	bl	80022b6 <lcd_DrawCircle>
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <draw_food>:

void draw_food(int x,int y){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, RED, 5, 1);
 80028ba:	2301      	movs	r3, #1
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2305      	movs	r3, #5
 80028c0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff fcf5 	bl	80022b6 <lcd_DrawCircle>
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <draw_head>:

void draw_head(int x, int y){
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af02      	add	r7, sp, #8
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, BRED, 5, 1);
 80028de:	2301      	movs	r3, #1
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2305      	movs	r3, #5
 80028e4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80028e8:	6839      	ldr	r1, [r7, #0]
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fce3 	bl	80022b6 <lcd_DrawCircle>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <draw_wall>:

void draw_wall(int x, int y){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, GRAY, 5, 1);
 8002902:	2301      	movs	r3, #1
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2305      	movs	r3, #5
 8002908:	f248 4230 	movw	r2, #33840	; 0x8430
 800290c:	6839      	ldr	r1, [r7, #0]
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fcd1 	bl	80022b6 <lcd_DrawCircle>
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <clear_block>:

void clear_block(int x,int y){
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af02      	add	r7, sp, #8
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, WHITE, 5, 1);
 8002926:	2301      	movs	r3, #1
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2305      	movs	r3, #5
 800292c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002930:	6839      	ldr	r1, [r7, #0]
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff fcbf 	bl	80022b6 <lcd_DrawCircle>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <update_grid>:

void update_grid(){
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
	for(int i=0;i<24;i++){
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	e08b      	b.n	8002a64 <update_grid+0x124>
		for(int j=0;j<20;j++){
 800294c:	2300      	movs	r3, #0
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	e081      	b.n	8002a56 <update_grid+0x116>
			if(draw_grid[i][j]==2){
 8002952:	4949      	ldr	r1, [pc, #292]	; (8002a78 <update_grid+0x138>)
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	4413      	add	r3, r2
 8002962:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d10f      	bne.n	800298a <update_grid+0x4a>
				draw_snake(i*10+5,j*10+5);
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	1d58      	adds	r0, r3, #5
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	3305      	adds	r3, #5
 8002982:	4619      	mov	r1, r3
 8002984:	f7ff ff82 	bl	800288c <draw_snake>
 8002988:	e062      	b.n	8002a50 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==4){
 800298a:	493b      	ldr	r1, [pc, #236]	; (8002a78 <update_grid+0x138>)
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	4413      	add	r3, r2
 800299a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d10f      	bne.n	80029c2 <update_grid+0x82>
				draw_head(i*10+5,j*10+5);
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	1d58      	adds	r0, r3, #5
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	3305      	adds	r3, #5
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7ff ff8a 	bl	80028d4 <draw_head>
 80029c0:	e046      	b.n	8002a50 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==1){
 80029c2:	492d      	ldr	r1, [pc, #180]	; (8002a78 <update_grid+0x138>)
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d10f      	bne.n	80029fa <update_grid+0xba>
				draw_food(i*10+5,j*10+5);
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	1d58      	adds	r0, r3, #5
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	3305      	adds	r3, #5
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7ff ff5c 	bl	80028b0 <draw_food>
 80029f8:	e02a      	b.n	8002a50 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==3){
 80029fa:	491f      	ldr	r1, [pc, #124]	; (8002a78 <update_grid+0x138>)
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d10f      	bne.n	8002a32 <update_grid+0xf2>
				draw_wall(i*10+5,j*10+5);
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	1d58      	adds	r0, r3, #5
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	3305      	adds	r3, #5
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f7ff ff64 	bl	80028f8 <draw_wall>
 8002a30:	e00e      	b.n	8002a50 <update_grid+0x110>
			}
			else{
				clear_block(i*10+5,j*10+5);
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	1d58      	adds	r0, r3, #5
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	3305      	adds	r3, #5
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7ff ff66 	bl	800291c <clear_block>
		for(int j=0;j<20;j++){
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b13      	cmp	r3, #19
 8002a5a:	f77f af7a 	ble.w	8002952 <update_grid+0x12>
	for(int i=0;i<24;i++){
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3301      	adds	r3, #1
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b17      	cmp	r3, #23
 8002a68:	f77f af70 	ble.w	800294c <update_grid+0xc>
			}
		}
	}
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000108 	.word	0x20000108

08002a7c <init_grid>:
			}
		}
	}
}

void init_grid(void){
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
	for(int i=0; i<24;i++){
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	e016      	b.n	8002ab6 <init_grid+0x3a>
		for(int j=0;j<20;j++){
 8002a88:	2300      	movs	r3, #0
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	e00d      	b.n	8002aaa <init_grid+0x2e>
			draw_grid[i][j]=0;
 8002a8e:	490f      	ldr	r1, [pc, #60]	; (8002acc <init_grid+0x50>)
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0;j<20;j++){
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b13      	cmp	r3, #19
 8002aae:	ddee      	ble.n	8002a8e <init_grid+0x12>
	for(int i=0; i<24;i++){
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b17      	cmp	r3, #23
 8002aba:	dde5      	ble.n	8002a88 <init_grid+0xc>
		}
	}
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000108 	.word	0x20000108

08002ad0 <move_snake>:

void move_snake(){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
	for(int i=size_of_snake-1;i>=0;i--){
 8002ad6:	4b63      	ldr	r3, [pc, #396]	; (8002c64 <move_snake+0x194>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e014      	b.n	8002b0a <move_snake+0x3a>
		draw_grid[snake_pos[0][i]][snake_pos[1][i]]=0;
 8002ae0:	4a61      	ldr	r2, [pc, #388]	; (8002c68 <move_snake+0x198>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ae8:	495f      	ldr	r1, [pc, #380]	; (8002c68 <move_snake+0x198>)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	3318      	adds	r3, #24
 8002aee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002af2:	485e      	ldr	r0, [pc, #376]	; (8002c6c <move_snake+0x19c>)
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	2200      	movs	r2, #0
 8002b00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for(int i=size_of_snake-1;i>=0;i--){
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	dae7      	bge.n	8002ae0 <move_snake+0x10>
	}
	draw_grid[snake_pos[0][0]][snake_pos[1][0]] = 0;
 8002b10:	4b55      	ldr	r3, [pc, #340]	; (8002c68 <move_snake+0x198>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b54      	ldr	r3, [pc, #336]	; (8002c68 <move_snake+0x198>)
 8002b16:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002b18:	4854      	ldr	r0, [pc, #336]	; (8002c6c <move_snake+0x19c>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	2200      	movs	r2, #0
 8002b26:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	old_poshx=snake_pos[0][size_of_snake-1];
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	; (8002c64 <move_snake+0x194>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	4a4d      	ldr	r2, [pc, #308]	; (8002c68 <move_snake+0x198>)
 8002b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b36:	4a4e      	ldr	r2, [pc, #312]	; (8002c70 <move_snake+0x1a0>)
 8002b38:	6013      	str	r3, [r2, #0]
	old_poshy=snake_pos[1][size_of_snake-1];
 8002b3a:	4b4a      	ldr	r3, [pc, #296]	; (8002c64 <move_snake+0x194>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	4a49      	ldr	r2, [pc, #292]	; (8002c68 <move_snake+0x198>)
 8002b42:	3318      	adds	r3, #24
 8002b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b48:	4a4a      	ldr	r2, [pc, #296]	; (8002c74 <move_snake+0x1a4>)
 8002b4a:	6013      	str	r3, [r2, #0]
	snake_pos[0][size_of_snake-1]=snake_pos[0][size_of_snake-1]+snake_speed[0];
 8002b4c:	4b45      	ldr	r3, [pc, #276]	; (8002c64 <move_snake+0x194>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	4a45      	ldr	r2, [pc, #276]	; (8002c68 <move_snake+0x198>)
 8002b54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b58:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <move_snake+0x1a8>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <move_snake+0x194>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	440a      	add	r2, r1
 8002b64:	4940      	ldr	r1, [pc, #256]	; (8002c68 <move_snake+0x198>)
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	snake_pos[1][size_of_snake-1]=snake_pos[1][size_of_snake-1]+snake_speed[1];
 8002b6a:	4b3e      	ldr	r3, [pc, #248]	; (8002c64 <move_snake+0x194>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	4a3d      	ldr	r2, [pc, #244]	; (8002c68 <move_snake+0x198>)
 8002b72:	3318      	adds	r3, #24
 8002b74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b78:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <move_snake+0x1a8>)
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <move_snake+0x194>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	440a      	add	r2, r1
 8002b84:	4938      	ldr	r1, [pc, #224]	; (8002c68 <move_snake+0x198>)
 8002b86:	3318      	adds	r3, #24
 8002b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pos_head[0]=snake_pos[0][size_of_snake-1];
 8002b8c:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <move_snake+0x194>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	4a35      	ldr	r2, [pc, #212]	; (8002c68 <move_snake+0x198>)
 8002b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b98:	4a38      	ldr	r2, [pc, #224]	; (8002c7c <move_snake+0x1ac>)
 8002b9a:	6013      	str	r3, [r2, #0]
	pos_head[1]=snake_pos[1][size_of_snake-1];
 8002b9c:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <move_snake+0x194>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <move_snake+0x198>)
 8002ba4:	3318      	adds	r3, #24
 8002ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002baa:	4a34      	ldr	r2, [pc, #208]	; (8002c7c <move_snake+0x1ac>)
 8002bac:	6053      	str	r3, [r2, #4]
	for(int i=size_of_snake-2;i>=0;i--){
 8002bae:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <move_snake+0x194>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3b02      	subs	r3, #2
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	e020      	b.n	8002bfa <move_snake+0x12a>
		int nx = snake_pos[0][i];
 8002bb8:	4a2b      	ldr	r2, [pc, #172]	; (8002c68 <move_snake+0x198>)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc0:	60bb      	str	r3, [r7, #8]
		int ny = snake_pos[1][i];
 8002bc2:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <move_snake+0x198>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bcc:	607b      	str	r3, [r7, #4]
		snake_pos[0][i]=old_poshx;
 8002bce:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <move_snake+0x1a0>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4925      	ldr	r1, [pc, #148]	; (8002c68 <move_snake+0x198>)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		snake_pos[1][i]=old_poshy;
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <move_snake+0x1a4>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4922      	ldr	r1, [pc, #136]	; (8002c68 <move_snake+0x198>)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	3318      	adds	r3, #24
 8002be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		old_poshx=nx;
 8002be8:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <move_snake+0x1a0>)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6013      	str	r3, [r2, #0]
		old_poshy=ny;
 8002bee:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <move_snake+0x1a4>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6013      	str	r3, [r2, #0]
	for(int i=size_of_snake-2;i>=0;i--){
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	dadb      	bge.n	8002bb8 <move_snake+0xe8>
	}
	for(int i=size_of_snake-2;i>=0;i--){
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <move_snake+0x194>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3b02      	subs	r3, #2
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	e014      	b.n	8002c34 <move_snake+0x164>
		draw_grid[snake_pos[0][i]][snake_pos[1][i]]=2;
 8002c0a:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <move_snake+0x198>)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c12:	4915      	ldr	r1, [pc, #84]	; (8002c68 <move_snake+0x198>)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3318      	adds	r3, #24
 8002c18:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002c1c:	4813      	ldr	r0, [pc, #76]	; (8002c6c <move_snake+0x19c>)
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for(int i=size_of_snake-2;i>=0;i--){
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	dae7      	bge.n	8002c0a <move_snake+0x13a>
	}
	check_collision();
 8002c3a:	f000 f8ab 	bl	8002d94 <check_collision>
	check_food();
 8002c3e:	f000 f953 	bl	8002ee8 <check_food>
	draw_grid[pos_head[0]][pos_head[1]]=4;
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <move_snake+0x1ac>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <move_snake+0x1ac>)
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	4808      	ldr	r0, [pc, #32]	; (8002c6c <move_snake+0x19c>)
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	2204      	movs	r2, #4
 8002c58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000010 	.word	0x20000010
 8002c68:	20000888 	.word	0x20000888
 8002c6c:	20000108 	.word	0x20000108
 8002c70:	20000948 	.word	0x20000948
 8002c74:	2000094c 	.word	0x2000094c
 8002c78:	20000014 	.word	0x20000014
 8002c7c:	20000950 	.word	0x20000950

08002c80 <re_init>:

void re_init(void){
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	init_grid();
 8002c84:	f7ff fefa 	bl	8002a7c <init_grid>
	draw_grid[0][0]=2;
 8002c88:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <re_init+0x64>)
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	601a      	str	r2, [r3, #0]
	draw_grid[1][0]=2;
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <re_init+0x64>)
 8002c90:	2202      	movs	r2, #2
 8002c92:	651a      	str	r2, [r3, #80]	; 0x50
	snake_pos[0][0]=0;
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <re_init+0x68>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
	snake_pos[1][0]=0;
 8002c9a:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <re_init+0x68>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	661a      	str	r2, [r3, #96]	; 0x60
	snake_pos[0][1]=1;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <re_init+0x68>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	605a      	str	r2, [r3, #4]
	snake_pos[1][1]=0;
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <re_init+0x68>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	665a      	str	r2, [r3, #100]	; 0x64
	size_of_snake=2;
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <re_init+0x6c>)
 8002cae:	2202      	movs	r2, #2
 8002cb0:	601a      	str	r2, [r3, #0]
	snake_speed[0]=1;
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <re_init+0x70>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
	snake_speed[1]=0;
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <re_init+0x70>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	605a      	str	r2, [r3, #4]
	sw_up=1;
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <re_init+0x74>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
	sw_down=1;
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <re_init+0x78>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
	sw_right=1;
 8002cca:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <re_init+0x7c>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
	sw_left=1;
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <re_init+0x80>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
	score=0;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <re_init+0x84>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
	spawn_food();
 8002cdc:	f000 f814 	bl	8002d08 <spawn_food>
}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000108 	.word	0x20000108
 8002ce8:	20000888 	.word	0x20000888
 8002cec:	20000010 	.word	0x20000010
 8002cf0:	20000014 	.word	0x20000014
 8002cf4:	2000001c 	.word	0x2000001c
 8002cf8:	20000020 	.word	0x20000020
 8002cfc:	20000024 	.word	0x20000024
 8002d00:	20000028 	.word	0x20000028
 8002d04:	20000958 	.word	0x20000958

08002d08 <spawn_food>:

void spawn_food(void){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
	int xf=rand_no(23);
 8002d0e:	2017      	movs	r0, #23
 8002d10:	f000 f82c 	bl	8002d6c <rand_no>
 8002d14:	6078      	str	r0, [r7, #4]
	int yf=rand_no(19);
 8002d16:	2013      	movs	r0, #19
 8002d18:	f000 f828 	bl	8002d6c <rand_no>
 8002d1c:	6038      	str	r0, [r7, #0]
	while(draw_grid[xf][yf]==2){
 8002d1e:	e007      	b.n	8002d30 <spawn_food+0x28>
		xf=rand_no(23);
 8002d20:	2017      	movs	r0, #23
 8002d22:	f000 f823 	bl	8002d6c <rand_no>
 8002d26:	6078      	str	r0, [r7, #4]
		yf=rand_no(19);
 8002d28:	2013      	movs	r0, #19
 8002d2a:	f000 f81f 	bl	8002d6c <rand_no>
 8002d2e:	6038      	str	r0, [r7, #0]
	while(draw_grid[xf][yf]==2){
 8002d30:	490d      	ldr	r1, [pc, #52]	; (8002d68 <spawn_food+0x60>)
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d0eb      	beq.n	8002d20 <spawn_food+0x18>
	}
	draw_grid[xf][yf]=1;
 8002d48:	4907      	ldr	r1, [pc, #28]	; (8002d68 <spawn_food+0x60>)
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000108 	.word	0x20000108

08002d6c <rand_no>:

int rand_no(int m){
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	int num = (rand()%(m+1));
 8002d74:	f007 f860 	bl	8009e38 <rand>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	fb92 f1f3 	sdiv	r1, r2, r3
 8002d82:	fb03 f301 	mul.w	r3, r3, r1
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	60fb      	str	r3, [r7, #12]
	return num;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <check_collision>:

void check_collision(void){
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
	if(pos_head[0]>23 || pos_head[0]<0){
 8002d98:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <check_collision+0x94>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b17      	cmp	r3, #23
 8002d9e:	dc03      	bgt.n	8002da8 <check_collision+0x14>
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <check_collision+0x94>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	da02      	bge.n	8002dae <check_collision+0x1a>
		lose = 1;
 8002da8:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <check_collision+0x98>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
	}
	if(pos_head[1]>19 || pos_head[1]<0){
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <check_collision+0x94>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b13      	cmp	r3, #19
 8002db4:	dc03      	bgt.n	8002dbe <check_collision+0x2a>
 8002db6:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <check_collision+0x94>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	da02      	bge.n	8002dc4 <check_collision+0x30>
		lose = 1;
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <check_collision+0x98>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
	}
	if(draw_grid[pos_head[0]][pos_head[1]]==2){
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <check_collision+0x94>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <check_collision+0x94>)
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	4818      	ldr	r0, [pc, #96]	; (8002e30 <check_collision+0x9c>)
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d102      	bne.n	8002de6 <check_collision+0x52>
		lose = 1;
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <check_collision+0x98>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
	}
	if(draw_grid[pos_head[0]][pos_head[1]]==3){
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <check_collision+0x94>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <check_collision+0x94>)
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	4810      	ldr	r0, [pc, #64]	; (8002e30 <check_collision+0x9c>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d102      	bne.n	8002e08 <check_collision+0x74>
		lose = 1;
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <check_collision+0x98>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
	}
	if(countdown == 0){
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <check_collision+0xa0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d105      	bne.n	8002e1c <check_collision+0x88>
		lose = 1;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <check_collision+0x98>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
		countdown = 180;
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <check_collision+0xa0>)
 8002e18:	22b4      	movs	r2, #180	; 0xb4
 8002e1a:	601a      	str	r2, [r3, #0]
	}
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000950 	.word	0x20000950
 8002e2c:	2000095c 	.word	0x2000095c
 8002e30:	20000108 	.word	0x20000108
 8002e34:	20000004 	.word	0x20000004

08002e38 <wait_check>:

void wait_check(void){
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
	if(sw_down==0 && snake_speed[1]==0){
 8002e3c:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <wait_check+0x9c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10c      	bne.n	8002e5e <wait_check+0x26>
 8002e44:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <wait_check+0xa0>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d108      	bne.n	8002e5e <wait_check+0x26>
		snake_speed[0]=0;
 8002e4c:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <wait_check+0xa0>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
		snake_speed[1]=1;
 8002e52:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <wait_check+0xa0>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	605a      	str	r2, [r3, #4]
		sw_down=1;
 8002e58:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <wait_check+0x9c>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
	}
	if(sw_up==0 && snake_speed[1]==0){
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <wait_check+0xa4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10d      	bne.n	8002e82 <wait_check+0x4a>
 8002e66:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <wait_check+0xa0>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <wait_check+0x4a>
		snake_speed[0]=0;
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <wait_check+0xa0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
		snake_speed[1]=-1;
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <wait_check+0xa0>)
 8002e76:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7a:	605a      	str	r2, [r3, #4]
		sw_up=1;
 8002e7c:	4b17      	ldr	r3, [pc, #92]	; (8002edc <wait_check+0xa4>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
	}
	if(sw_right==0 && snake_speed[0]==0){
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <wait_check+0xa8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <wait_check+0x6c>
 8002e8a:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <wait_check+0xa0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <wait_check+0x6c>
		snake_speed[0]=1;
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <wait_check+0xa0>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
		snake_speed[1]=0;
 8002e98:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <wait_check+0xa0>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	605a      	str	r2, [r3, #4]
		sw_right=1;
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <wait_check+0xa8>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
	}
	if(sw_left==0 && snake_speed[0]==0){
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <wait_check+0xac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10d      	bne.n	8002ec8 <wait_check+0x90>
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <wait_check+0xa0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <wait_check+0x90>
		snake_speed[0]=-1;
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <wait_check+0xa0>)
 8002eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eba:	601a      	str	r2, [r3, #0]
		snake_speed[1]=0;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <wait_check+0xa0>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	605a      	str	r2, [r3, #4]
		sw_left=1;
 8002ec2:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <wait_check+0xac>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
	}
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000020 	.word	0x20000020
 8002ed8:	20000014 	.word	0x20000014
 8002edc:	2000001c 	.word	0x2000001c
 8002ee0:	20000024 	.word	0x20000024
 8002ee4:	20000028 	.word	0x20000028

08002ee8 <check_food>:

void check_food(void){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
    if(draw_grid[pos_head[0]][pos_head[1]]==1){
 8002eee:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <check_food+0xcc>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <check_food+0xcc>)
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	4830      	ldr	r0, [pc, #192]	; (8002fb8 <check_food+0xd0>)
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d150      	bne.n	8002fac <check_food+0xc4>
        score++;
 8002f0a:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <check_food+0xd4>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <check_food+0xd4>)
 8002f14:	701a      	strb	r2, [r3, #0]
        size_of_snake++;
 8002f16:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <check_food+0xd8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a28      	ldr	r2, [pc, #160]	; (8002fc0 <check_food+0xd8>)
 8002f1e:	6013      	str	r3, [r2, #0]

        for (int i = size_of_snake - 1; i > 0; i--) {
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <check_food+0xd8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	e016      	b.n	8002f58 <check_food+0x70>
            snake_pos[0][i] = snake_pos[0][i - 1];
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	4a25      	ldr	r2, [pc, #148]	; (8002fc4 <check_food+0xdc>)
 8002f30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f34:	4923      	ldr	r1, [pc, #140]	; (8002fc4 <check_food+0xdc>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            snake_pos[1][i] = snake_pos[1][i - 1];
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <check_food+0xdc>)
 8002f42:	3318      	adds	r3, #24
 8002f44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f48:	491e      	ldr	r1, [pc, #120]	; (8002fc4 <check_food+0xdc>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3318      	adds	r3, #24
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = size_of_snake - 1; i > 0; i--) {
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	dce5      	bgt.n	8002f2a <check_food+0x42>
        }

        snake_pos[0][0] = pos_head[0];
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <check_food+0xcc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <check_food+0xdc>)
 8002f64:	6013      	str	r3, [r2, #0]
        snake_pos[1][0] = pos_head[1];
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <check_food+0xcc>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4a16      	ldr	r2, [pc, #88]	; (8002fc4 <check_food+0xdc>)
 8002f6c:	6613      	str	r3, [r2, #96]	; 0x60

        for (int i = 0; i < size_of_snake; i++) {
 8002f6e:	2300      	movs	r3, #0
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	e014      	b.n	8002f9e <check_food+0xb6>
            draw_grid[snake_pos[0][i]][snake_pos[1][i]] = 2;
 8002f74:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <check_food+0xdc>)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f7c:	4911      	ldr	r1, [pc, #68]	; (8002fc4 <check_food+0xdc>)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	3318      	adds	r3, #24
 8002f82:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002f86:	480c      	ldr	r0, [pc, #48]	; (8002fb8 <check_food+0xd0>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	2202      	movs	r2, #2
 8002f94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (int i = 0; i < size_of_snake; i++) {
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <check_food+0xd8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	dbe5      	blt.n	8002f74 <check_food+0x8c>
        }

        spawn_food();
 8002fa8:	f7ff feae 	bl	8002d08 <spawn_food>
    }
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000950 	.word	0x20000950
 8002fb8:	20000108 	.word	0x20000108
 8002fbc:	20000958 	.word	0x20000958
 8002fc0:	20000010 	.word	0x20000010
 8002fc4:	20000888 	.word	0x20000888

08002fc8 <timer_init>:

uint16_t flag_timer7 = 0;
uint16_t timer7_counter = 0;
uint16_t timer7_MUL = 0;

void timer_init(){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002fcc:	4803      	ldr	r0, [pc, #12]	; (8002fdc <timer_init+0x14>)
 8002fce:	f004 feb9 	bl	8007d44 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002fd2:	4803      	ldr	r0, [pc, #12]	; (8002fe0 <timer_init+0x18>)
 8002fd4:	f004 fe4e 	bl	8007c74 <HAL_TIM_Base_Start>
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000c04 	.word	0x20000c04
 8002fe0:	20000bbc 	.word	0x20000bbc

08002fe4 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <setTimer2+0x2c>)
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <setTimer2+0x2c>)
 8002ff6:	881a      	ldrh	r2, [r3, #0]
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <setTimer2+0x30>)
 8002ffa:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <setTimer2+0x34>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	801a      	strh	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000964 	.word	0x20000964
 8003014:	20000962 	.word	0x20000962
 8003018:	20000960 	.word	0x20000960

0800301c <setTimer3>:

void setTimer3(uint16_t duration){
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8003026:	4a08      	ldr	r2, [pc, #32]	; (8003048 <setTimer3+0x2c>)
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <setTimer3+0x2c>)
 800302e:	881a      	ldrh	r2, [r3, #0]
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <setTimer3+0x30>)
 8003032:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <setTimer3+0x34>)
 8003036:	2200      	movs	r2, #0
 8003038:	801a      	strh	r2, [r3, #0]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	2000096a 	.word	0x2000096a
 800304c:	20000968 	.word	0x20000968
 8003050:	20000966 	.word	0x20000966

08003054 <setTimer4>:

void setTimer4(uint16_t duration){
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 800305e:	4a08      	ldr	r2, [pc, #32]	; (8003080 <setTimer4+0x2c>)
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <setTimer4+0x2c>)
 8003066:	881a      	ldrh	r2, [r3, #0]
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <setTimer4+0x30>)
 800306a:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <setTimer4+0x34>)
 800306e:	2200      	movs	r2, #0
 8003070:	801a      	strh	r2, [r3, #0]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000970 	.word	0x20000970
 8003084:	2000096e 	.word	0x2000096e
 8003088:	2000096c 	.word	0x2000096c

0800308c <setTimer5>:

void setTimer5(uint16_t duration){
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	80fb      	strh	r3, [r7, #6]
	timer5_MUL = duration/TIMER_CYCLE_2;
 8003096:	4a08      	ldr	r2, [pc, #32]	; (80030b8 <setTimer5+0x2c>)
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	8013      	strh	r3, [r2, #0]
	timer5_counter = timer5_MUL;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <setTimer5+0x2c>)
 800309e:	881a      	ldrh	r2, [r3, #0]
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <setTimer5+0x30>)
 80030a2:	801a      	strh	r2, [r3, #0]
	flag_timer5 = 0;
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <setTimer5+0x34>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	801a      	strh	r2, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000976 	.word	0x20000976
 80030bc:	20000974 	.word	0x20000974
 80030c0:	20000972 	.word	0x20000972

080030c4 <setTimer7>:
	timer6_MUL = duration/TIMER_CYCLE_2;
	timer6_counter = timer6_MUL;
	flag_timer6 = 0;
}

void setTimer7(uint16_t duration){
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	80fb      	strh	r3, [r7, #6]
	timer7_MUL = duration/TIMER_CYCLE_2;
 80030ce:	4a08      	ldr	r2, [pc, #32]	; (80030f0 <setTimer7+0x2c>)
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	8013      	strh	r3, [r2, #0]
	timer7_counter = timer7_MUL;
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <setTimer7+0x2c>)
 80030d6:	881a      	ldrh	r2, [r3, #0]
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <setTimer7+0x30>)
 80030da:	801a      	strh	r2, [r3, #0]
	flag_timer7 = 0;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <setTimer7+0x34>)
 80030de:	2200      	movs	r2, #0
 80030e0:	801a      	strh	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000982 	.word	0x20000982
 80030f4:	20000980 	.word	0x20000980
 80030f8:	2000097e 	.word	0x2000097e

080030fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310c:	d17f      	bne.n	800320e <HAL_TIM_PeriodElapsedCallback+0x112>
		if(timer2_counter > 0){
 800310e:	4b42      	ldr	r3, [pc, #264]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d010      	beq.n	8003138 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8003116:	4b40      	ldr	r3, [pc, #256]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003120:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8003122:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800312a:	4b3c      	ldr	r3, [pc, #240]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x120>)
 800312c:	2201      	movs	r2, #1
 800312e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003130:	4b3b      	ldr	r3, [pc, #236]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003132:	881a      	ldrh	r2, [r3, #0]
 8003134:	4b38      	ldr	r3, [pc, #224]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003136:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8003138:	4b3a      	ldr	r3, [pc, #232]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d010      	beq.n	8003162 <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8003140:	4b38      	ldr	r3, [pc, #224]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	4b36      	ldr	r3, [pc, #216]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800314a:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 800314c:	4b35      	ldr	r3, [pc, #212]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8003154:	4b34      	ldr	r3, [pc, #208]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003156:	2201      	movs	r2, #1
 8003158:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 800315a:	4b34      	ldr	r3, [pc, #208]	; (800322c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003160:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 8003162:	4b33      	ldr	r3, [pc, #204]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003174:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0) {
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 800317e:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003180:	2201      	movs	r2, #1
 8003182:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8003184:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003186:	881a      	ldrh	r2, [r3, #0]
 8003188:	4b29      	ldr	r3, [pc, #164]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800318a:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer5_counter > 0){
 800318c:	4b2b      	ldr	r3, [pc, #172]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d010      	beq.n	80031b6 <HAL_TIM_PeriodElapsedCallback+0xba>
			timer5_counter--;
 8003194:	4b29      	ldr	r3, [pc, #164]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	4b27      	ldr	r3, [pc, #156]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800319e:	801a      	strh	r2, [r3, #0]
			if(timer5_counter == 0) {
 80031a0:	4b26      	ldr	r3, [pc, #152]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d106      	bne.n	80031b6 <HAL_TIM_PeriodElapsedCallback+0xba>
				flag_timer5 = 1;
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	801a      	strh	r2, [r3, #0]
				timer5_counter = timer5_MUL;
 80031ae:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80031b0:	881a      	ldrh	r2, [r3, #0]
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80031b4:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer6_counter > 0){
 80031b6:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d010      	beq.n	80031e0 <HAL_TIM_PeriodElapsedCallback+0xe4>
			timer6_counter--;
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80031c8:	801a      	strh	r2, [r3, #0]
			if(timer6_counter == 0) {
 80031ca:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_TIM_PeriodElapsedCallback+0xe4>
				flag_timer6 = 1;
 80031d2:	4b1e      	ldr	r3, [pc, #120]	; (800324c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	801a      	strh	r2, [r3, #0]
				timer6_counter = timer6_MUL;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80031da:	881a      	ldrh	r2, [r3, #0]
 80031dc:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80031de:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer7_counter > 0){
 80031e0:	4b1c      	ldr	r3, [pc, #112]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d010      	beq.n	800320a <HAL_TIM_PeriodElapsedCallback+0x10e>
			timer7_counter--;
 80031e8:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	4b18      	ldr	r3, [pc, #96]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80031f2:	801a      	strh	r2, [r3, #0]
			if(timer7_counter == 0) {
 80031f4:	4b17      	ldr	r3, [pc, #92]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d106      	bne.n	800320a <HAL_TIM_PeriodElapsedCallback+0x10e>
				flag_timer7 = 1;
 80031fc:	4b16      	ldr	r3, [pc, #88]	; (8003258 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80031fe:	2201      	movs	r2, #1
 8003200:	801a      	strh	r2, [r3, #0]
				timer7_counter = timer7_MUL;
 8003202:	4b16      	ldr	r3, [pc, #88]	; (800325c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003208:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 800320a:	f7ff f925 	bl	8002458 <led7_Scan>
		//touch_Scan();
	}
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000962 	.word	0x20000962
 800321c:	20000960 	.word	0x20000960
 8003220:	20000964 	.word	0x20000964
 8003224:	20000968 	.word	0x20000968
 8003228:	20000966 	.word	0x20000966
 800322c:	2000096a 	.word	0x2000096a
 8003230:	2000096e 	.word	0x2000096e
 8003234:	2000096c 	.word	0x2000096c
 8003238:	20000970 	.word	0x20000970
 800323c:	20000974 	.word	0x20000974
 8003240:	20000972 	.word	0x20000972
 8003244:	20000976 	.word	0x20000976
 8003248:	2000097a 	.word	0x2000097a
 800324c:	20000978 	.word	0x20000978
 8003250:	2000097c 	.word	0x2000097c
 8003254:	20000980 	.word	0x20000980
 8003258:	2000097e 	.word	0x2000097e
 800325c:	20000982 	.word	0x20000982

08003260 <delay_us>:

void delay_us (uint16_t us)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <delay_us+0x30>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8003272:	bf00      	nop
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <delay_us+0x30>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	429a      	cmp	r2, r3
 800327e:	d3f9      	bcc.n	8003274 <delay_us+0x14>
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000bbc 	.word	0x20000bbc

08003294 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003298:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <MX_SPI1_Init+0x64>)
 800329a:	4a18      	ldr	r2, [pc, #96]	; (80032fc <MX_SPI1_Init+0x68>)
 800329c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <MX_SPI1_Init+0x64>)
 80032a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <MX_SPI1_Init+0x64>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <MX_SPI1_Init+0x64>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <MX_SPI1_Init+0x64>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <MX_SPI1_Init+0x64>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <MX_SPI1_Init+0x64>)
 80032c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <MX_SPI1_Init+0x64>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032cc:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <MX_SPI1_Init+0x64>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <MX_SPI1_Init+0x64>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <MX_SPI1_Init+0x64>)
 80032da:	2200      	movs	r2, #0
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <MX_SPI1_Init+0x64>)
 80032e0:	220a      	movs	r2, #10
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032e4:	4804      	ldr	r0, [pc, #16]	; (80032f8 <MX_SPI1_Init+0x64>)
 80032e6:	f004 f9a1 	bl	800762c <HAL_SPI_Init>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80032f0:	f7ff fa0a 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000b1c 	.word	0x20000b1c
 80032fc:	40013000 	.word	0x40013000

08003300 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a19      	ldr	r2, [pc, #100]	; (8003384 <HAL_SPI_MspInit+0x84>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d12b      	bne.n	800337a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	4b18      	ldr	r3, [pc, #96]	; (8003388 <HAL_SPI_MspInit+0x88>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4a17      	ldr	r2, [pc, #92]	; (8003388 <HAL_SPI_MspInit+0x88>)
 800332c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003330:	6453      	str	r3, [r2, #68]	; 0x44
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_SPI_MspInit+0x88>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_SPI_MspInit+0x88>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a10      	ldr	r2, [pc, #64]	; (8003388 <HAL_SPI_MspInit+0x88>)
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <HAL_SPI_MspInit+0x88>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800335a:	2338      	movs	r3, #56	; 0x38
 800335c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335e:	2302      	movs	r3, #2
 8003360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003366:	2303      	movs	r3, #3
 8003368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800336a:	2305      	movs	r3, #5
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336e:	f107 0314 	add.w	r3, r7, #20
 8003372:	4619      	mov	r1, r3
 8003374:	4805      	ldr	r0, [pc, #20]	; (800338c <HAL_SPI_MspInit+0x8c>)
 8003376:	f002 fb57 	bl	8005a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800337a:	bf00      	nop
 800337c:	3728      	adds	r7, #40	; 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40013000 	.word	0x40013000
 8003388:	40023800 	.word	0x40023800
 800338c:	40020400 	.word	0x40020400

08003390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <HAL_MspInit+0x4c>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	4a0f      	ldr	r2, [pc, #60]	; (80033dc <HAL_MspInit+0x4c>)
 80033a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033a4:	6453      	str	r3, [r2, #68]	; 0x44
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <HAL_MspInit+0x4c>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	603b      	str	r3, [r7, #0]
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_MspInit+0x4c>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	4a08      	ldr	r2, [pc, #32]	; (80033dc <HAL_MspInit+0x4c>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c0:	6413      	str	r3, [r2, #64]	; 0x40
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_MspInit+0x4c>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800

080033e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033e4:	e7fe      	b.n	80033e4 <NMI_Handler+0x4>

080033e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ea:	e7fe      	b.n	80033ea <HardFault_Handler+0x4>

080033ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f0:	e7fe      	b.n	80033f0 <MemManage_Handler+0x4>

080033f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033f6:	e7fe      	b.n	80033f6 <BusFault_Handler+0x4>

080033f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033fc:	e7fe      	b.n	80033fc <UsageFault_Handler+0x4>

080033fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033fe:	b480      	push	{r7}
 8003400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800341a:	b480      	push	{r7}
 800341c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800342c:	f001 fbc8 	bl	8004bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}

08003434 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003438:	4802      	ldr	r0, [pc, #8]	; (8003444 <TIM2_IRQHandler+0x10>)
 800343a:	f004 fd4c 	bl	8007ed6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000c04 	.word	0x20000c04

08003448 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800344c:	4802      	ldr	r0, [pc, #8]	; (8003458 <USART1_IRQHandler+0x10>)
 800344e:	f005 fc87 	bl	8008d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000db0 	.word	0x20000db0

0800345c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003460:	4802      	ldr	r0, [pc, #8]	; (800346c <USART2_IRQHandler+0x10>)
 8003462:	f005 fc7d 	bl	8008d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000df4 	.word	0x20000df4

08003470 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <DMA2_Stream0_IRQHandler+0x10>)
 8003476:	f002 f89b 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200009dc 	.word	0x200009dc

08003484 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
	return 1;
 8003488:	2301      	movs	r3, #1
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <_kill>:

int _kill(int pid, int sig)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800349e:	f006 fbe7 	bl	8009c70 <__errno>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2216      	movs	r2, #22
 80034a6:	601a      	str	r2, [r3, #0]
	return -1;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <_exit>:

void _exit (int status)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034bc:	f04f 31ff 	mov.w	r1, #4294967295
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff ffe7 	bl	8003494 <_kill>
	while (1) {}		/* Make sure we hang here */
 80034c6:	e7fe      	b.n	80034c6 <_exit+0x12>

080034c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e00a      	b.n	80034f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034da:	f3af 8000 	nop.w
 80034de:	4601      	mov	r1, r0
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	60ba      	str	r2, [r7, #8]
 80034e6:	b2ca      	uxtb	r2, r1
 80034e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3301      	adds	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dbf0      	blt.n	80034da <_read+0x12>
	}

return len;
 80034f8:	687b      	ldr	r3, [r7, #4]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e009      	b.n	8003528 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	60ba      	str	r2, [r7, #8]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	3301      	adds	r3, #1
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	429a      	cmp	r2, r3
 800352e:	dbf1      	blt.n	8003514 <_write+0x12>
	}
	return len;
 8003530:	687b      	ldr	r3, [r7, #4]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <_close>:

int _close(int file)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
	return -1;
 8003542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003562:	605a      	str	r2, [r3, #4]
	return 0;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <_isatty>:

int _isatty(int file)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
	return 1;
 800357a:	2301      	movs	r3, #1
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
	return 0;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <_sbrk+0x5c>)
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <_sbrk+0x60>)
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <_sbrk+0x64>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <_sbrk+0x64>)
 80035c2:	4a12      	ldr	r2, [pc, #72]	; (800360c <_sbrk+0x68>)
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <_sbrk+0x64>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d207      	bcs.n	80035e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035d4:	f006 fb4c 	bl	8009c70 <__errno>
 80035d8:	4603      	mov	r3, r0
 80035da:	220c      	movs	r2, #12
 80035dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035de:	f04f 33ff 	mov.w	r3, #4294967295
 80035e2:	e009      	b.n	80035f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <_sbrk+0x64>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ea:	4b07      	ldr	r3, [pc, #28]	; (8003608 <_sbrk+0x64>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <_sbrk+0x64>)
 80035f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035f6:	68fb      	ldr	r3, [r7, #12]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20020000 	.word	0x20020000
 8003604:	00000400 	.word	0x00000400
 8003608:	20000984 	.word	0x20000984
 800360c:	20000e50 	.word	0x20000e50

08003610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <SystemInit+0x20>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	4a05      	ldr	r2, [pc, #20]	; (8003630 <SystemInit+0x20>)
 800361c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800363a:	f107 0308 	add.w	r3, r7, #8
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	609a      	str	r2, [r3, #8]
 8003646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003648:	463b      	mov	r3, r7
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003650:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <MX_TIM1_Init+0x98>)
 8003652:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <MX_TIM1_Init+0x9c>)
 8003654:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <MX_TIM1_Init+0x98>)
 8003658:	2253      	movs	r2, #83	; 0x53
 800365a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <MX_TIM1_Init+0x98>)
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <MX_TIM1_Init+0x98>)
 8003664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003668:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800366a:	4b18      	ldr	r3, [pc, #96]	; (80036cc <MX_TIM1_Init+0x98>)
 800366c:	2200      	movs	r2, #0
 800366e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <MX_TIM1_Init+0x98>)
 8003672:	2200      	movs	r2, #0
 8003674:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003676:	4b15      	ldr	r3, [pc, #84]	; (80036cc <MX_TIM1_Init+0x98>)
 8003678:	2200      	movs	r2, #0
 800367a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800367c:	4813      	ldr	r0, [pc, #76]	; (80036cc <MX_TIM1_Init+0x98>)
 800367e:	f004 faa9 	bl	8007bd4 <HAL_TIM_Base_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003688:	f7ff f83e 	bl	8002708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800368c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003690:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003692:	f107 0308 	add.w	r3, r7, #8
 8003696:	4619      	mov	r1, r3
 8003698:	480c      	ldr	r0, [pc, #48]	; (80036cc <MX_TIM1_Init+0x98>)
 800369a:	f004 fde7 	bl	800826c <HAL_TIM_ConfigClockSource>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80036a4:	f7ff f830 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036a8:	2300      	movs	r3, #0
 80036aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036b0:	463b      	mov	r3, r7
 80036b2:	4619      	mov	r1, r3
 80036b4:	4805      	ldr	r0, [pc, #20]	; (80036cc <MX_TIM1_Init+0x98>)
 80036b6:	f005 f9b3 	bl	8008a20 <HAL_TIMEx_MasterConfigSynchronization>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80036c0:	f7ff f822 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80036c4:	bf00      	nop
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20000bbc 	.word	0x20000bbc
 80036d0:	40010000 	.word	0x40010000

080036d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036da:	f107 0308 	add.w	r3, r7, #8
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	605a      	str	r2, [r3, #4]
 80036e4:	609a      	str	r2, [r3, #8]
 80036e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036e8:	463b      	mov	r3, r7
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <MX_TIM2_Init+0x94>)
 80036f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <MX_TIM2_Init+0x94>)
 80036fa:	f240 3247 	movw	r2, #839	; 0x347
 80036fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003700:	4b19      	ldr	r3, [pc, #100]	; (8003768 <MX_TIM2_Init+0x94>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <MX_TIM2_Init+0x94>)
 8003708:	2263      	movs	r2, #99	; 0x63
 800370a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800370c:	4b16      	ldr	r3, [pc, #88]	; (8003768 <MX_TIM2_Init+0x94>)
 800370e:	2200      	movs	r2, #0
 8003710:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <MX_TIM2_Init+0x94>)
 8003714:	2200      	movs	r2, #0
 8003716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003718:	4813      	ldr	r0, [pc, #76]	; (8003768 <MX_TIM2_Init+0x94>)
 800371a:	f004 fa5b 	bl	8007bd4 <HAL_TIM_Base_Init>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003724:	f7fe fff0 	bl	8002708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800372c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	4619      	mov	r1, r3
 8003734:	480c      	ldr	r0, [pc, #48]	; (8003768 <MX_TIM2_Init+0x94>)
 8003736:	f004 fd99 	bl	800826c <HAL_TIM_ConfigClockSource>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003740:	f7fe ffe2 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003744:	2300      	movs	r3, #0
 8003746:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003748:	2300      	movs	r3, #0
 800374a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800374c:	463b      	mov	r3, r7
 800374e:	4619      	mov	r1, r3
 8003750:	4805      	ldr	r0, [pc, #20]	; (8003768 <MX_TIM2_Init+0x94>)
 8003752:	f005 f965 	bl	8008a20 <HAL_TIMEx_MasterConfigSynchronization>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800375c:	f7fe ffd4 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003760:	bf00      	nop
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000c04 	.word	0x20000c04

0800376c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	611a      	str	r2, [r3, #16]
 8003780:	615a      	str	r2, [r3, #20]
 8003782:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003784:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <MX_TIM13_Init+0x94>)
 8003786:	4a1f      	ldr	r2, [pc, #124]	; (8003804 <MX_TIM13_Init+0x98>)
 8003788:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <MX_TIM13_Init+0x94>)
 800378c:	f240 3247 	movw	r2, #839	; 0x347
 8003790:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003792:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <MX_TIM13_Init+0x94>)
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8003798:	4b19      	ldr	r3, [pc, #100]	; (8003800 <MX_TIM13_Init+0x94>)
 800379a:	2263      	movs	r2, #99	; 0x63
 800379c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800379e:	4b18      	ldr	r3, [pc, #96]	; (8003800 <MX_TIM13_Init+0x94>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a4:	4b16      	ldr	r3, [pc, #88]	; (8003800 <MX_TIM13_Init+0x94>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80037aa:	4815      	ldr	r0, [pc, #84]	; (8003800 <MX_TIM13_Init+0x94>)
 80037ac:	f004 fa12 	bl	8007bd4 <HAL_TIM_Base_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80037b6:	f7fe ffa7 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80037ba:	4811      	ldr	r0, [pc, #68]	; (8003800 <MX_TIM13_Init+0x94>)
 80037bc:	f004 fb32 	bl	8007e24 <HAL_TIM_PWM_Init>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80037c6:	f7fe ff9f 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037ca:	2360      	movs	r3, #96	; 0x60
 80037cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037da:	1d3b      	adds	r3, r7, #4
 80037dc:	2200      	movs	r2, #0
 80037de:	4619      	mov	r1, r3
 80037e0:	4807      	ldr	r0, [pc, #28]	; (8003800 <MX_TIM13_Init+0x94>)
 80037e2:	f004 fc81 	bl	80080e8 <HAL_TIM_PWM_ConfigChannel>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80037ec:	f7fe ff8c 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80037f0:	4803      	ldr	r0, [pc, #12]	; (8003800 <MX_TIM13_Init+0x94>)
 80037f2:	f000 f85b 	bl	80038ac <HAL_TIM_MspPostInit>

}
 80037f6:	bf00      	nop
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000b74 	.word	0x20000b74
 8003804:	40001c00 	.word	0x40001c00

08003808 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <HAL_TIM_Base_MspInit+0x98>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	4b21      	ldr	r3, [pc, #132]	; (80038a4 <HAL_TIM_Base_MspInit+0x9c>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	4a20      	ldr	r2, [pc, #128]	; (80038a4 <HAL_TIM_Base_MspInit+0x9c>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6453      	str	r3, [r2, #68]	; 0x44
 800382a:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <HAL_TIM_Base_MspInit+0x9c>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003836:	e02e      	b.n	8003896 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003840:	d116      	bne.n	8003870 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <HAL_TIM_Base_MspInit+0x9c>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <HAL_TIM_Base_MspInit+0x9c>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6413      	str	r3, [r2, #64]	; 0x40
 8003852:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <HAL_TIM_Base_MspInit+0x9c>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800385e:	2200      	movs	r2, #0
 8003860:	2100      	movs	r1, #0
 8003862:	201c      	movs	r0, #28
 8003864:	f001 fd2d 	bl	80052c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003868:	201c      	movs	r0, #28
 800386a:	f001 fd46 	bl	80052fa <HAL_NVIC_EnableIRQ>
}
 800386e:	e012      	b.n	8003896 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0c      	ldr	r2, [pc, #48]	; (80038a8 <HAL_TIM_Base_MspInit+0xa0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10d      	bne.n	8003896 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_TIM_Base_MspInit+0x9c>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a08      	ldr	r2, [pc, #32]	; (80038a4 <HAL_TIM_Base_MspInit+0x9c>)
 8003884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003888:	6413      	str	r3, [r2, #64]	; 0x40
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_TIM_Base_MspInit+0x9c>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40001c00 	.word	0x40001c00

080038ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a12      	ldr	r2, [pc, #72]	; (8003914 <HAL_TIM_MspPostInit+0x68>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d11e      	bne.n	800390c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	4b11      	ldr	r3, [pc, #68]	; (8003918 <HAL_TIM_MspPostInit+0x6c>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	4a10      	ldr	r2, [pc, #64]	; (8003918 <HAL_TIM_MspPostInit+0x6c>)
 80038d8:	f043 0320 	orr.w	r3, r3, #32
 80038dc:	6313      	str	r3, [r2, #48]	; 0x30
 80038de:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <HAL_TIM_MspPostInit+0x6c>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80038ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f0:	2302      	movs	r3, #2
 80038f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80038fc:	2309      	movs	r3, #9
 80038fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	4619      	mov	r1, r3
 8003906:	4805      	ldr	r0, [pc, #20]	; (800391c <HAL_TIM_MspPostInit+0x70>)
 8003908:	f002 f88e 	bl	8005a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800390c:	bf00      	nop
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40001c00 	.word	0x40001c00
 8003918:	40023800 	.word	0x40023800
 800391c:	40021400 	.word	0x40021400

08003920 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800392a:	2300      	movs	r3, #0
 800392c:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]
 8003932:	e025      	b.n	8003980 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8003934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003938:	2b00      	cmp	r3, #0
 800393a:	da06      	bge.n	800394a <TP_Write_Byte+0x2a>
 800393c:	2201      	movs	r2, #1
 800393e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003942:	4813      	ldr	r0, [pc, #76]	; (8003990 <TP_Write_Byte+0x70>)
 8003944:	f002 fa24 	bl	8005d90 <HAL_GPIO_WritePin>
 8003948:	e005      	b.n	8003956 <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800394a:	2200      	movs	r2, #0
 800394c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003950:	480f      	ldr	r0, [pc, #60]	; (8003990 <TP_Write_Byte+0x70>)
 8003952:	f002 fa1d 	bl	8005d90 <HAL_GPIO_WritePin>
		num<<=1;
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800395c:	2200      	movs	r2, #0
 800395e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003962:	480c      	ldr	r0, [pc, #48]	; (8003994 <TP_Write_Byte+0x74>)
 8003964:	f002 fa14 	bl	8005d90 <HAL_GPIO_WritePin>
		delay_us(1);
 8003968:	2001      	movs	r0, #1
 800396a:	f7ff fc79 	bl	8003260 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800396e:	2201      	movs	r2, #1
 8003970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003974:	4807      	ldr	r0, [pc, #28]	; (8003994 <TP_Write_Byte+0x74>)
 8003976:	f002 fa0b 	bl	8005d90 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	3301      	adds	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b07      	cmp	r3, #7
 8003984:	d9d6      	bls.n	8003934 <TP_Write_Byte+0x14>
	}
}
 8003986:	bf00      	nop
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40020800 	.word	0x40020800
 8003994:	40021800 	.word	0x40021800

08003998 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80039aa:	2200      	movs	r2, #0
 80039ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039b0:	482f      	ldr	r0, [pc, #188]	; (8003a70 <TP_Read_AD+0xd8>)
 80039b2:	f002 f9ed 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80039b6:	2200      	movs	r2, #0
 80039b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039bc:	482d      	ldr	r0, [pc, #180]	; (8003a74 <TP_Read_AD+0xdc>)
 80039be:	f002 f9e7 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	2180      	movs	r1, #128	; 0x80
 80039c6:	482a      	ldr	r0, [pc, #168]	; (8003a70 <TP_Read_AD+0xd8>)
 80039c8:	f002 f9e2 	bl	8005d90 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ffa6 	bl	8003920 <TP_Write_Byte>
	delay_us(6);
 80039d4:	2006      	movs	r0, #6
 80039d6:	f7ff fc43 	bl	8003260 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80039da:	2200      	movs	r2, #0
 80039dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039e0:	4823      	ldr	r0, [pc, #140]	; (8003a70 <TP_Read_AD+0xd8>)
 80039e2:	f002 f9d5 	bl	8005d90 <HAL_GPIO_WritePin>
	delay_us(1);
 80039e6:	2001      	movs	r0, #1
 80039e8:	f7ff fc3a 	bl	8003260 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80039ec:	2201      	movs	r2, #1
 80039ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039f2:	481f      	ldr	r0, [pc, #124]	; (8003a70 <TP_Read_AD+0xd8>)
 80039f4:	f002 f9cc 	bl	8005d90 <HAL_GPIO_WritePin>
	delay_us(1);
 80039f8:	2001      	movs	r0, #1
 80039fa:	f7ff fc31 	bl	8003260 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a04:	481a      	ldr	r0, [pc, #104]	; (8003a70 <TP_Read_AD+0xd8>)
 8003a06:	f002 f9c3 	bl	8005d90 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	e01f      	b.n	8003a50 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8003a10:	89bb      	ldrh	r3, [r7, #12]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a1c:	4814      	ldr	r0, [pc, #80]	; (8003a70 <TP_Read_AD+0xd8>)
 8003a1e:	f002 f9b7 	bl	8005d90 <HAL_GPIO_WritePin>
		delay_us(1);
 8003a22:	2001      	movs	r0, #1
 8003a24:	f7ff fc1c 	bl	8003260 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a2e:	4810      	ldr	r0, [pc, #64]	; (8003a70 <TP_Read_AD+0xd8>)
 8003a30:	f002 f9ae 	bl	8005d90 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8003a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a38:	480e      	ldr	r0, [pc, #56]	; (8003a74 <TP_Read_AD+0xdc>)
 8003a3a:	f002 f991 	bl	8005d60 <HAL_GPIO_ReadPin>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <TP_Read_AD+0xb2>
 8003a44:	89bb      	ldrh	r3, [r7, #12]
 8003a46:	3301      	adds	r3, #1
 8003a48:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b0f      	cmp	r3, #15
 8003a54:	d9dc      	bls.n	8003a10 <TP_Read_AD+0x78>
	}
	Num>>=4;
 8003a56:	89bb      	ldrh	r3, [r7, #12]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	2180      	movs	r1, #128	; 0x80
 8003a60:	4803      	ldr	r0, [pc, #12]	; (8003a70 <TP_Read_AD+0xd8>)
 8003a62:	f002 f995 	bl	8005d90 <HAL_GPIO_WritePin>
	return(Num);
 8003a66:	89bb      	ldrh	r3, [r7, #12]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021800 	.word	0x40021800
 8003a74:	40020800 	.word	0x40020800

08003a78 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b089      	sub	sp, #36	; 0x24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8003a86:	2300      	movs	r3, #0
 8003a88:	83fb      	strh	r3, [r7, #30]
 8003a8a:	e00f      	b.n	8003aac <TP_Read_XOY+0x34>
 8003a8c:	8bfc      	ldrh	r4, [r7, #30]
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff81 	bl	8003998 <TP_Read_AD>
 8003a96:	4603      	mov	r3, r0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	0063      	lsls	r3, r4, #1
 8003a9c:	f107 0120 	add.w	r1, r7, #32
 8003aa0:	440b      	add	r3, r1
 8003aa2:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003aa6:	8bfb      	ldrh	r3, [r7, #30]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	83fb      	strh	r3, [r7, #30]
 8003aac:	8bfb      	ldrh	r3, [r7, #30]
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d9ec      	bls.n	8003a8c <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	83fb      	strh	r3, [r7, #30]
 8003ab6:	e03b      	b.n	8003b30 <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8003ab8:	8bfb      	ldrh	r3, [r7, #30]
 8003aba:	3301      	adds	r3, #1
 8003abc:	83bb      	strh	r3, [r7, #28]
 8003abe:	e031      	b.n	8003b24 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8003ac0:	8bfb      	ldrh	r3, [r7, #30]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	f107 0220 	add.w	r2, r7, #32
 8003ac8:	4413      	add	r3, r2
 8003aca:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003ace:	8bbb      	ldrh	r3, [r7, #28]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	f107 0120 	add.w	r1, r7, #32
 8003ad6:	440b      	add	r3, r1
 8003ad8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d91e      	bls.n	8003b1e <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8003ae0:	8bfb      	ldrh	r3, [r7, #30]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	f107 0220 	add.w	r2, r7, #32
 8003ae8:	4413      	add	r3, r2
 8003aea:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003aee:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8003af0:	8bbb      	ldrh	r3, [r7, #28]
 8003af2:	8bfa      	ldrh	r2, [r7, #30]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	f107 0120 	add.w	r1, r7, #32
 8003afa:	440b      	add	r3, r1
 8003afc:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8003b00:	0053      	lsls	r3, r2, #1
 8003b02:	f107 0220 	add.w	r2, r7, #32
 8003b06:	4413      	add	r3, r2
 8003b08:	460a      	mov	r2, r1
 8003b0a:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8003b0e:	8bbb      	ldrh	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	f107 0220 	add.w	r2, r7, #32
 8003b16:	4413      	add	r3, r2
 8003b18:	8b3a      	ldrh	r2, [r7, #24]
 8003b1a:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8003b1e:	8bbb      	ldrh	r3, [r7, #28]
 8003b20:	3301      	adds	r3, #1
 8003b22:	83bb      	strh	r3, [r7, #28]
 8003b24:	8bbb      	ldrh	r3, [r7, #28]
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d9ca      	bls.n	8003ac0 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 8003b2a:	8bfb      	ldrh	r3, [r7, #30]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	83fb      	strh	r3, [r7, #30]
 8003b30:	8bfb      	ldrh	r3, [r7, #30]
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d9c0      	bls.n	8003ab8 <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	83fb      	strh	r3, [r7, #30]
 8003b3e:	e00c      	b.n	8003b5a <TP_Read_XOY+0xe2>
 8003b40:	8bfb      	ldrh	r3, [r7, #30]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	f107 0220 	add.w	r2, r7, #32
 8003b48:	4413      	add	r3, r2
 8003b4a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003b4e:	8b7b      	ldrh	r3, [r7, #26]
 8003b50:	4413      	add	r3, r2
 8003b52:	837b      	strh	r3, [r7, #26]
 8003b54:	8bfb      	ldrh	r3, [r7, #30]
 8003b56:	3301      	adds	r3, #1
 8003b58:	83fb      	strh	r3, [r7, #30]
 8003b5a:	8bfb      	ldrh	r3, [r7, #30]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d9ef      	bls.n	8003b40 <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8003b60:	8b7b      	ldrh	r3, [r7, #26]
 8003b62:	4a05      	ldr	r2, [pc, #20]	; (8003b78 <TP_Read_XOY+0x100>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	833b      	strh	r3, [r7, #24]
	return temp;
 8003b6c:	8b3b      	ldrh	r3, [r7, #24]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3724      	adds	r7, #36	; 0x24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd90      	pop	{r4, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	aaaaaaab 	.word	0xaaaaaaab

08003b7c <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8003b86:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <TP_Read_XY+0x3c>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ff74 	bl	8003a78 <TP_Read_XOY>
 8003b90:	4603      	mov	r3, r0
 8003b92:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8003b94:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <TP_Read_XY+0x40>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff6d 	bl	8003a78 <TP_Read_XOY>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	89fa      	ldrh	r2, [r7, #14]
 8003ba6:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	89ba      	ldrh	r2, [r7, #12]
 8003bac:	801a      	strh	r2, [r3, #0]
	return 1;
 8003bae:	2301      	movs	r3, #1
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000064 	.word	0x20000064
 8003bbc:	20000065 	.word	0x20000065

08003bc0 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8003bca:	f107 0212 	add.w	r2, r7, #18
 8003bce:	f107 0314 	add.w	r3, r7, #20
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ffd1 	bl	8003b7c <TP_Read_XY>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <TP_Read_XY2+0x28>
 8003be4:	2300      	movs	r3, #0
 8003be6:	e049      	b.n	8003c7c <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8003be8:	f107 020e 	add.w	r2, r7, #14
 8003bec:	f107 0310 	add.w	r3, r7, #16
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff ffc2 	bl	8003b7c <TP_Read_XY>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <TP_Read_XY2+0x46>
 8003c02:	2300      	movs	r3, #0
 8003c04:	e03a      	b.n	8003c7c <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8003c06:	8a3a      	ldrh	r2, [r7, #16]
 8003c08:	8abb      	ldrh	r3, [r7, #20]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d804      	bhi.n	8003c18 <TP_Read_XY2+0x58>
 8003c0e:	8a3b      	ldrh	r3, [r7, #16]
 8003c10:	3363      	adds	r3, #99	; 0x63
 8003c12:	8aba      	ldrh	r2, [r7, #20]
 8003c14:	4293      	cmp	r3, r2
 8003c16:	da08      	bge.n	8003c2a <TP_Read_XY2+0x6a>
 8003c18:	8aba      	ldrh	r2, [r7, #20]
 8003c1a:	8a3b      	ldrh	r3, [r7, #16]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d82c      	bhi.n	8003c7a <TP_Read_XY2+0xba>
 8003c20:	8abb      	ldrh	r3, [r7, #20]
 8003c22:	3363      	adds	r3, #99	; 0x63
 8003c24:	8a3a      	ldrh	r2, [r7, #16]
 8003c26:	4293      	cmp	r3, r2
 8003c28:	db27      	blt.n	8003c7a <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8003c2a:	89fa      	ldrh	r2, [r7, #14]
 8003c2c:	8a7b      	ldrh	r3, [r7, #18]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d804      	bhi.n	8003c3c <TP_Read_XY2+0x7c>
 8003c32:	89fb      	ldrh	r3, [r7, #14]
 8003c34:	3363      	adds	r3, #99	; 0x63
 8003c36:	8a7a      	ldrh	r2, [r7, #18]
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	da08      	bge.n	8003c4e <TP_Read_XY2+0x8e>
 8003c3c:	8a7a      	ldrh	r2, [r7, #18]
 8003c3e:	89fb      	ldrh	r3, [r7, #14]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d81a      	bhi.n	8003c7a <TP_Read_XY2+0xba>
 8003c44:	8a7b      	ldrh	r3, [r7, #18]
 8003c46:	3363      	adds	r3, #99	; 0x63
 8003c48:	89fa      	ldrh	r2, [r7, #14]
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	db15      	blt.n	8003c7a <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8003c4e:	8abb      	ldrh	r3, [r7, #20]
 8003c50:	461a      	mov	r2, r3
 8003c52:	8a3b      	ldrh	r3, [r7, #16]
 8003c54:	4413      	add	r3, r2
 8003c56:	0fda      	lsrs	r2, r3, #31
 8003c58:	4413      	add	r3, r2
 8003c5a:	105b      	asrs	r3, r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8003c62:	8a7b      	ldrh	r3, [r7, #18]
 8003c64:	461a      	mov	r2, r3
 8003c66:	89fb      	ldrh	r3, [r7, #14]
 8003c68:	4413      	add	r3, r2
 8003c6a:	0fda      	lsrs	r2, r3, #31
 8003c6c:	4413      	add	r3, r2
 8003c6e:	105b      	asrs	r3, r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	801a      	strh	r2, [r3, #0]
		return 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <TP_Read_XY2+0xbc>
	}else return 0;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	80fb      	strh	r3, [r7, #6]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	80bb      	strh	r3, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	3b0c      	subs	r3, #12
 8003c9a:	b298      	uxth	r0, r3
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	330d      	adds	r3, #13
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	88bc      	ldrh	r4, [r7, #4]
 8003ca4:	88b9      	ldrh	r1, [r7, #4]
 8003ca6:	887b      	ldrh	r3, [r7, #2]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	4623      	mov	r3, r4
 8003cac:	f7fd ff05 	bl	8001aba <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8003cb0:	88bb      	ldrh	r3, [r7, #4]
 8003cb2:	3b0c      	subs	r3, #12
 8003cb4:	b299      	uxth	r1, r3
 8003cb6:	88bb      	ldrh	r3, [r7, #4]
 8003cb8:	330d      	adds	r3, #13
 8003cba:	b29c      	uxth	r4, r3
 8003cbc:	88fa      	ldrh	r2, [r7, #6]
 8003cbe:	88f8      	ldrh	r0, [r7, #6]
 8003cc0:	887b      	ldrh	r3, [r7, #2]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4623      	mov	r3, r4
 8003cc6:	f7fd fef8 	bl	8001aba <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b298      	uxth	r0, r3
 8003cd0:	88bb      	ldrh	r3, [r7, #4]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	887a      	ldrh	r2, [r7, #2]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f7fd fed7 	bl	8001a8c <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b298      	uxth	r0, r3
 8003ce4:	88bb      	ldrh	r3, [r7, #4]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	887a      	ldrh	r2, [r7, #2]
 8003cec:	4619      	mov	r1, r3
 8003cee:	f7fd fecd 	bl	8001a8c <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	b298      	uxth	r0, r3
 8003cf8:	88bb      	ldrh	r3, [r7, #4]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	887a      	ldrh	r2, [r7, #2]
 8003d00:	4619      	mov	r1, r3
 8003d02:	f7fd fec3 	bl	8001a8c <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b298      	uxth	r0, r3
 8003d0c:	88bb      	ldrh	r3, [r7, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	4619      	mov	r1, r3
 8003d16:	f7fd feb9 	bl	8001a8c <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8003d1a:	88f8      	ldrh	r0, [r7, #6]
 8003d1c:	88b9      	ldrh	r1, [r7, #4]
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	2300      	movs	r3, #0
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2306      	movs	r3, #6
 8003d26:	f7fe fac6 	bl	80022b6 <lcd_DrawCircle>
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd90      	pop	{r4, r7, pc}
	...

08003d34 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8003d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d42:	4843      	ldr	r0, [pc, #268]	; (8003e50 <TP_Scan+0x11c>)
 8003d44:	f002 f80c 	bl	8005d60 <HAL_GPIO_ReadPin>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d157      	bne.n	8003dfe <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <TP_Scan+0x2a>
 8003d54:	493f      	ldr	r1, [pc, #252]	; (8003e54 <TP_Scan+0x120>)
 8003d56:	4840      	ldr	r0, [pc, #256]	; (8003e58 <TP_Scan+0x124>)
 8003d58:	f7ff ff32 	bl	8003bc0 <TP_Read_XY2>
 8003d5c:	e03c      	b.n	8003dd8 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8003d5e:	493d      	ldr	r1, [pc, #244]	; (8003e54 <TP_Scan+0x120>)
 8003d60:	483d      	ldr	r0, [pc, #244]	; (8003e58 <TP_Scan+0x124>)
 8003d62:	f7ff ff2d 	bl	8003bc0 <TP_Read_XY2>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d035      	beq.n	8003dd8 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8003d6c:	4b3b      	ldr	r3, [pc, #236]	; (8003e5c <TP_Scan+0x128>)
 8003d6e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003d72:	4b3a      	ldr	r3, [pc, #232]	; (8003e5c <TP_Scan+0x128>)
 8003d74:	899b      	ldrh	r3, [r3, #12]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d82:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <TP_Scan+0x128>)
 8003d84:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003d88:	ee07 3a90 	vmov	s15, r3
 8003d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d98:	ee17 3a90 	vmov	r3, s15
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	4b2f      	ldr	r3, [pc, #188]	; (8003e5c <TP_Scan+0x128>)
 8003da0:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8003da2:	4b2e      	ldr	r3, [pc, #184]	; (8003e5c <TP_Scan+0x128>)
 8003da4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003da8:	4b2c      	ldr	r3, [pc, #176]	; (8003e5c <TP_Scan+0x128>)
 8003daa:	8adb      	ldrh	r3, [r3, #22]
 8003dac:	ee07 3a90 	vmov	s15, r3
 8003db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003db8:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <TP_Scan+0x128>)
 8003dba:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dce:	ee17 3a90 	vmov	r3, s15
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	4b21      	ldr	r3, [pc, #132]	; (8003e5c <TP_Scan+0x128>)
 8003dd6:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8003dd8:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <TP_Scan+0x128>)
 8003dda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dde:	b25b      	sxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	db2a      	blt.n	8003e3a <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8003de4:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <TP_Scan+0x128>)
 8003de6:	22c0      	movs	r2, #192	; 0xc0
 8003de8:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8003dec:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <TP_Scan+0x128>)
 8003dee:	899a      	ldrh	r2, [r3, #12]
 8003df0:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <TP_Scan+0x128>)
 8003df2:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <TP_Scan+0x128>)
 8003df6:	8ada      	ldrh	r2, [r3, #22]
 8003df8:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <TP_Scan+0x128>)
 8003dfa:	83da      	strh	r2, [r3, #30]
 8003dfc:	e01d      	b.n	8003e3a <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8003dfe:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <TP_Scan+0x128>)
 8003e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e04:	b25b      	sxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	da09      	bge.n	8003e1e <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8003e0a:	4b14      	ldr	r3, [pc, #80]	; (8003e5c <TP_Scan+0x128>)
 8003e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <TP_Scan+0x128>)
 8003e18:	f883 2020 	strb.w	r2, [r3, #32]
 8003e1c:	e00d      	b.n	8003e3a <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <TP_Scan+0x128>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8003e24:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <TP_Scan+0x128>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <TP_Scan+0x128>)
 8003e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e30:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <TP_Scan+0x128>)
 8003e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e38:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <TP_Scan+0x128>)
 8003e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e44:	b2db      	uxtb	r3, r3
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40020800 	.word	0x40020800
 8003e54:	20000046 	.word	0x20000046
 8003e58:	2000003c 	.word	0x2000003c
 8003e5c:	20000030 	.word	0x20000030

08003e60 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8003e64:	220e      	movs	r2, #14
 8003e66:	4905      	ldr	r1, [pc, #20]	; (8003e7c <TP_Save_Adjdata+0x1c>)
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7fd f9a9 	bl	80011c0 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8003e6e:	2100      	movs	r1, #0
 8003e70:	200e      	movs	r0, #14
 8003e72:	f7fd f945 	bl	8001100 <at24c_WriteOneByte>
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000054 	.word	0x20000054

08003e80 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8003e8a:	200e      	movs	r0, #14
 8003e8c:	f7fd f91c 	bl	80010c8 <at24c_ReadOneByte>
 8003e90:	4603      	mov	r3, r0
 8003e92:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8003e9a:	220e      	movs	r2, #14
 8003e9c:	4905      	ldr	r1, [pc, #20]	; (8003eb4 <TP_Get_Adjdata+0x34>)
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f7fd f96f 	bl	8001182 <at24c_Read>
		return 1;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000054 	.word	0x20000054

08003eb8 <touch_Adjust>:


void touch_Adjust(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08e      	sub	sp, #56	; 0x38
 8003ebc:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8003eca:	4b61      	ldr	r3, [pc, #388]	; (8004050 <touch_Adjust+0x198>)
 8003ecc:	881a      	ldrh	r2, [r3, #0]
 8003ece:	4b60      	ldr	r3, [pc, #384]	; (8004050 <touch_Adjust+0x198>)
 8003ed0:	885b      	ldrh	r3, [r3, #2]
 8003ed2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ed6:	9100      	str	r1, [sp, #0]
 8003ed8:	2100      	movs	r1, #0
 8003eda:	2000      	movs	r0, #0
 8003edc:	f7fd fda0 	bl	8001a20 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	9302      	str	r3, [sp, #8]
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ef2:	4a58      	ldr	r2, [pc, #352]	; (8004054 <touch_Adjust+0x19c>)
 8003ef4:	2128      	movs	r1, #40	; 0x28
 8003ef6:	2005      	movs	r0, #5
 8003ef8:	f7fe fa4a 	bl	8002390 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8003efc:	2300      	movs	r3, #0
 8003efe:	9302      	str	r3, [sp, #8]
 8003f00:	2310      	movs	r3, #16
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f0e:	4a52      	ldr	r2, [pc, #328]	; (8004058 <touch_Adjust+0x1a0>)
 8003f10:	2141      	movs	r1, #65	; 0x41
 8003f12:	2005      	movs	r0, #5
 8003f14:	f7fe fa3c 	bl	8002390 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8003f18:	2300      	movs	r3, #0
 8003f1a:	9302      	str	r3, [sp, #8]
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f2a:	4a4c      	ldr	r2, [pc, #304]	; (800405c <touch_Adjust+0x1a4>)
 8003f2c:	215a      	movs	r1, #90	; 0x5a
 8003f2e:	2005      	movs	r0, #5
 8003f30:	f7fe fa2e 	bl	8002390 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8003f34:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003f38:	2114      	movs	r1, #20
 8003f3a:	2014      	movs	r0, #20
 8003f3c:	f7ff fea2 	bl	8003c84 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8003f40:	4b47      	ldr	r3, [pc, #284]	; (8004060 <touch_Adjust+0x1a8>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8003f48:	4b45      	ldr	r3, [pc, #276]	; (8004060 <touch_Adjust+0x1a8>)
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8003f50:	2032      	movs	r0, #50	; 0x32
 8003f52:	f000 fe55 	bl	8004c00 <HAL_Delay>
		tp_dev.scan(1);
 8003f56:	4b42      	ldr	r3, [pc, #264]	; (8004060 <touch_Adjust+0x1a8>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8003f5e:	4b40      	ldr	r3, [pc, #256]	; (8004060 <touch_Adjust+0x1a8>)
 8003f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f68:	2b40      	cmp	r3, #64	; 0x40
 8003f6a:	f040 835e 	bne.w	800462a <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 8003f6e:	4b3c      	ldr	r3, [pc, #240]	; (8004060 <touch_Adjust+0x1a8>)
 8003f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	4b39      	ldr	r3, [pc, #228]	; (8004060 <touch_Adjust+0x1a8>)
 8003f7c:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8003f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f84:	4a36      	ldr	r2, [pc, #216]	; (8004060 <touch_Adjust+0x1a8>)
 8003f86:	8992      	ldrh	r2, [r2, #12]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003f8e:	440b      	add	r3, r1
 8003f90:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8003f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f98:	4a31      	ldr	r2, [pc, #196]	; (8004060 <touch_Adjust+0x1a8>)
 8003f9a:	8ad2      	ldrh	r2, [r2, #22]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003fa2:	440b      	add	r3, r1
 8003fa4:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8003fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fac:	3301      	adds	r3, #1
 8003fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 8003fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d8c9      	bhi.n	8003f50 <touch_Adjust+0x98>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <touch_Adjust+0x10c>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08003ff7 	.word	0x08003ff7
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	08004065 	.word	0x08004065
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8003fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fd8:	2114      	movs	r1, #20
 8003fda:	2014      	movs	r0, #20
 8003fdc:	f7ff fe52 	bl	8003c84 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <touch_Adjust+0x198>)
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	3b14      	subs	r3, #20
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003fec:	2114      	movs	r1, #20
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fe48 	bl	8003c84 <TP_Drow_Touch_Point>
					break;
 8003ff4:	e31a      	b.n	800462c <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 8003ff6:	4b16      	ldr	r3, [pc, #88]	; (8004050 <touch_Adjust+0x198>)
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	3b14      	subs	r3, #20
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004002:	2114      	movs	r1, #20
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fe3d 	bl	8003c84 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 800400a:	4b11      	ldr	r3, [pc, #68]	; (8004050 <touch_Adjust+0x198>)
 800400c:	885b      	ldrh	r3, [r3, #2]
 800400e:	3b14      	subs	r3, #20
 8004010:	b29b      	uxth	r3, r3
 8004012:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004016:	4619      	mov	r1, r3
 8004018:	2014      	movs	r0, #20
 800401a:	f7ff fe33 	bl	8003c84 <TP_Drow_Touch_Point>
					break;
 800401e:	e305      	b.n	800462c <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <touch_Adjust+0x198>)
 8004022:	885b      	ldrh	r3, [r3, #2]
 8004024:	3b14      	subs	r3, #20
 8004026:	b29b      	uxth	r3, r3
 8004028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800402c:	4619      	mov	r1, r3
 800402e:	2014      	movs	r0, #20
 8004030:	f7ff fe28 	bl	8003c84 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <touch_Adjust+0x198>)
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	3b14      	subs	r3, #20
 800403a:	b298      	uxth	r0, r3
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <touch_Adjust+0x198>)
 800403e:	885b      	ldrh	r3, [r3, #2]
 8004040:	3b14      	subs	r3, #20
 8004042:	b29b      	uxth	r3, r3
 8004044:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004048:	4619      	mov	r1, r3
 800404a:	f7ff fe1b 	bl	8003c84 <TP_Drow_Touch_Point>
					break;
 800404e:	e2ed      	b.n	800462c <touch_Adjust+0x774>
 8004050:	20000ae0 	.word	0x20000ae0
 8004054:	0800af04 	.word	0x0800af04
 8004058:	0800af20 	.word	0x0800af20
 800405c:	0800af38 	.word	0x0800af38
 8004060:	20000030 	.word	0x20000030
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8004064:	883b      	ldrh	r3, [r7, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	88bb      	ldrh	r3, [r7, #4]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	bfb8      	it	lt
 8004070:	425b      	neglt	r3, r3
 8004072:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8004074:	887b      	ldrh	r3, [r7, #2]
 8004076:	461a      	mov	r2, r3
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	bfb8      	it	lt
 8004080:	425b      	neglt	r3, r3
 8004082:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	fb03 f303 	mul.w	r3, r3, r3
 800408a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	fb03 f303 	mul.w	r3, r3, r3
 8004092:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc fa2a 	bl	80004f4 <__aeabi_ui2d>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	ec43 2b10 	vmov	d0, r2, r3
 80040a8:	f006 fe16 	bl	800acd8 <sqrt>
 80040ac:	ec53 2b10 	vmov	r2, r3, d0
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	f7fc fd48 	bl	8000b48 <__aeabi_d2uiz>
 80040b8:	4603      	mov	r3, r0
 80040ba:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 80040bc:	893b      	ldrh	r3, [r7, #8]
 80040be:	461a      	mov	r2, r3
 80040c0:	89bb      	ldrh	r3, [r7, #12]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bfb8      	it	lt
 80040c8:	425b      	neglt	r3, r3
 80040ca:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 80040cc:	897b      	ldrh	r3, [r7, #10]
 80040ce:	461a      	mov	r2, r3
 80040d0:	89fb      	ldrh	r3, [r7, #14]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bfb8      	it	lt
 80040d8:	425b      	neglt	r3, r3
 80040da:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	fb03 f303 	mul.w	r3, r3, r3
 80040e2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	fb03 f303 	mul.w	r3, r3, r3
 80040ea:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80040ec:	6a3a      	ldr	r2, [r7, #32]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fc f9fe 	bl	80004f4 <__aeabi_ui2d>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	ec43 2b10 	vmov	d0, r2, r3
 8004100:	f006 fdea 	bl	800acd8 <sqrt>
 8004104:	ec53 2b10 	vmov	r2, r3, d0
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	f7fc fd1c 	bl	8000b48 <__aeabi_d2uiz>
 8004110:	4603      	mov	r3, r0
 8004112:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8004114:	8b7b      	ldrh	r3, [r7, #26]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800411e:	8b3b      	ldrh	r3, [r7, #24]
 8004120:	ee07 3a90 	vmov	s15, r3
 8004124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004128:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800412c:	ee16 0a90 	vmov	r0, s13
 8004130:	f7fc fa02 	bl	8000538 <__aeabi_f2d>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 800413c:	a384      	add	r3, pc, #528	; (adr r3, 8004350 <touch_Adjust+0x498>)
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004146:	f7fc fcc1 	bl	8000acc <__aeabi_dcmplt>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10f      	bne.n	8004170 <touch_Adjust+0x2b8>
 8004150:	a381      	add	r3, pc, #516	; (adr r3, 8004358 <touch_Adjust+0x4a0>)
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800415a:	f7fc fcd5 	bl	8000b08 <__aeabi_dcmpgt>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <touch_Adjust+0x2b8>
 8004164:	8b7b      	ldrh	r3, [r7, #26]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <touch_Adjust+0x2b8>
 800416a:	8b3b      	ldrh	r3, [r7, #24]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d136      	bne.n	80041de <touch_Adjust+0x326>
					{
						cnt=0;
 8004170:	2300      	movs	r3, #0
 8004172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8004176:	4b7a      	ldr	r3, [pc, #488]	; (8004360 <touch_Adjust+0x4a8>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	3b14      	subs	r3, #20
 800417c:	b298      	uxth	r0, r3
 800417e:	4b78      	ldr	r3, [pc, #480]	; (8004360 <touch_Adjust+0x4a8>)
 8004180:	885b      	ldrh	r3, [r3, #2]
 8004182:	3b14      	subs	r3, #20
 8004184:	b29b      	uxth	r3, r3
 8004186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800418a:	4619      	mov	r1, r3
 800418c:	f7ff fd7a 	bl	8003c84 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8004190:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004194:	2114      	movs	r1, #20
 8004196:	2014      	movs	r0, #20
 8004198:	f7ff fd74 	bl	8003c84 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 800419c:	2300      	movs	r3, #0
 800419e:	9302      	str	r3, [sp, #8]
 80041a0:	2310      	movs	r3, #16
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041ae:	4a6d      	ldr	r2, [pc, #436]	; (8004364 <touch_Adjust+0x4ac>)
 80041b0:	2128      	movs	r1, #40	; 0x28
 80041b2:	2005      	movs	r0, #5
 80041b4:	f7fe f8ec 	bl	8002390 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80041b8:	2300      	movs	r3, #0
 80041ba:	9302      	str	r3, [sp, #8]
 80041bc:	2310      	movs	r3, #16
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041ca:	4a67      	ldr	r2, [pc, #412]	; (8004368 <touch_Adjust+0x4b0>)
 80041cc:	213c      	movs	r1, #60	; 0x3c
 80041ce:	2005      	movs	r0, #5
 80041d0:	f7fe f8de 	bl	8002390 <lcd_ShowStr>
						HAL_Delay(1000);
 80041d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041d8:	f000 fd12 	bl	8004c00 <HAL_Delay>
 						continue;
 80041dc:	e226      	b.n	800462c <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 80041de:	883b      	ldrh	r3, [r7, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	893b      	ldrh	r3, [r7, #8]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bfb8      	it	lt
 80041ea:	425b      	neglt	r3, r3
 80041ec:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 80041ee:	887b      	ldrh	r3, [r7, #2]
 80041f0:	461a      	mov	r2, r3
 80041f2:	897b      	ldrh	r3, [r7, #10]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bfb8      	it	lt
 80041fa:	425b      	neglt	r3, r3
 80041fc:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	fb03 f303 	mul.w	r3, r3, r3
 8004204:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	fb03 f303 	mul.w	r3, r3, r3
 800420c:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800420e:	6a3a      	ldr	r2, [r7, #32]
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	4413      	add	r3, r2
 8004214:	4618      	mov	r0, r3
 8004216:	f7fc f96d 	bl	80004f4 <__aeabi_ui2d>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	ec43 2b10 	vmov	d0, r2, r3
 8004222:	f006 fd59 	bl	800acd8 <sqrt>
 8004226:	ec53 2b10 	vmov	r2, r3, d0
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	f7fc fc8b 	bl	8000b48 <__aeabi_d2uiz>
 8004232:	4603      	mov	r3, r0
 8004234:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8004236:	88bb      	ldrh	r3, [r7, #4]
 8004238:	461a      	mov	r2, r3
 800423a:	89bb      	ldrh	r3, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	bfb8      	it	lt
 8004242:	425b      	neglt	r3, r3
 8004244:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	461a      	mov	r2, r3
 800424a:	89fb      	ldrh	r3, [r7, #14]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	bfb8      	it	lt
 8004252:	425b      	neglt	r3, r3
 8004254:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	fb03 f303 	mul.w	r3, r3, r3
 800425c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	fb03 f303 	mul.w	r3, r3, r3
 8004264:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8004266:	6a3a      	ldr	r2, [r7, #32]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f7fc f941 	bl	80004f4 <__aeabi_ui2d>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	ec43 2b10 	vmov	d0, r2, r3
 800427a:	f006 fd2d 	bl	800acd8 <sqrt>
 800427e:	ec53 2b10 	vmov	r2, r3, d0
 8004282:	4610      	mov	r0, r2
 8004284:	4619      	mov	r1, r3
 8004286:	f7fc fc5f 	bl	8000b48 <__aeabi_d2uiz>
 800428a:	4603      	mov	r3, r0
 800428c:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800428e:	8b7b      	ldrh	r3, [r7, #26]
 8004290:	ee07 3a90 	vmov	s15, r3
 8004294:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004298:	8b3b      	ldrh	r3, [r7, #24]
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80042a6:	ee16 0a90 	vmov	r0, s13
 80042aa:	f7fc f945 	bl	8000538 <__aeabi_f2d>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 80042b6:	a326      	add	r3, pc, #152	; (adr r3, 8004350 <touch_Adjust+0x498>)
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042c0:	f7fc fc04 	bl	8000acc <__aeabi_dcmplt>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <touch_Adjust+0x426>
 80042ca:	a323      	add	r3, pc, #140	; (adr r3, 8004358 <touch_Adjust+0x4a0>)
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042d4:	f7fc fc18 	bl	8000b08 <__aeabi_dcmpgt>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d046      	beq.n	800436c <touch_Adjust+0x4b4>
					{
						cnt=0;
 80042de:	2300      	movs	r3, #0
 80042e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80042e4:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <touch_Adjust+0x4a8>)
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	3b14      	subs	r3, #20
 80042ea:	b298      	uxth	r0, r3
 80042ec:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <touch_Adjust+0x4a8>)
 80042ee:	885b      	ldrh	r3, [r3, #2]
 80042f0:	3b14      	subs	r3, #20
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042f8:	4619      	mov	r1, r3
 80042fa:	f7ff fcc3 	bl	8003c84 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80042fe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004302:	2114      	movs	r1, #20
 8004304:	2014      	movs	r0, #20
 8004306:	f7ff fcbd 	bl	8003c84 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 800430a:	2300      	movs	r3, #0
 800430c:	9302      	str	r3, [sp, #8]
 800430e:	2310      	movs	r3, #16
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800431c:	4a11      	ldr	r2, [pc, #68]	; (8004364 <touch_Adjust+0x4ac>)
 800431e:	2128      	movs	r1, #40	; 0x28
 8004320:	2005      	movs	r0, #5
 8004322:	f7fe f835 	bl	8002390 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8004326:	2300      	movs	r3, #0
 8004328:	9302      	str	r3, [sp, #8]
 800432a:	2310      	movs	r3, #16
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004338:	4a0b      	ldr	r2, [pc, #44]	; (8004368 <touch_Adjust+0x4b0>)
 800433a:	213c      	movs	r1, #60	; 0x3c
 800433c:	2005      	movs	r0, #5
 800433e:	f7fe f827 	bl	8002390 <lcd_ShowStr>
						HAL_Delay(1000);
 8004342:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004346:	f000 fc5b 	bl	8004c00 <HAL_Delay>
						continue;
 800434a:	e16f      	b.n	800462c <touch_Adjust+0x774>
 800434c:	f3af 8000 	nop.w
 8004350:	66666666 	.word	0x66666666
 8004354:	3fee6666 	.word	0x3fee6666
 8004358:	cccccccd 	.word	0xcccccccd
 800435c:	3ff0cccc 	.word	0x3ff0cccc
 8004360:	20000ae0 	.word	0x20000ae0
 8004364:	0800af4c 	.word	0x0800af4c
 8004368:	0800af6c 	.word	0x0800af6c
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 800436c:	88bb      	ldrh	r3, [r7, #4]
 800436e:	461a      	mov	r2, r3
 8004370:	893b      	ldrh	r3, [r7, #8]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	bfb8      	it	lt
 8004378:	425b      	neglt	r3, r3
 800437a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	461a      	mov	r2, r3
 8004380:	897b      	ldrh	r3, [r7, #10]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	bfb8      	it	lt
 8004388:	425b      	neglt	r3, r3
 800438a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	fb03 f303 	mul.w	r3, r3, r3
 8004392:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	fb03 f303 	mul.w	r3, r3, r3
 800439a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	4413      	add	r3, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fc f8a6 	bl	80004f4 <__aeabi_ui2d>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	ec43 2b10 	vmov	d0, r2, r3
 80043b0:	f006 fc92 	bl	800acd8 <sqrt>
 80043b4:	ec53 2b10 	vmov	r2, r3, d0
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	f7fc fbc4 	bl	8000b48 <__aeabi_d2uiz>
 80043c0:	4603      	mov	r3, r0
 80043c2:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 80043c4:	883b      	ldrh	r3, [r7, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	89bb      	ldrh	r3, [r7, #12]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bfb8      	it	lt
 80043d0:	425b      	neglt	r3, r3
 80043d2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 80043d4:	887b      	ldrh	r3, [r7, #2]
 80043d6:	461a      	mov	r2, r3
 80043d8:	89fb      	ldrh	r3, [r7, #14]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bfb8      	it	lt
 80043e0:	425b      	neglt	r3, r3
 80043e2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	fb03 f303 	mul.w	r3, r3, r3
 80043ea:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	fb03 f303 	mul.w	r3, r3, r3
 80043f2:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80043f4:	6a3a      	ldr	r2, [r7, #32]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fc f87a 	bl	80004f4 <__aeabi_ui2d>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	ec43 2b10 	vmov	d0, r2, r3
 8004408:	f006 fc66 	bl	800acd8 <sqrt>
 800440c:	ec53 2b10 	vmov	r2, r3, d0
 8004410:	4610      	mov	r0, r2
 8004412:	4619      	mov	r1, r3
 8004414:	f7fc fb98 	bl	8000b48 <__aeabi_d2uiz>
 8004418:	4603      	mov	r3, r0
 800441a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800441c:	8b7b      	ldrh	r3, [r7, #26]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004426:	8b3b      	ldrh	r3, [r7, #24]
 8004428:	ee07 3a90 	vmov	s15, r3
 800442c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004430:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004434:	ee16 0a90 	vmov	r0, s13
 8004438:	f7fc f87e 	bl	8000538 <__aeabi_f2d>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8004444:	a383      	add	r3, pc, #524	; (adr r3, 8004654 <touch_Adjust+0x79c>)
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800444e:	f7fc fb3d 	bl	8000acc <__aeabi_dcmplt>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <touch_Adjust+0x5b4>
 8004458:	a380      	add	r3, pc, #512	; (adr r3, 800465c <touch_Adjust+0x7a4>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004462:	f7fc fb51 	bl	8000b08 <__aeabi_dcmpgt>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d036      	beq.n	80044da <touch_Adjust+0x622>
					{
						cnt=0;
 800446c:	2300      	movs	r3, #0
 800446e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8004472:	4b71      	ldr	r3, [pc, #452]	; (8004638 <touch_Adjust+0x780>)
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	3b14      	subs	r3, #20
 8004478:	b298      	uxth	r0, r3
 800447a:	4b6f      	ldr	r3, [pc, #444]	; (8004638 <touch_Adjust+0x780>)
 800447c:	885b      	ldrh	r3, [r3, #2]
 800447e:	3b14      	subs	r3, #20
 8004480:	b29b      	uxth	r3, r3
 8004482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004486:	4619      	mov	r1, r3
 8004488:	f7ff fbfc 	bl	8003c84 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 800448c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004490:	2114      	movs	r1, #20
 8004492:	2014      	movs	r0, #20
 8004494:	f7ff fbf6 	bl	8003c84 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8004498:	2300      	movs	r3, #0
 800449a:	9302      	str	r3, [sp, #8]
 800449c:	2310      	movs	r3, #16
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044aa:	4a64      	ldr	r2, [pc, #400]	; (800463c <touch_Adjust+0x784>)
 80044ac:	2128      	movs	r1, #40	; 0x28
 80044ae:	2005      	movs	r0, #5
 80044b0:	f7fd ff6e 	bl	8002390 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80044b4:	2300      	movs	r3, #0
 80044b6:	9302      	str	r3, [sp, #8]
 80044b8:	2310      	movs	r3, #16
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044c6:	4a5e      	ldr	r2, [pc, #376]	; (8004640 <touch_Adjust+0x788>)
 80044c8:	213c      	movs	r1, #60	; 0x3c
 80044ca:	2005      	movs	r0, #5
 80044cc:	f7fd ff60 	bl	8002390 <lcd_ShowStr>

						HAL_Delay(1000);
 80044d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044d4:	f000 fb94 	bl	8004c00 <HAL_Delay>
 							continue;
 80044d8:	e0a8      	b.n	800462c <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 80044da:	4b57      	ldr	r3, [pc, #348]	; (8004638 <touch_Adjust+0x780>)
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	3b28      	subs	r3, #40	; 0x28
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80044e8:	88bb      	ldrh	r3, [r7, #4]
 80044ea:	461a      	mov	r2, r3
 80044ec:	883b      	ldrh	r3, [r7, #0]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044fc:	4b51      	ldr	r3, [pc, #324]	; (8004644 <touch_Adjust+0x78c>)
 80044fe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8004502:	4b4d      	ldr	r3, [pc, #308]	; (8004638 <touch_Adjust+0x780>)
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800450e:	4b4d      	ldr	r3, [pc, #308]	; (8004644 <touch_Adjust+0x78c>)
 8004510:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004514:	88bb      	ldrh	r3, [r7, #4]
 8004516:	461a      	mov	r2, r3
 8004518:	883b      	ldrh	r3, [r7, #0]
 800451a:	4413      	add	r3, r2
 800451c:	ee07 3a90 	vmov	s15, r3
 8004520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004528:	ee37 7a67 	vsub.f32	s14, s14, s15
 800452c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004530:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004538:	ee17 3a90 	vmov	r3, s15
 800453c:	b21a      	sxth	r2, r3
 800453e:	4b41      	ldr	r3, [pc, #260]	; (8004644 <touch_Adjust+0x78c>)
 8004540:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8004542:	4b3d      	ldr	r3, [pc, #244]	; (8004638 <touch_Adjust+0x780>)
 8004544:	885b      	ldrh	r3, [r3, #2]
 8004546:	3b28      	subs	r3, #40	; 0x28
 8004548:	ee07 3a90 	vmov	s15, r3
 800454c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004550:	897b      	ldrh	r3, [r7, #10]
 8004552:	461a      	mov	r2, r3
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	ee07 3a90 	vmov	s15, r3
 800455c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004564:	4b37      	ldr	r3, [pc, #220]	; (8004644 <touch_Adjust+0x78c>)
 8004566:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 800456a:	4b33      	ldr	r3, [pc, #204]	; (8004638 <touch_Adjust+0x780>)
 800456c:	885b      	ldrh	r3, [r3, #2]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004576:	4b33      	ldr	r3, [pc, #204]	; (8004644 <touch_Adjust+0x78c>)
 8004578:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800457c:	897b      	ldrh	r3, [r7, #10]
 800457e:	461a      	mov	r2, r3
 8004580:	887b      	ldrh	r3, [r7, #2]
 8004582:	4413      	add	r3, r2
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800458c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004590:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004594:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004598:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800459c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045a0:	ee17 3a90 	vmov	r3, s15
 80045a4:	b21a      	sxth	r2, r3
 80045a6:	4b27      	ldr	r3, [pc, #156]	; (8004644 <touch_Adjust+0x78c>)
 80045a8:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80045aa:	4b23      	ldr	r3, [pc, #140]	; (8004638 <touch_Adjust+0x780>)
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	3b14      	subs	r3, #20
 80045b0:	b298      	uxth	r0, r3
 80045b2:	4b21      	ldr	r3, [pc, #132]	; (8004638 <touch_Adjust+0x780>)
 80045b4:	885b      	ldrh	r3, [r3, #2]
 80045b6:	3b14      	subs	r3, #20
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045be:	4619      	mov	r1, r3
 80045c0:	f7ff fb60 	bl	8003c84 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 80045c4:	2300      	movs	r3, #0
 80045c6:	9302      	str	r3, [sp, #8]
 80045c8:	2310      	movs	r3, #16
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045d6:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <touch_Adjust+0x790>)
 80045d8:	2128      	movs	r1, #40	; 0x28
 80045da:	2005      	movs	r0, #5
 80045dc:	f7fd fed8 	bl	8002390 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 80045e0:	2300      	movs	r3, #0
 80045e2:	9302      	str	r3, [sp, #8]
 80045e4:	2310      	movs	r3, #16
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045f2:	4a16      	ldr	r2, [pc, #88]	; (800464c <touch_Adjust+0x794>)
 80045f4:	213c      	movs	r1, #60	; 0x3c
 80045f6:	2005      	movs	r0, #5
 80045f8:	f7fd feca 	bl	8002390 <lcd_ShowStr>
					HAL_Delay(1000);
 80045fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004600:	f000 fafe 	bl	8004c00 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8004604:	2300      	movs	r3, #0
 8004606:	9302      	str	r3, [sp, #8]
 8004608:	2310      	movs	r3, #16
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004616:	4a0e      	ldr	r2, [pc, #56]	; (8004650 <touch_Adjust+0x798>)
 8004618:	2128      	movs	r1, #40	; 0x28
 800461a:	2005      	movs	r0, #5
 800461c:	f7fd feb8 	bl	8002390 <lcd_ShowStr>
					TP_Save_Adjdata();
 8004620:	f7ff fc1e 	bl	8003e60 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8004624:	f7ff fc2c 	bl	8003e80 <TP_Get_Adjdata>
					return;
 8004628:	e001      	b.n	800462e <touch_Adjust+0x776>
			}
		}
 800462a:	bf00      	nop
		HAL_Delay(50);
 800462c:	e490      	b.n	8003f50 <touch_Adjust+0x98>
 	}
}
 800462e:	3728      	adds	r7, #40	; 0x28
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	f3af 8000 	nop.w
 8004638:	20000ae0 	.word	0x20000ae0
 800463c:	0800af4c 	.word	0x0800af4c
 8004640:	0800af6c 	.word	0x0800af6c
 8004644:	20000030 	.word	0x20000030
 8004648:	0800af8c 	.word	0x0800af8c
 800464c:	0800afac 	.word	0x0800afac
 8004650:	0800afcc 	.word	0x0800afcc
 8004654:	66666666 	.word	0x66666666
 8004658:	3fee6666 	.word	0x3fee6666
 800465c:	cccccccd 	.word	0xcccccccd
 8004660:	3ff0cccc 	.word	0x3ff0cccc

08004664 <touch_init>:

void touch_init(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8004668:	4904      	ldr	r1, [pc, #16]	; (800467c <touch_init+0x18>)
 800466a:	4805      	ldr	r0, [pc, #20]	; (8004680 <touch_init+0x1c>)
 800466c:	f7ff fa86 	bl	8003b7c <TP_Read_XY>
	at24c_init();
 8004670:	f7fc fd24 	bl	80010bc <at24c_init>
	TP_Get_Adjdata();
 8004674:	f7ff fc04 	bl	8003e80 <TP_Get_Adjdata>
}
 8004678:	bf00      	nop
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000046 	.word	0x20000046
 8004680:	2000003c 	.word	0x2000003c

08004684 <touch_Scan>:

void touch_Scan(){
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8004688:	4b02      	ldr	r3, [pc, #8]	; (8004694 <touch_Scan+0x10>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2000      	movs	r0, #0
 800468e:	4798      	blx	r3
}
 8004690:	bf00      	nop
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20000030 	.word	0x20000030

08004698 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 800469c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046a0:	4805      	ldr	r0, [pc, #20]	; (80046b8 <touch_IsTouched+0x20>)
 80046a2:	f001 fb5d 	bl	8005d60 <HAL_GPIO_ReadPin>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40020800 	.word	0x40020800

080046bc <touch_GetX>:

uint16_t touch_GetX(){
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <touch_GetX+0x14>)
 80046c2:	899b      	ldrh	r3, [r3, #12]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000030 	.word	0x20000030

080046d4 <touch_GetY>:

uint16_t touch_GetY(){
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 80046d8:	4b03      	ldr	r3, [pc, #12]	; (80046e8 <touch_GetY+0x14>)
 80046da:	8adb      	ldrh	r3, [r3, #22]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000030 	.word	0x20000030

080046ec <isButtonStart>:
 *      Author: Admin
 */

#include "touch_screen.h"

uint8_t isButtonStart(){
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80046f0:	f7ff ffd2 	bl	8004698 <touch_IsTouched>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <isButtonStart+0x12>
 80046fa:	2300      	movs	r3, #0
 80046fc:	e018      	b.n	8004730 <isButtonStart+0x44>
	return touch_GetX() > 50 && touch_GetX() < 190 && touch_GetY() > 200 && touch_GetY() < 300;
 80046fe:	f7ff ffdd 	bl	80046bc <touch_GetX>
 8004702:	4603      	mov	r3, r0
 8004704:	2b32      	cmp	r3, #50	; 0x32
 8004706:	d911      	bls.n	800472c <isButtonStart+0x40>
 8004708:	f7ff ffd8 	bl	80046bc <touch_GetX>
 800470c:	4603      	mov	r3, r0
 800470e:	2bbd      	cmp	r3, #189	; 0xbd
 8004710:	d80c      	bhi.n	800472c <isButtonStart+0x40>
 8004712:	f7ff ffdf 	bl	80046d4 <touch_GetY>
 8004716:	4603      	mov	r3, r0
 8004718:	2bc8      	cmp	r3, #200	; 0xc8
 800471a:	d907      	bls.n	800472c <isButtonStart+0x40>
 800471c:	f7ff ffda 	bl	80046d4 <touch_GetY>
 8004720:	4603      	mov	r3, r0
 8004722:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004726:	d201      	bcs.n	800472c <isButtonStart+0x40>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <isButtonStart+0x42>
 800472c:	2300      	movs	r3, #0
 800472e:	b2db      	uxtb	r3, r3
}
 8004730:	4618      	mov	r0, r3
 8004732:	bd80      	pop	{r7, pc}

08004734 <isButtonUp>:
uint8_t isButtonUp(){
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8004738:	f7ff ffae 	bl	8004698 <touch_IsTouched>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <isButtonUp+0x12>
 8004742:	2300      	movs	r3, #0
 8004744:	e017      	b.n	8004776 <isButtonUp+0x42>
	return touch_GetX() > 90 && touch_GetX() < 150 && touch_GetY() > 210 && touch_GetY() < 250;
 8004746:	f7ff ffb9 	bl	80046bc <touch_GetX>
 800474a:	4603      	mov	r3, r0
 800474c:	2b5a      	cmp	r3, #90	; 0x5a
 800474e:	d910      	bls.n	8004772 <isButtonUp+0x3e>
 8004750:	f7ff ffb4 	bl	80046bc <touch_GetX>
 8004754:	4603      	mov	r3, r0
 8004756:	2b95      	cmp	r3, #149	; 0x95
 8004758:	d80b      	bhi.n	8004772 <isButtonUp+0x3e>
 800475a:	f7ff ffbb 	bl	80046d4 <touch_GetY>
 800475e:	4603      	mov	r3, r0
 8004760:	2bd2      	cmp	r3, #210	; 0xd2
 8004762:	d906      	bls.n	8004772 <isButtonUp+0x3e>
 8004764:	f7ff ffb6 	bl	80046d4 <touch_GetY>
 8004768:	4603      	mov	r3, r0
 800476a:	2bf9      	cmp	r3, #249	; 0xf9
 800476c:	d801      	bhi.n	8004772 <isButtonUp+0x3e>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <isButtonUp+0x40>
 8004772:	2300      	movs	r3, #0
 8004774:	b2db      	uxtb	r3, r3
}
 8004776:	4618      	mov	r0, r3
 8004778:	bd80      	pop	{r7, pc}

0800477a <isButtonDown>:
uint8_t isButtonDown(){
 800477a:	b580      	push	{r7, lr}
 800477c:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 800477e:	f7ff ff8b 	bl	8004698 <touch_IsTouched>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <isButtonDown+0x12>
 8004788:	2300      	movs	r3, #0
 800478a:	e019      	b.n	80047c0 <isButtonDown+0x46>
	return touch_GetX() > 90 && touch_GetX() < 150 && touch_GetY() > 260 && touch_GetY() < 300;
 800478c:	f7ff ff96 	bl	80046bc <touch_GetX>
 8004790:	4603      	mov	r3, r0
 8004792:	2b5a      	cmp	r3, #90	; 0x5a
 8004794:	d912      	bls.n	80047bc <isButtonDown+0x42>
 8004796:	f7ff ff91 	bl	80046bc <touch_GetX>
 800479a:	4603      	mov	r3, r0
 800479c:	2b95      	cmp	r3, #149	; 0x95
 800479e:	d80d      	bhi.n	80047bc <isButtonDown+0x42>
 80047a0:	f7ff ff98 	bl	80046d4 <touch_GetY>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047aa:	d907      	bls.n	80047bc <isButtonDown+0x42>
 80047ac:	f7ff ff92 	bl	80046d4 <touch_GetY>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80047b6:	d201      	bcs.n	80047bc <isButtonDown+0x42>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <isButtonDown+0x44>
 80047bc:	2300      	movs	r3, #0
 80047be:	b2db      	uxtb	r3, r3
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <isButtonLeft>:
uint8_t isButtonLeft(){
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80047c8:	f7ff ff66 	bl	8004698 <touch_IsTouched>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <isButtonLeft+0x12>
 80047d2:	2300      	movs	r3, #0
 80047d4:	e019      	b.n	800480a <isButtonLeft+0x46>
	return touch_GetX() > 20 && touch_GetX() < 80 && touch_GetY() > 260 && touch_GetY() < 300;
 80047d6:	f7ff ff71 	bl	80046bc <touch_GetX>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b14      	cmp	r3, #20
 80047de:	d912      	bls.n	8004806 <isButtonLeft+0x42>
 80047e0:	f7ff ff6c 	bl	80046bc <touch_GetX>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b4f      	cmp	r3, #79	; 0x4f
 80047e8:	d80d      	bhi.n	8004806 <isButtonLeft+0x42>
 80047ea:	f7ff ff73 	bl	80046d4 <touch_GetY>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f4:	d907      	bls.n	8004806 <isButtonLeft+0x42>
 80047f6:	f7ff ff6d 	bl	80046d4 <touch_GetY>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004800:	d201      	bcs.n	8004806 <isButtonLeft+0x42>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <isButtonLeft+0x44>
 8004806:	2300      	movs	r3, #0
 8004808:	b2db      	uxtb	r3, r3
}
 800480a:	4618      	mov	r0, r3
 800480c:	bd80      	pop	{r7, pc}

0800480e <isButtonRight>:
uint8_t isButtonRight(){
 800480e:	b580      	push	{r7, lr}
 8004810:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8004812:	f7ff ff41 	bl	8004698 <touch_IsTouched>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <isButtonRight+0x12>
 800481c:	2300      	movs	r3, #0
 800481e:	e019      	b.n	8004854 <isButtonRight+0x46>
	return touch_GetX() > 160 && touch_GetX() < 220 && touch_GetY() > 260 && touch_GetY() < 300;
 8004820:	f7ff ff4c 	bl	80046bc <touch_GetX>
 8004824:	4603      	mov	r3, r0
 8004826:	2ba0      	cmp	r3, #160	; 0xa0
 8004828:	d912      	bls.n	8004850 <isButtonRight+0x42>
 800482a:	f7ff ff47 	bl	80046bc <touch_GetX>
 800482e:	4603      	mov	r3, r0
 8004830:	2bdb      	cmp	r3, #219	; 0xdb
 8004832:	d80d      	bhi.n	8004850 <isButtonRight+0x42>
 8004834:	f7ff ff4e 	bl	80046d4 <touch_GetY>
 8004838:	4603      	mov	r3, r0
 800483a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800483e:	d907      	bls.n	8004850 <isButtonRight+0x42>
 8004840:	f7ff ff48 	bl	80046d4 <touch_GetY>
 8004844:	4603      	mov	r3, r0
 8004846:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800484a:	d201      	bcs.n	8004850 <isButtonRight+0x42>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <isButtonRight+0x44>
 8004850:	2300      	movs	r3, #0
 8004852:	b2db      	uxtb	r3, r3
}
 8004854:	4618      	mov	r0, r3
 8004856:	bd80      	pop	{r7, pc}

08004858 <isButtonRestart>:
uint8_t isButtonRestart(){
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 800485c:	f7ff ff1c 	bl	8004698 <touch_IsTouched>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <isButtonRestart+0x12>
 8004866:	2300      	movs	r3, #0
 8004868:	e018      	b.n	800489c <isButtonRestart+0x44>
	return touch_GetX() > 50 && touch_GetX() < 190 && touch_GetY() > 250 && touch_GetY() < 350;
 800486a:	f7ff ff27 	bl	80046bc <touch_GetX>
 800486e:	4603      	mov	r3, r0
 8004870:	2b32      	cmp	r3, #50	; 0x32
 8004872:	d911      	bls.n	8004898 <isButtonRestart+0x40>
 8004874:	f7ff ff22 	bl	80046bc <touch_GetX>
 8004878:	4603      	mov	r3, r0
 800487a:	2bbd      	cmp	r3, #189	; 0xbd
 800487c:	d80c      	bhi.n	8004898 <isButtonRestart+0x40>
 800487e:	f7ff ff29 	bl	80046d4 <touch_GetY>
 8004882:	4603      	mov	r3, r0
 8004884:	2bfa      	cmp	r3, #250	; 0xfa
 8004886:	d907      	bls.n	8004898 <isButtonRestart+0x40>
 8004888:	f7ff ff24 	bl	80046d4 <touch_GetY>
 800488c:	4603      	mov	r3, r0
 800488e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8004892:	d201      	bcs.n	8004898 <isButtonRestart+0x40>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <isButtonRestart+0x42>
 8004898:	2300      	movs	r3, #0
 800489a:	b2db      	uxtb	r3, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_UART_RxCpltCallback>:
        }
        num %= mypow(10, i-1);
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <HAL_UART_RxCpltCallback+0x54>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d11c      	bne.n	80048ec <HAL_UART_RxCpltCallback+0x4c>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80048b2:	230a      	movs	r3, #10
 80048b4:	2201      	movs	r2, #1
 80048b6:	4910      	ldr	r1, [pc, #64]	; (80048f8 <HAL_UART_RxCpltCallback+0x58>)
 80048b8:	4810      	ldr	r0, [pc, #64]	; (80048fc <HAL_UART_RxCpltCallback+0x5c>)
 80048ba:	f004 f98e 	bl	8008bda <HAL_UART_Transmit>

		// turn on the receice interrupt
		rxBuffer[rxHead] = receive_buffer1;
 80048be:	4b10      	ldr	r3, [pc, #64]	; (8004900 <HAL_UART_RxCpltCallback+0x60>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <HAL_UART_RxCpltCallback+0x58>)
 80048c6:	7819      	ldrb	r1, [r3, #0]
 80048c8:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <HAL_UART_RxCpltCallback+0x64>)
 80048ca:	5499      	strb	r1, [r3, r2]
		rxHead = (rxHead + 1)%BUFFER_SIZE;
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <HAL_UART_RxCpltCallback+0x60>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	3301      	adds	r3, #1
 80048d2:	425a      	negs	r2, r3
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	bf58      	it	pl
 80048da:	4253      	negpl	r3, r2
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	4b08      	ldr	r3, [pc, #32]	; (8004900 <HAL_UART_RxCpltCallback+0x60>)
 80048e0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80048e2:	2201      	movs	r2, #1
 80048e4:	4904      	ldr	r1, [pc, #16]	; (80048f8 <HAL_UART_RxCpltCallback+0x58>)
 80048e6:	4805      	ldr	r0, [pc, #20]	; (80048fc <HAL_UART_RxCpltCallback+0x5c>)
 80048e8:	f004 fa09 	bl	8008cfe <HAL_UART_Receive_IT>
	}
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40011000 	.word	0x40011000
 80048f8:	20000988 	.word	0x20000988
 80048fc:	20000db0 	.word	0x20000db0
 8004900:	20000989 	.word	0x20000989
 8004904:	20000cb0 	.word	0x20000cb0

08004908 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <MX_USART1_UART_Init+0x50>)
 8004910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 8004914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800491a:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 800491c:	2200      	movs	r2, #0
 800491e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 8004922:	2200      	movs	r2, #0
 8004924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 8004928:	2200      	movs	r2, #0
 800492a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 800492e:	220c      	movs	r2, #12
 8004930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 8004934:	2200      	movs	r2, #0
 8004936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004938:	4b06      	ldr	r3, [pc, #24]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 800493a:	2200      	movs	r2, #0
 800493c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800493e:	4805      	ldr	r0, [pc, #20]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 8004940:	f004 f8fe 	bl	8008b40 <HAL_UART_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800494a:	f7fd fedd 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800494e:	bf00      	nop
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000db0 	.word	0x20000db0
 8004958:	40011000 	.word	0x40011000

0800495c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004962:	4a12      	ldr	r2, [pc, #72]	; (80049ac <MX_USART2_UART_Init+0x50>)
 8004964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004966:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800496c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800496e:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004970:	2200      	movs	r2, #0
 8004972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004976:	2200      	movs	r2, #0
 8004978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 800497c:	2200      	movs	r2, #0
 800497e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004982:	220c      	movs	r2, #12
 8004984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004986:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004988:	2200      	movs	r2, #0
 800498a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 800498e:	2200      	movs	r2, #0
 8004990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004992:	4805      	ldr	r0, [pc, #20]	; (80049a8 <MX_USART2_UART_Init+0x4c>)
 8004994:	f004 f8d4 	bl	8008b40 <HAL_UART_Init>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800499e:	f7fd feb3 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000df4 	.word	0x20000df4
 80049ac:	40004400 	.word	0x40004400

080049b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08c      	sub	sp, #48	; 0x30
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b8:	f107 031c 	add.w	r3, r7, #28
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	609a      	str	r2, [r3, #8]
 80049c4:	60da      	str	r2, [r3, #12]
 80049c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a3a      	ldr	r2, [pc, #232]	; (8004ab8 <HAL_UART_MspInit+0x108>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d135      	bne.n	8004a3e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049d2:	2300      	movs	r3, #0
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	4b39      	ldr	r3, [pc, #228]	; (8004abc <HAL_UART_MspInit+0x10c>)
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	4a38      	ldr	r2, [pc, #224]	; (8004abc <HAL_UART_MspInit+0x10c>)
 80049dc:	f043 0310 	orr.w	r3, r3, #16
 80049e0:	6453      	str	r3, [r2, #68]	; 0x44
 80049e2:	4b36      	ldr	r3, [pc, #216]	; (8004abc <HAL_UART_MspInit+0x10c>)
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	4b32      	ldr	r3, [pc, #200]	; (8004abc <HAL_UART_MspInit+0x10c>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	4a31      	ldr	r2, [pc, #196]	; (8004abc <HAL_UART_MspInit+0x10c>)
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	6313      	str	r3, [r2, #48]	; 0x30
 80049fe:	4b2f      	ldr	r3, [pc, #188]	; (8004abc <HAL_UART_MspInit+0x10c>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a10:	2302      	movs	r3, #2
 8004a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a1c:	2307      	movs	r3, #7
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a20:	f107 031c 	add.w	r3, r7, #28
 8004a24:	4619      	mov	r1, r3
 8004a26:	4826      	ldr	r0, [pc, #152]	; (8004ac0 <HAL_UART_MspInit+0x110>)
 8004a28:	f000 fffe 	bl	8005a28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2100      	movs	r1, #0
 8004a30:	2025      	movs	r0, #37	; 0x25
 8004a32:	f000 fc46 	bl	80052c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a36:	2025      	movs	r0, #37	; 0x25
 8004a38:	f000 fc5f 	bl	80052fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a3c:	e038      	b.n	8004ab0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <HAL_UART_MspInit+0x114>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d133      	bne.n	8004ab0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <HAL_UART_MspInit+0x10c>)
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	4a1a      	ldr	r2, [pc, #104]	; (8004abc <HAL_UART_MspInit+0x10c>)
 8004a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a56:	6413      	str	r3, [r2, #64]	; 0x40
 8004a58:	4b18      	ldr	r3, [pc, #96]	; (8004abc <HAL_UART_MspInit+0x10c>)
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	4b14      	ldr	r3, [pc, #80]	; (8004abc <HAL_UART_MspInit+0x10c>)
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6c:	4a13      	ldr	r2, [pc, #76]	; (8004abc <HAL_UART_MspInit+0x10c>)
 8004a6e:	f043 0301 	orr.w	r3, r3, #1
 8004a72:	6313      	str	r3, [r2, #48]	; 0x30
 8004a74:	4b11      	ldr	r3, [pc, #68]	; (8004abc <HAL_UART_MspInit+0x10c>)
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a80:	230c      	movs	r3, #12
 8004a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a84:	2302      	movs	r3, #2
 8004a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a90:	2307      	movs	r3, #7
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a94:	f107 031c 	add.w	r3, r7, #28
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4809      	ldr	r0, [pc, #36]	; (8004ac0 <HAL_UART_MspInit+0x110>)
 8004a9c:	f000 ffc4 	bl	8005a28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	2026      	movs	r0, #38	; 0x26
 8004aa6:	f000 fc0c 	bl	80052c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004aaa:	2026      	movs	r0, #38	; 0x26
 8004aac:	f000 fc25 	bl	80052fa <HAL_NVIC_EnableIRQ>
}
 8004ab0:	bf00      	nop
 8004ab2:	3730      	adds	r7, #48	; 0x30
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40011000 	.word	0x40011000
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	40020000 	.word	0x40020000
 8004ac4:	40004400 	.word	0x40004400

08004ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004acc:	480d      	ldr	r0, [pc, #52]	; (8004b04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ace:	490e      	ldr	r1, [pc, #56]	; (8004b08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ad0:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ad4:	e002      	b.n	8004adc <LoopCopyDataInit>

08004ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ada:	3304      	adds	r3, #4

08004adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ae0:	d3f9      	bcc.n	8004ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ae2:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ae4:	4c0b      	ldr	r4, [pc, #44]	; (8004b14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ae8:	e001      	b.n	8004aee <LoopFillZerobss>

08004aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aec:	3204      	adds	r2, #4

08004aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004af0:	d3fb      	bcc.n	8004aea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004af2:	f7fe fd8d 	bl	8003610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004af6:	f005 f8c1 	bl	8009c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004afa:	f7fd fd39 	bl	8002570 <main>
  bx  lr    
 8004afe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b08:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8004b0c:	0800e0e0 	.word	0x0800e0e0
  ldr r2, =_sbss
 8004b10:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8004b14:	20000e4c 	.word	0x20000e4c

08004b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b18:	e7fe      	b.n	8004b18 <ADC_IRQHandler>
	...

08004b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b20:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <HAL_Init+0x40>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a0d      	ldr	r2, [pc, #52]	; (8004b5c <HAL_Init+0x40>)
 8004b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_Init+0x40>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <HAL_Init+0x40>)
 8004b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <HAL_Init+0x40>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a07      	ldr	r2, [pc, #28]	; (8004b5c <HAL_Init+0x40>)
 8004b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b44:	2003      	movs	r0, #3
 8004b46:	f000 fbb1 	bl	80052ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b4a:	200f      	movs	r0, #15
 8004b4c:	f000 f808 	bl	8004b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b50:	f7fe fc1e 	bl	8003390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023c00 	.word	0x40023c00

08004b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b68:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <HAL_InitTick+0x54>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <HAL_InitTick+0x58>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	4619      	mov	r1, r3
 8004b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fbc9 	bl	8005316 <HAL_SYSTICK_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e00e      	b.n	8004bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b0f      	cmp	r3, #15
 8004b92:	d80a      	bhi.n	8004baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b94:	2200      	movs	r2, #0
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	f000 fb91 	bl	80052c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ba0:	4a06      	ldr	r2, [pc, #24]	; (8004bbc <HAL_InitTick+0x5c>)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	e000      	b.n	8004bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	2000002c 	.word	0x2000002c
 8004bb8:	2000006c 	.word	0x2000006c
 8004bbc:	20000068 	.word	0x20000068

08004bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <HAL_IncTick+0x20>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_IncTick+0x24>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4413      	add	r3, r2
 8004bd0:	4a04      	ldr	r2, [pc, #16]	; (8004be4 <HAL_IncTick+0x24>)
 8004bd2:	6013      	str	r3, [r2, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	2000006c 	.word	0x2000006c
 8004be4:	20000e38 	.word	0x20000e38

08004be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return uwTick;
 8004bec:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <HAL_GetTick+0x14>)
 8004bee:	681b      	ldr	r3, [r3, #0]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000e38 	.word	0x20000e38

08004c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c08:	f7ff ffee 	bl	8004be8 <HAL_GetTick>
 8004c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d005      	beq.n	8004c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <HAL_Delay+0x44>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c26:	bf00      	nop
 8004c28:	f7ff ffde 	bl	8004be8 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d8f7      	bhi.n	8004c28 <HAL_Delay+0x28>
  {
  }
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	2000006c 	.word	0x2000006c

08004c48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e033      	b.n	8004cc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fc f994 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d118      	bne.n	8004cb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c8e:	f023 0302 	bic.w	r3, r3, #2
 8004c92:	f043 0202 	orr.w	r2, r3, #2
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f93a 	bl	8004f14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	f043 0201 	orr.w	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40
 8004cb6:	e001      	b.n	8004cbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x1c>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e105      	b.n	8004ef8 <HAL_ADC_ConfigChannel+0x228>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b09      	cmp	r3, #9
 8004cfa:	d925      	bls.n	8004d48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68d9      	ldr	r1, [r3, #12]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4413      	add	r3, r2
 8004d10:	3b1e      	subs	r3, #30
 8004d12:	2207      	movs	r2, #7
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	43da      	mvns	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	400a      	ands	r2, r1
 8004d20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68d9      	ldr	r1, [r3, #12]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	4618      	mov	r0, r3
 8004d34:	4603      	mov	r3, r0
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	4403      	add	r3, r0
 8004d3a:	3b1e      	subs	r3, #30
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	60da      	str	r2, [r3, #12]
 8004d46:	e022      	b.n	8004d8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6919      	ldr	r1, [r3, #16]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	2207      	movs	r2, #7
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43da      	mvns	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	400a      	ands	r2, r1
 8004d6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6919      	ldr	r1, [r3, #16]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4403      	add	r3, r0
 8004d84:	409a      	lsls	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b06      	cmp	r3, #6
 8004d94:	d824      	bhi.n	8004de0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	3b05      	subs	r3, #5
 8004da8:	221f      	movs	r2, #31
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43da      	mvns	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	400a      	ands	r2, r1
 8004db6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	3b05      	subs	r3, #5
 8004dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8004dde:	e04c      	b.n	8004e7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b0c      	cmp	r3, #12
 8004de6:	d824      	bhi.n	8004e32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	3b23      	subs	r3, #35	; 0x23
 8004dfa:	221f      	movs	r2, #31
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43da      	mvns	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	400a      	ands	r2, r1
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4618      	mov	r0, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	3b23      	subs	r3, #35	; 0x23
 8004e24:	fa00 f203 	lsl.w	r2, r0, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e30:	e023      	b.n	8004e7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	3b41      	subs	r3, #65	; 0x41
 8004e44:	221f      	movs	r2, #31
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	400a      	ands	r2, r1
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4618      	mov	r0, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3b41      	subs	r3, #65	; 0x41
 8004e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e7a:	4b22      	ldr	r3, [pc, #136]	; (8004f04 <HAL_ADC_ConfigChannel+0x234>)
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <HAL_ADC_ConfigChannel+0x238>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d109      	bne.n	8004e9c <HAL_ADC_ConfigChannel+0x1cc>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b12      	cmp	r3, #18
 8004e8e:	d105      	bne.n	8004e9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a19      	ldr	r2, [pc, #100]	; (8004f08 <HAL_ADC_ConfigChannel+0x238>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d123      	bne.n	8004eee <HAL_ADC_ConfigChannel+0x21e>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	d003      	beq.n	8004eb6 <HAL_ADC_ConfigChannel+0x1e6>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b11      	cmp	r3, #17
 8004eb4:	d11b      	bne.n	8004eee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b10      	cmp	r3, #16
 8004ec8:	d111      	bne.n	8004eee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004eca:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <HAL_ADC_ConfigChannel+0x23c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <HAL_ADC_ConfigChannel+0x240>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	0c9a      	lsrs	r2, r3, #18
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ee0:	e002      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f9      	bne.n	8004ee2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	40012300 	.word	0x40012300
 8004f08:	40012000 	.word	0x40012000
 8004f0c:	2000002c 	.word	0x2000002c
 8004f10:	431bde83 	.word	0x431bde83

08004f14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f1c:	4b79      	ldr	r3, [pc, #484]	; (8005104 <ADC_Init+0x1f0>)
 8004f1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	431a      	orrs	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6859      	ldr	r1, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	021a      	lsls	r2, r3, #8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6899      	ldr	r1, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	4a58      	ldr	r2, [pc, #352]	; (8005108 <ADC_Init+0x1f4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d022      	beq.n	8004ff2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6899      	ldr	r1, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6899      	ldr	r1, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	e00f      	b.n	8005012 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005010:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0202 	bic.w	r2, r2, #2
 8005020:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6899      	ldr	r1, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	7e1b      	ldrb	r3, [r3, #24]
 800502c:	005a      	lsls	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01b      	beq.n	8005078 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800504e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800505e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6859      	ldr	r1, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	3b01      	subs	r3, #1
 800506c:	035a      	lsls	r2, r3, #13
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	e007      	b.n	8005088 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005086:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005096:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	051a      	lsls	r2, r3, #20
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6899      	ldr	r1, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050ca:	025a      	lsls	r2, r3, #9
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6899      	ldr	r1, [r3, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	029a      	lsls	r2, r3, #10
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]
}
 80050f8:	bf00      	nop
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	40012300 	.word	0x40012300
 8005108:	0f000001 	.word	0x0f000001

0800510c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <__NVIC_SetPriorityGrouping+0x44>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005128:	4013      	ands	r3, r2
 800512a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800513c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800513e:	4a04      	ldr	r2, [pc, #16]	; (8005150 <__NVIC_SetPriorityGrouping+0x44>)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	60d3      	str	r3, [r2, #12]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	e000ed00 	.word	0xe000ed00

08005154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005158:	4b04      	ldr	r3, [pc, #16]	; (800516c <__NVIC_GetPriorityGrouping+0x18>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	0a1b      	lsrs	r3, r3, #8
 800515e:	f003 0307 	and.w	r3, r3, #7
}
 8005162:	4618      	mov	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	e000ed00 	.word	0xe000ed00

08005170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800517a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517e:	2b00      	cmp	r3, #0
 8005180:	db0b      	blt.n	800519a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	f003 021f 	and.w	r2, r3, #31
 8005188:	4907      	ldr	r1, [pc, #28]	; (80051a8 <__NVIC_EnableIRQ+0x38>)
 800518a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2001      	movs	r0, #1
 8005192:	fa00 f202 	lsl.w	r2, r0, r2
 8005196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	e000e100 	.word	0xe000e100

080051ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	6039      	str	r1, [r7, #0]
 80051b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	db0a      	blt.n	80051d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	490c      	ldr	r1, [pc, #48]	; (80051f8 <__NVIC_SetPriority+0x4c>)
 80051c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ca:	0112      	lsls	r2, r2, #4
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	440b      	add	r3, r1
 80051d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051d4:	e00a      	b.n	80051ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	4908      	ldr	r1, [pc, #32]	; (80051fc <__NVIC_SetPriority+0x50>)
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	3b04      	subs	r3, #4
 80051e4:	0112      	lsls	r2, r2, #4
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	440b      	add	r3, r1
 80051ea:	761a      	strb	r2, [r3, #24]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	e000e100 	.word	0xe000e100
 80051fc:	e000ed00 	.word	0xe000ed00

08005200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005200:	b480      	push	{r7}
 8005202:	b089      	sub	sp, #36	; 0x24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f1c3 0307 	rsb	r3, r3, #7
 800521a:	2b04      	cmp	r3, #4
 800521c:	bf28      	it	cs
 800521e:	2304      	movcs	r3, #4
 8005220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3304      	adds	r3, #4
 8005226:	2b06      	cmp	r3, #6
 8005228:	d902      	bls.n	8005230 <NVIC_EncodePriority+0x30>
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3b03      	subs	r3, #3
 800522e:	e000      	b.n	8005232 <NVIC_EncodePriority+0x32>
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005234:	f04f 32ff 	mov.w	r2, #4294967295
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	43da      	mvns	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	401a      	ands	r2, r3
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005248:	f04f 31ff 	mov.w	r1, #4294967295
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	fa01 f303 	lsl.w	r3, r1, r3
 8005252:	43d9      	mvns	r1, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005258:	4313      	orrs	r3, r2
         );
}
 800525a:	4618      	mov	r0, r3
 800525c:	3724      	adds	r7, #36	; 0x24
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
	...

08005268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3b01      	subs	r3, #1
 8005274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005278:	d301      	bcc.n	800527e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800527a:	2301      	movs	r3, #1
 800527c:	e00f      	b.n	800529e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800527e:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <SysTick_Config+0x40>)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3b01      	subs	r3, #1
 8005284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005286:	210f      	movs	r1, #15
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	f7ff ff8e 	bl	80051ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005290:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <SysTick_Config+0x40>)
 8005292:	2200      	movs	r2, #0
 8005294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005296:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <SysTick_Config+0x40>)
 8005298:	2207      	movs	r2, #7
 800529a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	e000e010 	.word	0xe000e010

080052ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff ff29 	bl	800510c <__NVIC_SetPriorityGrouping>
}
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b086      	sub	sp, #24
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	4603      	mov	r3, r0
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052d4:	f7ff ff3e 	bl	8005154 <__NVIC_GetPriorityGrouping>
 80052d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	6978      	ldr	r0, [r7, #20]
 80052e0:	f7ff ff8e 	bl	8005200 <NVIC_EncodePriority>
 80052e4:	4602      	mov	r2, r0
 80052e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ea:	4611      	mov	r1, r2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff ff5d 	bl	80051ac <__NVIC_SetPriority>
}
 80052f2:	bf00      	nop
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	4603      	mov	r3, r0
 8005302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff ff31 	bl	8005170 <__NVIC_EnableIRQ>
}
 800530e:	bf00      	nop
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff ffa2 	bl	8005268 <SysTick_Config>
 8005324:	4603      	mov	r3, r0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800533c:	f7ff fc54 	bl	8004be8 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e099      	b.n	8005480 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800536c:	e00f      	b.n	800538e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800536e:	f7ff fc3b 	bl	8004be8 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b05      	cmp	r3, #5
 800537a:	d908      	bls.n	800538e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2203      	movs	r2, #3
 8005386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e078      	b.n	8005480 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e8      	bne.n	800536e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4b38      	ldr	r3, [pc, #224]	; (8005488 <HAL_DMA_Init+0x158>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d107      	bne.n	80053f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	4313      	orrs	r3, r2
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0307 	bic.w	r3, r3, #7
 800540e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	2b04      	cmp	r3, #4
 8005420:	d117      	bne.n	8005452 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00e      	beq.n	8005452 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fa7b 	bl	8005930 <DMA_CheckFifoParam>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2240      	movs	r2, #64	; 0x40
 8005444:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800544e:	2301      	movs	r3, #1
 8005450:	e016      	b.n	8005480 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa32 	bl	80058c4 <DMA_CalcBaseAndBitshift>
 8005460:	4603      	mov	r3, r0
 8005462:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005468:	223f      	movs	r2, #63	; 0x3f
 800546a:	409a      	lsls	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	f010803f 	.word	0xf010803f

0800548c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800549a:	f7ff fba5 	bl	8004be8 <HAL_GetTick>
 800549e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d008      	beq.n	80054be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2280      	movs	r2, #128	; 0x80
 80054b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e052      	b.n	8005564 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0216 	bic.w	r2, r2, #22
 80054cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <HAL_DMA_Abort+0x62>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0208 	bic.w	r2, r2, #8
 80054fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800550e:	e013      	b.n	8005538 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005510:	f7ff fb6a 	bl	8004be8 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b05      	cmp	r3, #5
 800551c:	d90c      	bls.n	8005538 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2203      	movs	r2, #3
 8005528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e015      	b.n	8005564 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e4      	bne.n	8005510 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554a:	223f      	movs	r2, #63	; 0x3f
 800554c:	409a      	lsls	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d004      	beq.n	800558a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2280      	movs	r2, #128	; 0x80
 8005584:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e00c      	b.n	80055a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2205      	movs	r2, #5
 800558e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0201 	bic.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055bc:	4b92      	ldr	r3, [pc, #584]	; (8005808 <HAL_DMA_IRQHandler+0x258>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a92      	ldr	r2, [pc, #584]	; (800580c <HAL_DMA_IRQHandler+0x25c>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	0a9b      	lsrs	r3, r3, #10
 80055c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055da:	2208      	movs	r2, #8
 80055dc:	409a      	lsls	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d01a      	beq.n	800561c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d013      	beq.n	800561c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0204 	bic.w	r2, r2, #4
 8005602:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005608:	2208      	movs	r2, #8
 800560a:	409a      	lsls	r2, r3
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	f043 0201 	orr.w	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005620:	2201      	movs	r2, #1
 8005622:	409a      	lsls	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d012      	beq.n	8005652 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563e:	2201      	movs	r2, #1
 8005640:	409a      	lsls	r2, r3
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564a:	f043 0202 	orr.w	r2, r3, #2
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005656:	2204      	movs	r2, #4
 8005658:	409a      	lsls	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4013      	ands	r3, r2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d012      	beq.n	8005688 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005674:	2204      	movs	r2, #4
 8005676:	409a      	lsls	r2, r3
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005680:	f043 0204 	orr.w	r2, r3, #4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568c:	2210      	movs	r2, #16
 800568e:	409a      	lsls	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4013      	ands	r3, r2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d043      	beq.n	8005720 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d03c      	beq.n	8005720 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056aa:	2210      	movs	r2, #16
 80056ac:	409a      	lsls	r2, r3
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d018      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d108      	bne.n	80056e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d024      	beq.n	8005720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
 80056de:	e01f      	b.n	8005720 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01b      	beq.n	8005720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	4798      	blx	r3
 80056f0:	e016      	b.n	8005720 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d107      	bne.n	8005710 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0208 	bic.w	r2, r2, #8
 800570e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005724:	2220      	movs	r2, #32
 8005726:	409a      	lsls	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 808e 	beq.w	800584e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 8086 	beq.w	800584e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005746:	2220      	movs	r2, #32
 8005748:	409a      	lsls	r2, r3
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b05      	cmp	r3, #5
 8005758:	d136      	bne.n	80057c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0216 	bic.w	r2, r2, #22
 8005768:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005778:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <HAL_DMA_IRQHandler+0x1da>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0208 	bic.w	r2, r2, #8
 8005798:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579e:	223f      	movs	r2, #63	; 0x3f
 80057a0:	409a      	lsls	r2, r3
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d07d      	beq.n	80058ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
        }
        return;
 80057c6:	e078      	b.n	80058ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01c      	beq.n	8005810 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d108      	bne.n	80057f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d030      	beq.n	800584e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	4798      	blx	r3
 80057f4:	e02b      	b.n	800584e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d027      	beq.n	800584e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
 8005806:	e022      	b.n	800584e <HAL_DMA_IRQHandler+0x29e>
 8005808:	2000002c 	.word	0x2000002c
 800580c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10f      	bne.n	800583e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0210 	bic.w	r2, r2, #16
 800582c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	2b00      	cmp	r3, #0
 8005854:	d032      	beq.n	80058bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d022      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2205      	movs	r2, #5
 8005866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	3301      	adds	r3, #1
 800587e:	60bb      	str	r3, [r7, #8]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	429a      	cmp	r2, r3
 8005884:	d307      	bcc.n	8005896 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f2      	bne.n	800587a <HAL_DMA_IRQHandler+0x2ca>
 8005894:	e000      	b.n	8005898 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005896:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
 80058b8:	e000      	b.n	80058bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80058ba:	bf00      	nop
    }
  }
}
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop

080058c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	3b10      	subs	r3, #16
 80058d4:	4a14      	ldr	r2, [pc, #80]	; (8005928 <DMA_CalcBaseAndBitshift+0x64>)
 80058d6:	fba2 2303 	umull	r2, r3, r2, r3
 80058da:	091b      	lsrs	r3, r3, #4
 80058dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058de:	4a13      	ldr	r2, [pc, #76]	; (800592c <DMA_CalcBaseAndBitshift+0x68>)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d909      	bls.n	8005906 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80058fa:	f023 0303 	bic.w	r3, r3, #3
 80058fe:	1d1a      	adds	r2, r3, #4
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	659a      	str	r2, [r3, #88]	; 0x58
 8005904:	e007      	b.n	8005916 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800590e:	f023 0303 	bic.w	r3, r3, #3
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	aaaaaaab 	.word	0xaaaaaaab
 800592c:	0800df7c 	.word	0x0800df7c

08005930 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11f      	bne.n	800598a <DMA_CheckFifoParam+0x5a>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b03      	cmp	r3, #3
 800594e:	d856      	bhi.n	80059fe <DMA_CheckFifoParam+0xce>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <DMA_CheckFifoParam+0x28>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	08005969 	.word	0x08005969
 800595c:	0800597b 	.word	0x0800597b
 8005960:	08005969 	.word	0x08005969
 8005964:	080059ff 	.word	0x080059ff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d046      	beq.n	8005a02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005978:	e043      	b.n	8005a02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005982:	d140      	bne.n	8005a06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005988:	e03d      	b.n	8005a06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005992:	d121      	bne.n	80059d8 <DMA_CheckFifoParam+0xa8>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d837      	bhi.n	8005a0a <DMA_CheckFifoParam+0xda>
 800599a:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <DMA_CheckFifoParam+0x70>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059b1 	.word	0x080059b1
 80059a4:	080059b7 	.word	0x080059b7
 80059a8:	080059b1 	.word	0x080059b1
 80059ac:	080059c9 	.word	0x080059c9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
      break;
 80059b4:	e030      	b.n	8005a18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d025      	beq.n	8005a0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059c6:	e022      	b.n	8005a0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059d0:	d11f      	bne.n	8005a12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059d6:	e01c      	b.n	8005a12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d903      	bls.n	80059e6 <DMA_CheckFifoParam+0xb6>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d003      	beq.n	80059ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059e4:	e018      	b.n	8005a18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	73fb      	strb	r3, [r7, #15]
      break;
 80059ea:	e015      	b.n	8005a18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00e      	beq.n	8005a16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
      break;
 80059fc:	e00b      	b.n	8005a16 <DMA_CheckFifoParam+0xe6>
      break;
 80059fe:	bf00      	nop
 8005a00:	e00a      	b.n	8005a18 <DMA_CheckFifoParam+0xe8>
      break;
 8005a02:	bf00      	nop
 8005a04:	e008      	b.n	8005a18 <DMA_CheckFifoParam+0xe8>
      break;
 8005a06:	bf00      	nop
 8005a08:	e006      	b.n	8005a18 <DMA_CheckFifoParam+0xe8>
      break;
 8005a0a:	bf00      	nop
 8005a0c:	e004      	b.n	8005a18 <DMA_CheckFifoParam+0xe8>
      break;
 8005a0e:	bf00      	nop
 8005a10:	e002      	b.n	8005a18 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a12:	bf00      	nop
 8005a14:	e000      	b.n	8005a18 <DMA_CheckFifoParam+0xe8>
      break;
 8005a16:	bf00      	nop
    }
  } 
  
  return status; 
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop

08005a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b089      	sub	sp, #36	; 0x24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	e16b      	b.n	8005d1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a44:	2201      	movs	r2, #1
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4013      	ands	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	f040 815a 	bne.w	8005d16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d005      	beq.n	8005a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d130      	bne.n	8005adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	2203      	movs	r2, #3
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4013      	ands	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	f003 0201 	and.w	r2, r3, #1
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f003 0303 	and.w	r3, r3, #3
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d017      	beq.n	8005b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	2203      	movs	r2, #3
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	43db      	mvns	r3, r3
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	4013      	ands	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d123      	bne.n	8005b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	08da      	lsrs	r2, r3, #3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3208      	adds	r2, #8
 8005b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	220f      	movs	r2, #15
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	43db      	mvns	r3, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4013      	ands	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	08da      	lsrs	r2, r3, #3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3208      	adds	r2, #8
 8005b66:	69b9      	ldr	r1, [r7, #24]
 8005b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	2203      	movs	r2, #3
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	4013      	ands	r3, r2
 8005b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f003 0203 	and.w	r2, r3, #3
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 80b4 	beq.w	8005d16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	4b60      	ldr	r3, [pc, #384]	; (8005d34 <HAL_GPIO_Init+0x30c>)
 8005bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb6:	4a5f      	ldr	r2, [pc, #380]	; (8005d34 <HAL_GPIO_Init+0x30c>)
 8005bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8005bbe:	4b5d      	ldr	r3, [pc, #372]	; (8005d34 <HAL_GPIO_Init+0x30c>)
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bca:	4a5b      	ldr	r2, [pc, #364]	; (8005d38 <HAL_GPIO_Init+0x310>)
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	3302      	adds	r3, #2
 8005bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	220f      	movs	r2, #15
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	43db      	mvns	r3, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4013      	ands	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a52      	ldr	r2, [pc, #328]	; (8005d3c <HAL_GPIO_Init+0x314>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d02b      	beq.n	8005c4e <HAL_GPIO_Init+0x226>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a51      	ldr	r2, [pc, #324]	; (8005d40 <HAL_GPIO_Init+0x318>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d025      	beq.n	8005c4a <HAL_GPIO_Init+0x222>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a50      	ldr	r2, [pc, #320]	; (8005d44 <HAL_GPIO_Init+0x31c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01f      	beq.n	8005c46 <HAL_GPIO_Init+0x21e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a4f      	ldr	r2, [pc, #316]	; (8005d48 <HAL_GPIO_Init+0x320>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d019      	beq.n	8005c42 <HAL_GPIO_Init+0x21a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a4e      	ldr	r2, [pc, #312]	; (8005d4c <HAL_GPIO_Init+0x324>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_GPIO_Init+0x216>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a4d      	ldr	r2, [pc, #308]	; (8005d50 <HAL_GPIO_Init+0x328>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00d      	beq.n	8005c3a <HAL_GPIO_Init+0x212>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a4c      	ldr	r2, [pc, #304]	; (8005d54 <HAL_GPIO_Init+0x32c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d007      	beq.n	8005c36 <HAL_GPIO_Init+0x20e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a4b      	ldr	r2, [pc, #300]	; (8005d58 <HAL_GPIO_Init+0x330>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d101      	bne.n	8005c32 <HAL_GPIO_Init+0x20a>
 8005c2e:	2307      	movs	r3, #7
 8005c30:	e00e      	b.n	8005c50 <HAL_GPIO_Init+0x228>
 8005c32:	2308      	movs	r3, #8
 8005c34:	e00c      	b.n	8005c50 <HAL_GPIO_Init+0x228>
 8005c36:	2306      	movs	r3, #6
 8005c38:	e00a      	b.n	8005c50 <HAL_GPIO_Init+0x228>
 8005c3a:	2305      	movs	r3, #5
 8005c3c:	e008      	b.n	8005c50 <HAL_GPIO_Init+0x228>
 8005c3e:	2304      	movs	r3, #4
 8005c40:	e006      	b.n	8005c50 <HAL_GPIO_Init+0x228>
 8005c42:	2303      	movs	r3, #3
 8005c44:	e004      	b.n	8005c50 <HAL_GPIO_Init+0x228>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e002      	b.n	8005c50 <HAL_GPIO_Init+0x228>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <HAL_GPIO_Init+0x228>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	f002 0203 	and.w	r2, r2, #3
 8005c56:	0092      	lsls	r2, r2, #2
 8005c58:	4093      	lsls	r3, r2
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c60:	4935      	ldr	r1, [pc, #212]	; (8005d38 <HAL_GPIO_Init+0x310>)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	089b      	lsrs	r3, r3, #2
 8005c66:	3302      	adds	r3, #2
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c6e:	4b3b      	ldr	r3, [pc, #236]	; (8005d5c <HAL_GPIO_Init+0x334>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	43db      	mvns	r3, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c92:	4a32      	ldr	r2, [pc, #200]	; (8005d5c <HAL_GPIO_Init+0x334>)
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c98:	4b30      	ldr	r3, [pc, #192]	; (8005d5c <HAL_GPIO_Init+0x334>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cbc:	4a27      	ldr	r2, [pc, #156]	; (8005d5c <HAL_GPIO_Init+0x334>)
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cc2:	4b26      	ldr	r3, [pc, #152]	; (8005d5c <HAL_GPIO_Init+0x334>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	43db      	mvns	r3, r3
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ce6:	4a1d      	ldr	r2, [pc, #116]	; (8005d5c <HAL_GPIO_Init+0x334>)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cec:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <HAL_GPIO_Init+0x334>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d10:	4a12      	ldr	r2, [pc, #72]	; (8005d5c <HAL_GPIO_Init+0x334>)
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2b0f      	cmp	r3, #15
 8005d20:	f67f ae90 	bls.w	8005a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop
 8005d28:	3724      	adds	r7, #36	; 0x24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40023800 	.word	0x40023800
 8005d38:	40013800 	.word	0x40013800
 8005d3c:	40020000 	.word	0x40020000
 8005d40:	40020400 	.word	0x40020400
 8005d44:	40020800 	.word	0x40020800
 8005d48:	40020c00 	.word	0x40020c00
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	40021400 	.word	0x40021400
 8005d54:	40021800 	.word	0x40021800
 8005d58:	40021c00 	.word	0x40021c00
 8005d5c:	40013c00 	.word	0x40013c00

08005d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	887b      	ldrh	r3, [r7, #2]
 8005d72:	4013      	ands	r3, r2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	73fb      	strb	r3, [r7, #15]
 8005d7c:	e001      	b.n	8005d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	807b      	strh	r3, [r7, #2]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005da0:	787b      	ldrb	r3, [r7, #1]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005da6:	887a      	ldrh	r2, [r7, #2]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005dac:	e003      	b.n	8005db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005dae:	887b      	ldrh	r3, [r7, #2]
 8005db0:	041a      	lsls	r2, r3, #16
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	619a      	str	r2, [r3, #24]
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e12b      	b.n	800602e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb fd20 	bl	8001830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2224      	movs	r2, #36	; 0x24
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0201 	bic.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e28:	f001 fbd8 	bl	80075dc <HAL_RCC_GetPCLK1Freq>
 8005e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	4a81      	ldr	r2, [pc, #516]	; (8006038 <HAL_I2C_Init+0x274>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d807      	bhi.n	8005e48 <HAL_I2C_Init+0x84>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a80      	ldr	r2, [pc, #512]	; (800603c <HAL_I2C_Init+0x278>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	bf94      	ite	ls
 8005e40:	2301      	movls	r3, #1
 8005e42:	2300      	movhi	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	e006      	b.n	8005e56 <HAL_I2C_Init+0x92>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a7d      	ldr	r2, [pc, #500]	; (8006040 <HAL_I2C_Init+0x27c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	bf94      	ite	ls
 8005e50:	2301      	movls	r3, #1
 8005e52:	2300      	movhi	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e0e7      	b.n	800602e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4a78      	ldr	r2, [pc, #480]	; (8006044 <HAL_I2C_Init+0x280>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	0c9b      	lsrs	r3, r3, #18
 8005e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4a6a      	ldr	r2, [pc, #424]	; (8006038 <HAL_I2C_Init+0x274>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d802      	bhi.n	8005e98 <HAL_I2C_Init+0xd4>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	3301      	adds	r3, #1
 8005e96:	e009      	b.n	8005eac <HAL_I2C_Init+0xe8>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	4a69      	ldr	r2, [pc, #420]	; (8006048 <HAL_I2C_Init+0x284>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	099b      	lsrs	r3, r3, #6
 8005eaa:	3301      	adds	r3, #1
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	495c      	ldr	r1, [pc, #368]	; (8006038 <HAL_I2C_Init+0x274>)
 8005ec8:	428b      	cmp	r3, r1
 8005eca:	d819      	bhi.n	8005f00 <HAL_I2C_Init+0x13c>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	1e59      	subs	r1, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eda:	1c59      	adds	r1, r3, #1
 8005edc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ee0:	400b      	ands	r3, r1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <HAL_I2C_Init+0x138>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1e59      	subs	r1, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005efa:	e051      	b.n	8005fa0 <HAL_I2C_Init+0x1dc>
 8005efc:	2304      	movs	r3, #4
 8005efe:	e04f      	b.n	8005fa0 <HAL_I2C_Init+0x1dc>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d111      	bne.n	8005f2c <HAL_I2C_Init+0x168>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1e58      	subs	r0, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6859      	ldr	r1, [r3, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	440b      	add	r3, r1
 8005f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf0c      	ite	eq
 8005f24:	2301      	moveq	r3, #1
 8005f26:	2300      	movne	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	e012      	b.n	8005f52 <HAL_I2C_Init+0x18e>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1e58      	subs	r0, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6859      	ldr	r1, [r3, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	0099      	lsls	r1, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f42:	3301      	adds	r3, #1
 8005f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_I2C_Init+0x196>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e022      	b.n	8005fa0 <HAL_I2C_Init+0x1dc>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10e      	bne.n	8005f80 <HAL_I2C_Init+0x1bc>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1e58      	subs	r0, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	440b      	add	r3, r1
 8005f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f74:	3301      	adds	r3, #1
 8005f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7e:	e00f      	b.n	8005fa0 <HAL_I2C_Init+0x1dc>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1e58      	subs	r0, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6859      	ldr	r1, [r3, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	0099      	lsls	r1, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f96:	3301      	adds	r3, #1
 8005f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	6809      	ldr	r1, [r1, #0]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6911      	ldr	r1, [r2, #16]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68d2      	ldr	r2, [r2, #12]
 8005fda:	4311      	orrs	r1, r2
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	000186a0 	.word	0x000186a0
 800603c:	001e847f 	.word	0x001e847f
 8006040:	003d08ff 	.word	0x003d08ff
 8006044:	431bde83 	.word	0x431bde83
 8006048:	10624dd3 	.word	0x10624dd3

0800604c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	4608      	mov	r0, r1
 8006056:	4611      	mov	r1, r2
 8006058:	461a      	mov	r2, r3
 800605a:	4603      	mov	r3, r0
 800605c:	817b      	strh	r3, [r7, #10]
 800605e:	460b      	mov	r3, r1
 8006060:	813b      	strh	r3, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006066:	f7fe fdbf 	bl	8004be8 <HAL_GetTick>
 800606a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b20      	cmp	r3, #32
 8006076:	f040 80d9 	bne.w	800622c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	2319      	movs	r3, #25
 8006080:	2201      	movs	r2, #1
 8006082:	496d      	ldr	r1, [pc, #436]	; (8006238 <HAL_I2C_Mem_Write+0x1ec>)
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fc7f 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006090:	2302      	movs	r3, #2
 8006092:	e0cc      	b.n	800622e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_I2C_Mem_Write+0x56>
 800609e:	2302      	movs	r3, #2
 80060a0:	e0c5      	b.n	800622e <HAL_I2C_Mem_Write+0x1e2>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d007      	beq.n	80060c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2221      	movs	r2, #33	; 0x21
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2240      	movs	r2, #64	; 0x40
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a3a      	ldr	r2, [r7, #32]
 80060f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4a4d      	ldr	r2, [pc, #308]	; (800623c <HAL_I2C_Mem_Write+0x1f0>)
 8006108:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800610a:	88f8      	ldrh	r0, [r7, #6]
 800610c:	893a      	ldrh	r2, [r7, #8]
 800610e:	8979      	ldrh	r1, [r7, #10]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	4603      	mov	r3, r0
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 fab6 	bl	800668c <I2C_RequestMemoryWrite>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d052      	beq.n	80061cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e081      	b.n	800622e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fd00 	bl	8006b34 <I2C_WaitOnTXEFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00d      	beq.n	8006156 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	2b04      	cmp	r3, #4
 8006140:	d107      	bne.n	8006152 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006150:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e06b      	b.n	800622e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	781a      	ldrb	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b04      	cmp	r3, #4
 8006192:	d11b      	bne.n	80061cc <HAL_I2C_Mem_Write+0x180>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	d017      	beq.n	80061cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1aa      	bne.n	800612a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 fcec 	bl	8006bb6 <I2C_WaitOnBTFFlagUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00d      	beq.n	8006200 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d107      	bne.n	80061fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e016      	b.n	800622e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800620e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
  }
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	00100002 	.word	0x00100002
 800623c:	ffff0000 	.word	0xffff0000

08006240 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08c      	sub	sp, #48	; 0x30
 8006244:	af02      	add	r7, sp, #8
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	4608      	mov	r0, r1
 800624a:	4611      	mov	r1, r2
 800624c:	461a      	mov	r2, r3
 800624e:	4603      	mov	r3, r0
 8006250:	817b      	strh	r3, [r7, #10]
 8006252:	460b      	mov	r3, r1
 8006254:	813b      	strh	r3, [r7, #8]
 8006256:	4613      	mov	r3, r2
 8006258:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800625a:	f7fe fcc5 	bl	8004be8 <HAL_GetTick>
 800625e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b20      	cmp	r3, #32
 800626a:	f040 8208 	bne.w	800667e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	2319      	movs	r3, #25
 8006274:	2201      	movs	r2, #1
 8006276:	497b      	ldr	r1, [pc, #492]	; (8006464 <HAL_I2C_Mem_Read+0x224>)
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fb85 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006284:	2302      	movs	r3, #2
 8006286:	e1fb      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_I2C_Mem_Read+0x56>
 8006292:	2302      	movs	r3, #2
 8006294:	e1f4      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d007      	beq.n	80062bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2222      	movs	r2, #34	; 0x22
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2240      	movs	r2, #64	; 0x40
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80062ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4a5b      	ldr	r2, [pc, #364]	; (8006468 <HAL_I2C_Mem_Read+0x228>)
 80062fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062fe:	88f8      	ldrh	r0, [r7, #6]
 8006300:	893a      	ldrh	r2, [r7, #8]
 8006302:	8979      	ldrh	r1, [r7, #10]
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	4603      	mov	r3, r0
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 fa52 	bl	80067b8 <I2C_RequestMemoryRead>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e1b0      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006322:	2b00      	cmp	r3, #0
 8006324:	d113      	bne.n	800634e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006326:	2300      	movs	r3, #0
 8006328:	623b      	str	r3, [r7, #32]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	623b      	str	r3, [r7, #32]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	623b      	str	r3, [r7, #32]
 800633a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	e184      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006352:	2b01      	cmp	r3, #1
 8006354:	d11b      	bne.n	800638e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006364:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006366:	2300      	movs	r3, #0
 8006368:	61fb      	str	r3, [r7, #28]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	e164      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006392:	2b02      	cmp	r3, #2
 8006394:	d11b      	bne.n	80063ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b6:	2300      	movs	r3, #0
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	e144      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80063e4:	e138      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	f200 80f1 	bhi.w	80065d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d123      	bne.n	8006440 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fc1b 	bl	8006c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e139      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006428:	3b01      	subs	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800643e:	e10b      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006444:	2b02      	cmp	r3, #2
 8006446:	d14e      	bne.n	80064e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	2200      	movs	r2, #0
 8006450:	4906      	ldr	r1, [pc, #24]	; (800646c <HAL_I2C_Mem_Read+0x22c>)
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 fa98 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e10e      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
 8006462:	bf00      	nop
 8006464:	00100002 	.word	0x00100002
 8006468:	ffff0000 	.word	0xffff0000
 800646c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691a      	ldr	r2, [r3, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064e4:	e0b8      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ec:	2200      	movs	r2, #0
 80064ee:	4966      	ldr	r1, [pc, #408]	; (8006688 <HAL_I2C_Mem_Read+0x448>)
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 fa49 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0bf      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800650e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	2200      	movs	r2, #0
 800654a:	494f      	ldr	r1, [pc, #316]	; (8006688 <HAL_I2C_Mem_Read+0x448>)
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fa1b 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e091      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800656a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065d0:	e042      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 fb2e 	bl	8006c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e04c      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006602:	3b01      	subs	r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	2b04      	cmp	r3, #4
 8006624:	d118      	bne.n	8006658 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	2b00      	cmp	r3, #0
 800665e:	f47f aec2 	bne.w	80063e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2220      	movs	r2, #32
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e000      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800667e:	2302      	movs	r3, #2
  }
}
 8006680:	4618      	mov	r0, r3
 8006682:	3728      	adds	r7, #40	; 0x28
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	00010004 	.word	0x00010004

0800668c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	4608      	mov	r0, r1
 8006696:	4611      	mov	r1, r2
 8006698:	461a      	mov	r2, r3
 800669a:	4603      	mov	r3, r0
 800669c:	817b      	strh	r3, [r7, #10]
 800669e:	460b      	mov	r3, r1
 80066a0:	813b      	strh	r3, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	2200      	movs	r2, #0
 80066be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 f960 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00d      	beq.n	80066ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066dc:	d103      	bne.n	80066e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e05f      	b.n	80067aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066ea:	897b      	ldrh	r3, [r7, #10]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	6a3a      	ldr	r2, [r7, #32]
 80066fe:	492d      	ldr	r1, [pc, #180]	; (80067b4 <I2C_RequestMemoryWrite+0x128>)
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f998 	bl	8006a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e04c      	b.n	80067aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006728:	6a39      	ldr	r1, [r7, #32]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 fa02 	bl	8006b34 <I2C_WaitOnTXEFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00d      	beq.n	8006752 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	2b04      	cmp	r3, #4
 800673c:	d107      	bne.n	800674e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800674c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e02b      	b.n	80067aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006752:	88fb      	ldrh	r3, [r7, #6]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d105      	bne.n	8006764 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006758:	893b      	ldrh	r3, [r7, #8]
 800675a:	b2da      	uxtb	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	611a      	str	r2, [r3, #16]
 8006762:	e021      	b.n	80067a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006764:	893b      	ldrh	r3, [r7, #8]
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	b29b      	uxth	r3, r3
 800676a:	b2da      	uxtb	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006774:	6a39      	ldr	r1, [r7, #32]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f9dc 	bl	8006b34 <I2C_WaitOnTXEFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00d      	beq.n	800679e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	2b04      	cmp	r3, #4
 8006788:	d107      	bne.n	800679a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006798:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e005      	b.n	80067aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800679e:	893b      	ldrh	r3, [r7, #8]
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	00010002 	.word	0x00010002

080067b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	4608      	mov	r0, r1
 80067c2:	4611      	mov	r1, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	4603      	mov	r3, r0
 80067c8:	817b      	strh	r3, [r7, #10]
 80067ca:	460b      	mov	r3, r1
 80067cc:	813b      	strh	r3, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 f8c2 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00d      	beq.n	8006826 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006818:	d103      	bne.n	8006822 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006820:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e0aa      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006826:	897b      	ldrh	r3, [r7, #10]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006834:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	6a3a      	ldr	r2, [r7, #32]
 800683a:	4952      	ldr	r1, [pc, #328]	; (8006984 <I2C_RequestMemoryRead+0x1cc>)
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f8fa 	bl	8006a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e097      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684c:	2300      	movs	r3, #0
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006864:	6a39      	ldr	r1, [r7, #32]
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f964 	bl	8006b34 <I2C_WaitOnTXEFlagUntilTimeout>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00d      	beq.n	800688e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	2b04      	cmp	r3, #4
 8006878:	d107      	bne.n	800688a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006888:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e076      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d105      	bne.n	80068a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006894:	893b      	ldrh	r3, [r7, #8]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	611a      	str	r2, [r3, #16]
 800689e:	e021      	b.n	80068e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068a0:	893b      	ldrh	r3, [r7, #8]
 80068a2:	0a1b      	lsrs	r3, r3, #8
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b0:	6a39      	ldr	r1, [r7, #32]
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 f93e 	bl	8006b34 <I2C_WaitOnTXEFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00d      	beq.n	80068da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d107      	bne.n	80068d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e050      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068da:	893b      	ldrh	r3, [r7, #8]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e6:	6a39      	ldr	r1, [r7, #32]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f923 	bl	8006b34 <I2C_WaitOnTXEFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00d      	beq.n	8006910 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d107      	bne.n	800690c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e035      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800691e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	2200      	movs	r2, #0
 8006928:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f82b 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00d      	beq.n	8006954 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006946:	d103      	bne.n	8006950 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800694e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e013      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006954:	897b      	ldrh	r3, [r7, #10]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	b2da      	uxtb	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	6a3a      	ldr	r2, [r7, #32]
 8006968:	4906      	ldr	r1, [pc, #24]	; (8006984 <I2C_RequestMemoryRead+0x1cc>)
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f863 	bl	8006a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	00010002 	.word	0x00010002

08006988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	4613      	mov	r3, r2
 8006996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006998:	e025      	b.n	80069e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a0:	d021      	beq.n	80069e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069a2:	f7fe f921 	bl	8004be8 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d302      	bcc.n	80069b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d116      	bne.n	80069e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	f043 0220 	orr.w	r2, r3, #32
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e023      	b.n	8006a2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d10d      	bne.n	8006a0c <I2C_WaitOnFlagUntilTimeout+0x84>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	43da      	mvns	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4013      	ands	r3, r2
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bf0c      	ite	eq
 8006a02:	2301      	moveq	r3, #1
 8006a04:	2300      	movne	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	e00c      	b.n	8006a26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	43da      	mvns	r2, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4013      	ands	r3, r2
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bf0c      	ite	eq
 8006a1e:	2301      	moveq	r3, #1
 8006a20:	2300      	movne	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d0b6      	beq.n	800699a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a44:	e051      	b.n	8006aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a54:	d123      	bne.n	8006a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f043 0204 	orr.w	r2, r3, #4
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e046      	b.n	8006b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa4:	d021      	beq.n	8006aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa6:	f7fe f89f 	bl	8004be8 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d302      	bcc.n	8006abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d116      	bne.n	8006aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e020      	b.n	8006b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d10c      	bne.n	8006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	43da      	mvns	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4013      	ands	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bf14      	ite	ne
 8006b06:	2301      	movne	r3, #1
 8006b08:	2300      	moveq	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	e00b      	b.n	8006b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	43da      	mvns	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bf14      	ite	ne
 8006b20:	2301      	movne	r3, #1
 8006b22:	2300      	moveq	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d18d      	bne.n	8006a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b40:	e02d      	b.n	8006b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 f8ce 	bl	8006ce4 <I2C_IsAcknowledgeFailed>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e02d      	b.n	8006bae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b58:	d021      	beq.n	8006b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b5a:	f7fe f845 	bl	8004be8 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d302      	bcc.n	8006b70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d116      	bne.n	8006b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	f043 0220 	orr.w	r2, r3, #32
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e007      	b.n	8006bae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba8:	2b80      	cmp	r3, #128	; 0x80
 8006baa:	d1ca      	bne.n	8006b42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bc2:	e02d      	b.n	8006c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f88d 	bl	8006ce4 <I2C_IsAcknowledgeFailed>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e02d      	b.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d021      	beq.n	8006c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bdc:	f7fe f804 	bl	8004be8 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d302      	bcc.n	8006bf2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d116      	bne.n	8006c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	f043 0220 	orr.w	r2, r3, #32
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e007      	b.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d1ca      	bne.n	8006bc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c44:	e042      	b.n	8006ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b10      	cmp	r3, #16
 8006c52:	d119      	bne.n	8006c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f06f 0210 	mvn.w	r2, #16
 8006c5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e029      	b.n	8006cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c88:	f7fd ffae 	bl	8004be8 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d302      	bcc.n	8006c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d116      	bne.n	8006ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	f043 0220 	orr.w	r2, r3, #32
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e007      	b.n	8006cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d1b5      	bne.n	8006c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfa:	d11b      	bne.n	8006d34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	f043 0204 	orr.w	r2, r3, #4
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
	...

08006d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e264      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d075      	beq.n	8006e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d62:	4ba3      	ldr	r3, [pc, #652]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 030c 	and.w	r3, r3, #12
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d00c      	beq.n	8006d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d6e:	4ba0      	ldr	r3, [pc, #640]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d112      	bne.n	8006da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d7a:	4b9d      	ldr	r3, [pc, #628]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d86:	d10b      	bne.n	8006da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d88:	4b99      	ldr	r3, [pc, #612]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d05b      	beq.n	8006e4c <HAL_RCC_OscConfig+0x108>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d157      	bne.n	8006e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e23f      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da8:	d106      	bne.n	8006db8 <HAL_RCC_OscConfig+0x74>
 8006daa:	4b91      	ldr	r3, [pc, #580]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a90      	ldr	r2, [pc, #576]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	e01d      	b.n	8006df4 <HAL_RCC_OscConfig+0xb0>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dc0:	d10c      	bne.n	8006ddc <HAL_RCC_OscConfig+0x98>
 8006dc2:	4b8b      	ldr	r3, [pc, #556]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a8a      	ldr	r2, [pc, #552]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	4b88      	ldr	r3, [pc, #544]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a87      	ldr	r2, [pc, #540]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e00b      	b.n	8006df4 <HAL_RCC_OscConfig+0xb0>
 8006ddc:	4b84      	ldr	r3, [pc, #528]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a83      	ldr	r2, [pc, #524]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	4b81      	ldr	r3, [pc, #516]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a80      	ldr	r2, [pc, #512]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d013      	beq.n	8006e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfc:	f7fd fef4 	bl	8004be8 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e04:	f7fd fef0 	bl	8004be8 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b64      	cmp	r3, #100	; 0x64
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e204      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e16:	4b76      	ldr	r3, [pc, #472]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d0f0      	beq.n	8006e04 <HAL_RCC_OscConfig+0xc0>
 8006e22:	e014      	b.n	8006e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e24:	f7fd fee0 	bl	8004be8 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e2c:	f7fd fedc 	bl	8004be8 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b64      	cmp	r3, #100	; 0x64
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e1f0      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e3e:	4b6c      	ldr	r3, [pc, #432]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1f0      	bne.n	8006e2c <HAL_RCC_OscConfig+0xe8>
 8006e4a:	e000      	b.n	8006e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d063      	beq.n	8006f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e5a:	4b65      	ldr	r3, [pc, #404]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 030c 	and.w	r3, r3, #12
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e66:	4b62      	ldr	r3, [pc, #392]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d11c      	bne.n	8006eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e72:	4b5f      	ldr	r3, [pc, #380]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d116      	bne.n	8006eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e7e:	4b5c      	ldr	r3, [pc, #368]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HAL_RCC_OscConfig+0x152>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d001      	beq.n	8006e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e1c4      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e96:	4b56      	ldr	r3, [pc, #344]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	4952      	ldr	r1, [pc, #328]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eaa:	e03a      	b.n	8006f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d020      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006eb4:	4b4f      	ldr	r3, [pc, #316]	; (8006ff4 <HAL_RCC_OscConfig+0x2b0>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eba:	f7fd fe95 	bl	8004be8 <HAL_GetTick>
 8006ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ec2:	f7fd fe91 	bl	8004be8 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e1a5      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed4:	4b46      	ldr	r3, [pc, #280]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0f0      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee0:	4b43      	ldr	r3, [pc, #268]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	4940      	ldr	r1, [pc, #256]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	600b      	str	r3, [r1, #0]
 8006ef4:	e015      	b.n	8006f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ef6:	4b3f      	ldr	r3, [pc, #252]	; (8006ff4 <HAL_RCC_OscConfig+0x2b0>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efc:	f7fd fe74 	bl	8004be8 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f04:	f7fd fe70 	bl	8004be8 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e184      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f16:	4b36      	ldr	r3, [pc, #216]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f0      	bne.n	8006f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d030      	beq.n	8006f90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d016      	beq.n	8006f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f36:	4b30      	ldr	r3, [pc, #192]	; (8006ff8 <HAL_RCC_OscConfig+0x2b4>)
 8006f38:	2201      	movs	r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f3c:	f7fd fe54 	bl	8004be8 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f44:	f7fd fe50 	bl	8004be8 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e164      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f56:	4b26      	ldr	r3, [pc, #152]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0f0      	beq.n	8006f44 <HAL_RCC_OscConfig+0x200>
 8006f62:	e015      	b.n	8006f90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f64:	4b24      	ldr	r3, [pc, #144]	; (8006ff8 <HAL_RCC_OscConfig+0x2b4>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f6a:	f7fd fe3d 	bl	8004be8 <HAL_GetTick>
 8006f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f70:	e008      	b.n	8006f84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f72:	f7fd fe39 	bl	8004be8 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d901      	bls.n	8006f84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e14d      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f84:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1f0      	bne.n	8006f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 80a0 	beq.w	80070de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fa2:	4b13      	ldr	r3, [pc, #76]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10f      	bne.n	8006fce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60bb      	str	r3, [r7, #8]
 8006fb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	4a0e      	ldr	r2, [pc, #56]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006fbe:	4b0c      	ldr	r3, [pc, #48]	; (8006ff0 <HAL_RCC_OscConfig+0x2ac>)
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc6:	60bb      	str	r3, [r7, #8]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fce:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <HAL_RCC_OscConfig+0x2b8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d121      	bne.n	800701e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fda:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <HAL_RCC_OscConfig+0x2b8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a07      	ldr	r2, [pc, #28]	; (8006ffc <HAL_RCC_OscConfig+0x2b8>)
 8006fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fe6:	f7fd fdff 	bl	8004be8 <HAL_GetTick>
 8006fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fec:	e011      	b.n	8007012 <HAL_RCC_OscConfig+0x2ce>
 8006fee:	bf00      	nop
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	42470000 	.word	0x42470000
 8006ff8:	42470e80 	.word	0x42470e80
 8006ffc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007000:	f7fd fdf2 	bl	8004be8 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e106      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007012:	4b85      	ldr	r3, [pc, #532]	; (8007228 <HAL_RCC_OscConfig+0x4e4>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f0      	beq.n	8007000 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d106      	bne.n	8007034 <HAL_RCC_OscConfig+0x2f0>
 8007026:	4b81      	ldr	r3, [pc, #516]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702a:	4a80      	ldr	r2, [pc, #512]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 800702c:	f043 0301 	orr.w	r3, r3, #1
 8007030:	6713      	str	r3, [r2, #112]	; 0x70
 8007032:	e01c      	b.n	800706e <HAL_RCC_OscConfig+0x32a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b05      	cmp	r3, #5
 800703a:	d10c      	bne.n	8007056 <HAL_RCC_OscConfig+0x312>
 800703c:	4b7b      	ldr	r3, [pc, #492]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 800703e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007040:	4a7a      	ldr	r2, [pc, #488]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 8007042:	f043 0304 	orr.w	r3, r3, #4
 8007046:	6713      	str	r3, [r2, #112]	; 0x70
 8007048:	4b78      	ldr	r3, [pc, #480]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 800704a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704c:	4a77      	ldr	r2, [pc, #476]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 800704e:	f043 0301 	orr.w	r3, r3, #1
 8007052:	6713      	str	r3, [r2, #112]	; 0x70
 8007054:	e00b      	b.n	800706e <HAL_RCC_OscConfig+0x32a>
 8007056:	4b75      	ldr	r3, [pc, #468]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 8007058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705a:	4a74      	ldr	r2, [pc, #464]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	6713      	str	r3, [r2, #112]	; 0x70
 8007062:	4b72      	ldr	r3, [pc, #456]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	4a71      	ldr	r2, [pc, #452]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 8007068:	f023 0304 	bic.w	r3, r3, #4
 800706c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d015      	beq.n	80070a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007076:	f7fd fdb7 	bl	8004be8 <HAL_GetTick>
 800707a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800707c:	e00a      	b.n	8007094 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800707e:	f7fd fdb3 	bl	8004be8 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	f241 3288 	movw	r2, #5000	; 0x1388
 800708c:	4293      	cmp	r3, r2
 800708e:	d901      	bls.n	8007094 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e0c5      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007094:	4b65      	ldr	r3, [pc, #404]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 8007096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0ee      	beq.n	800707e <HAL_RCC_OscConfig+0x33a>
 80070a0:	e014      	b.n	80070cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070a2:	f7fd fda1 	bl	8004be8 <HAL_GetTick>
 80070a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070a8:	e00a      	b.n	80070c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070aa:	f7fd fd9d 	bl	8004be8 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e0af      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070c0:	4b5a      	ldr	r3, [pc, #360]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 80070c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1ee      	bne.n	80070aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d105      	bne.n	80070de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070d2:	4b56      	ldr	r3, [pc, #344]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	4a55      	ldr	r2, [pc, #340]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 80070d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 809b 	beq.w	800721e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070e8:	4b50      	ldr	r3, [pc, #320]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 030c 	and.w	r3, r3, #12
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d05c      	beq.n	80071ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d141      	bne.n	8007180 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070fc:	4b4c      	ldr	r3, [pc, #304]	; (8007230 <HAL_RCC_OscConfig+0x4ec>)
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007102:	f7fd fd71 	bl	8004be8 <HAL_GetTick>
 8007106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007108:	e008      	b.n	800711c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800710a:	f7fd fd6d 	bl	8004be8 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d901      	bls.n	800711c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e081      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800711c:	4b43      	ldr	r3, [pc, #268]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1f0      	bne.n	800710a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	69da      	ldr	r2, [r3, #28]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	019b      	lsls	r3, r3, #6
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713e:	085b      	lsrs	r3, r3, #1
 8007140:	3b01      	subs	r3, #1
 8007142:	041b      	lsls	r3, r3, #16
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714a:	061b      	lsls	r3, r3, #24
 800714c:	4937      	ldr	r1, [pc, #220]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 800714e:	4313      	orrs	r3, r2
 8007150:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007152:	4b37      	ldr	r3, [pc, #220]	; (8007230 <HAL_RCC_OscConfig+0x4ec>)
 8007154:	2201      	movs	r2, #1
 8007156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007158:	f7fd fd46 	bl	8004be8 <HAL_GetTick>
 800715c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800715e:	e008      	b.n	8007172 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007160:	f7fd fd42 	bl	8004be8 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e056      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007172:	4b2e      	ldr	r3, [pc, #184]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0f0      	beq.n	8007160 <HAL_RCC_OscConfig+0x41c>
 800717e:	e04e      	b.n	800721e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007180:	4b2b      	ldr	r3, [pc, #172]	; (8007230 <HAL_RCC_OscConfig+0x4ec>)
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007186:	f7fd fd2f 	bl	8004be8 <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800718e:	f7fd fd2b 	bl	8004be8 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e03f      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071a0:	4b22      	ldr	r3, [pc, #136]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1f0      	bne.n	800718e <HAL_RCC_OscConfig+0x44a>
 80071ac:	e037      	b.n	800721e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e032      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071ba:	4b1c      	ldr	r3, [pc, #112]	; (800722c <HAL_RCC_OscConfig+0x4e8>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d028      	beq.n	800721a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d121      	bne.n	800721a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d11a      	bne.n	800721a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071ea:	4013      	ands	r3, r2
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d111      	bne.n	800721a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007200:	085b      	lsrs	r3, r3, #1
 8007202:	3b01      	subs	r3, #1
 8007204:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007206:	429a      	cmp	r2, r3
 8007208:	d107      	bne.n	800721a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007216:	429a      	cmp	r2, r3
 8007218:	d001      	beq.n	800721e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	40007000 	.word	0x40007000
 800722c:	40023800 	.word	0x40023800
 8007230:	42470060 	.word	0x42470060

08007234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e0cc      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007248:	4b68      	ldr	r3, [pc, #416]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	429a      	cmp	r2, r3
 8007254:	d90c      	bls.n	8007270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007256:	4b65      	ldr	r3, [pc, #404]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800725e:	4b63      	ldr	r3, [pc, #396]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d001      	beq.n	8007270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e0b8      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d020      	beq.n	80072be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007288:	4b59      	ldr	r3, [pc, #356]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	4a58      	ldr	r2, [pc, #352]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 800728e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0308 	and.w	r3, r3, #8
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072a0:	4b53      	ldr	r3, [pc, #332]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	4a52      	ldr	r2, [pc, #328]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ac:	4b50      	ldr	r3, [pc, #320]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	494d      	ldr	r1, [pc, #308]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d044      	beq.n	8007354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d107      	bne.n	80072e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072d2:	4b47      	ldr	r3, [pc, #284]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d119      	bne.n	8007312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e07f      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d003      	beq.n	80072f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d107      	bne.n	8007302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072f2:	4b3f      	ldr	r3, [pc, #252]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e06f      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007302:	4b3b      	ldr	r3, [pc, #236]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e067      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007312:	4b37      	ldr	r3, [pc, #220]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f023 0203 	bic.w	r2, r3, #3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	4934      	ldr	r1, [pc, #208]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007320:	4313      	orrs	r3, r2
 8007322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007324:	f7fd fc60 	bl	8004be8 <HAL_GetTick>
 8007328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732a:	e00a      	b.n	8007342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800732c:	f7fd fc5c 	bl	8004be8 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	f241 3288 	movw	r2, #5000	; 0x1388
 800733a:	4293      	cmp	r3, r2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e04f      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007342:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f003 020c 	and.w	r2, r3, #12
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	429a      	cmp	r2, r3
 8007352:	d1eb      	bne.n	800732c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007354:	4b25      	ldr	r3, [pc, #148]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d20c      	bcs.n	800737c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007362:	4b22      	ldr	r3, [pc, #136]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800736a:	4b20      	ldr	r3, [pc, #128]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d001      	beq.n	800737c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e032      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	d008      	beq.n	800739a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007388:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	4916      	ldr	r1, [pc, #88]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007396:	4313      	orrs	r3, r2
 8007398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	490e      	ldr	r1, [pc, #56]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073ba:	f000 f821 	bl	8007400 <HAL_RCC_GetSysClockFreq>
 80073be:	4602      	mov	r2, r0
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	091b      	lsrs	r3, r3, #4
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	490a      	ldr	r1, [pc, #40]	; (80073f4 <HAL_RCC_ClockConfig+0x1c0>)
 80073cc:	5ccb      	ldrb	r3, [r1, r3]
 80073ce:	fa22 f303 	lsr.w	r3, r2, r3
 80073d2:	4a09      	ldr	r2, [pc, #36]	; (80073f8 <HAL_RCC_ClockConfig+0x1c4>)
 80073d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073d6:	4b09      	ldr	r3, [pc, #36]	; (80073fc <HAL_RCC_ClockConfig+0x1c8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fd fbc0 	bl	8004b60 <HAL_InitTick>

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40023c00 	.word	0x40023c00
 80073f0:	40023800 	.word	0x40023800
 80073f4:	0800df64 	.word	0x0800df64
 80073f8:	2000002c 	.word	0x2000002c
 80073fc:	20000068 	.word	0x20000068

08007400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007400:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	607b      	str	r3, [r7, #4]
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	2300      	movs	r3, #0
 8007412:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007418:	4b67      	ldr	r3, [pc, #412]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f003 030c 	and.w	r3, r3, #12
 8007420:	2b08      	cmp	r3, #8
 8007422:	d00d      	beq.n	8007440 <HAL_RCC_GetSysClockFreq+0x40>
 8007424:	2b08      	cmp	r3, #8
 8007426:	f200 80bd 	bhi.w	80075a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <HAL_RCC_GetSysClockFreq+0x34>
 800742e:	2b04      	cmp	r3, #4
 8007430:	d003      	beq.n	800743a <HAL_RCC_GetSysClockFreq+0x3a>
 8007432:	e0b7      	b.n	80075a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007434:	4b61      	ldr	r3, [pc, #388]	; (80075bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007436:	60bb      	str	r3, [r7, #8]
       break;
 8007438:	e0b7      	b.n	80075aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800743a:	4b61      	ldr	r3, [pc, #388]	; (80075c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800743c:	60bb      	str	r3, [r7, #8]
      break;
 800743e:	e0b4      	b.n	80075aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007440:	4b5d      	ldr	r3, [pc, #372]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007448:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800744a:	4b5b      	ldr	r3, [pc, #364]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d04d      	beq.n	80074f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007456:	4b58      	ldr	r3, [pc, #352]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	099b      	lsrs	r3, r3, #6
 800745c:	461a      	mov	r2, r3
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007466:	f04f 0100 	mov.w	r1, #0
 800746a:	ea02 0800 	and.w	r8, r2, r0
 800746e:	ea03 0901 	and.w	r9, r3, r1
 8007472:	4640      	mov	r0, r8
 8007474:	4649      	mov	r1, r9
 8007476:	f04f 0200 	mov.w	r2, #0
 800747a:	f04f 0300 	mov.w	r3, #0
 800747e:	014b      	lsls	r3, r1, #5
 8007480:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007484:	0142      	lsls	r2, r0, #5
 8007486:	4610      	mov	r0, r2
 8007488:	4619      	mov	r1, r3
 800748a:	ebb0 0008 	subs.w	r0, r0, r8
 800748e:	eb61 0109 	sbc.w	r1, r1, r9
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	018b      	lsls	r3, r1, #6
 800749c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074a0:	0182      	lsls	r2, r0, #6
 80074a2:	1a12      	subs	r2, r2, r0
 80074a4:	eb63 0301 	sbc.w	r3, r3, r1
 80074a8:	f04f 0000 	mov.w	r0, #0
 80074ac:	f04f 0100 	mov.w	r1, #0
 80074b0:	00d9      	lsls	r1, r3, #3
 80074b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074b6:	00d0      	lsls	r0, r2, #3
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	eb12 0208 	adds.w	r2, r2, r8
 80074c0:	eb43 0309 	adc.w	r3, r3, r9
 80074c4:	f04f 0000 	mov.w	r0, #0
 80074c8:	f04f 0100 	mov.w	r1, #0
 80074cc:	0259      	lsls	r1, r3, #9
 80074ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80074d2:	0250      	lsls	r0, r2, #9
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4610      	mov	r0, r2
 80074da:	4619      	mov	r1, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	461a      	mov	r2, r3
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	f7f9 fb50 	bl	8000b88 <__aeabi_uldivmod>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4613      	mov	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	e04a      	b.n	8007588 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074f2:	4b31      	ldr	r3, [pc, #196]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	099b      	lsrs	r3, r3, #6
 80074f8:	461a      	mov	r2, r3
 80074fa:	f04f 0300 	mov.w	r3, #0
 80074fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007502:	f04f 0100 	mov.w	r1, #0
 8007506:	ea02 0400 	and.w	r4, r2, r0
 800750a:	ea03 0501 	and.w	r5, r3, r1
 800750e:	4620      	mov	r0, r4
 8007510:	4629      	mov	r1, r5
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	014b      	lsls	r3, r1, #5
 800751c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007520:	0142      	lsls	r2, r0, #5
 8007522:	4610      	mov	r0, r2
 8007524:	4619      	mov	r1, r3
 8007526:	1b00      	subs	r0, r0, r4
 8007528:	eb61 0105 	sbc.w	r1, r1, r5
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	f04f 0300 	mov.w	r3, #0
 8007534:	018b      	lsls	r3, r1, #6
 8007536:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800753a:	0182      	lsls	r2, r0, #6
 800753c:	1a12      	subs	r2, r2, r0
 800753e:	eb63 0301 	sbc.w	r3, r3, r1
 8007542:	f04f 0000 	mov.w	r0, #0
 8007546:	f04f 0100 	mov.w	r1, #0
 800754a:	00d9      	lsls	r1, r3, #3
 800754c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007550:	00d0      	lsls	r0, r2, #3
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	1912      	adds	r2, r2, r4
 8007558:	eb45 0303 	adc.w	r3, r5, r3
 800755c:	f04f 0000 	mov.w	r0, #0
 8007560:	f04f 0100 	mov.w	r1, #0
 8007564:	0299      	lsls	r1, r3, #10
 8007566:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800756a:	0290      	lsls	r0, r2, #10
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4610      	mov	r0, r2
 8007572:	4619      	mov	r1, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	461a      	mov	r2, r3
 8007578:	f04f 0300 	mov.w	r3, #0
 800757c:	f7f9 fb04 	bl	8000b88 <__aeabi_uldivmod>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4613      	mov	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007588:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	0c1b      	lsrs	r3, r3, #16
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	3301      	adds	r3, #1
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a0:	60bb      	str	r3, [r7, #8]
      break;
 80075a2:	e002      	b.n	80075aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075a4:	4b05      	ldr	r3, [pc, #20]	; (80075bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80075a6:	60bb      	str	r3, [r7, #8]
      break;
 80075a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075aa:	68bb      	ldr	r3, [r7, #8]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80075b6:	bf00      	nop
 80075b8:	40023800 	.word	0x40023800
 80075bc:	00f42400 	.word	0x00f42400
 80075c0:	007a1200 	.word	0x007a1200

080075c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075c8:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80075ca:	681b      	ldr	r3, [r3, #0]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	2000002c 	.word	0x2000002c

080075dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075e0:	f7ff fff0 	bl	80075c4 <HAL_RCC_GetHCLKFreq>
 80075e4:	4602      	mov	r2, r0
 80075e6:	4b05      	ldr	r3, [pc, #20]	; (80075fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	0a9b      	lsrs	r3, r3, #10
 80075ec:	f003 0307 	and.w	r3, r3, #7
 80075f0:	4903      	ldr	r1, [pc, #12]	; (8007600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075f2:	5ccb      	ldrb	r3, [r1, r3]
 80075f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	40023800 	.word	0x40023800
 8007600:	0800df74 	.word	0x0800df74

08007604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007608:	f7ff ffdc 	bl	80075c4 <HAL_RCC_GetHCLKFreq>
 800760c:	4602      	mov	r2, r0
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	0b5b      	lsrs	r3, r3, #13
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	4903      	ldr	r1, [pc, #12]	; (8007628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800761a:	5ccb      	ldrb	r3, [r1, r3]
 800761c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007620:	4618      	mov	r0, r3
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40023800 	.word	0x40023800
 8007628:	0800df74 	.word	0x0800df74

0800762c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e07b      	b.n	8007736 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	2b00      	cmp	r3, #0
 8007644:	d108      	bne.n	8007658 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800764e:	d009      	beq.n	8007664 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	61da      	str	r2, [r3, #28]
 8007656:	e005      	b.n	8007664 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d106      	bne.n	8007684 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7fb fe3e 	bl	8003300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800769a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80076ac:	431a      	orrs	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e8:	ea42 0103 	orr.w	r1, r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	0c1b      	lsrs	r3, r3, #16
 8007702:	f003 0104 	and.w	r1, r3, #4
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	f003 0210 	and.w	r2, r3, #16
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69da      	ldr	r2, [r3, #28]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007724:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b088      	sub	sp, #32
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	603b      	str	r3, [r7, #0]
 800774a:	4613      	mov	r3, r2
 800774c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007758:	2b01      	cmp	r3, #1
 800775a:	d101      	bne.n	8007760 <HAL_SPI_Transmit+0x22>
 800775c:	2302      	movs	r3, #2
 800775e:	e126      	b.n	80079ae <HAL_SPI_Transmit+0x270>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007768:	f7fd fa3e 	bl	8004be8 <HAL_GetTick>
 800776c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800776e:	88fb      	ldrh	r3, [r7, #6]
 8007770:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b01      	cmp	r3, #1
 800777c:	d002      	beq.n	8007784 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800777e:	2302      	movs	r3, #2
 8007780:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007782:	e10b      	b.n	800799c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <HAL_SPI_Transmit+0x52>
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d102      	bne.n	8007796 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007794:	e102      	b.n	800799c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2203      	movs	r2, #3
 800779a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077dc:	d10f      	bne.n	80077fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	d007      	beq.n	800781c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800781a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007824:	d14b      	bne.n	80078be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_SPI_Transmit+0xf6>
 800782e:	8afb      	ldrh	r3, [r7, #22]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d13e      	bne.n	80078b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007838:	881a      	ldrh	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	1c9a      	adds	r2, r3, #2
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007858:	e02b      	b.n	80078b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b02      	cmp	r3, #2
 8007866:	d112      	bne.n	800788e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	881a      	ldrh	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	1c9a      	adds	r2, r3, #2
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007882:	b29b      	uxth	r3, r3
 8007884:	3b01      	subs	r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	86da      	strh	r2, [r3, #54]	; 0x36
 800788c:	e011      	b.n	80078b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800788e:	f7fd f9ab 	bl	8004be8 <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	429a      	cmp	r2, r3
 800789c:	d803      	bhi.n	80078a6 <HAL_SPI_Transmit+0x168>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a4:	d102      	bne.n	80078ac <HAL_SPI_Transmit+0x16e>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d102      	bne.n	80078b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078b0:	e074      	b.n	800799c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1ce      	bne.n	800785a <HAL_SPI_Transmit+0x11c>
 80078bc:	e04c      	b.n	8007958 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <HAL_SPI_Transmit+0x18e>
 80078c6:	8afb      	ldrh	r3, [r7, #22]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d140      	bne.n	800794e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	7812      	ldrb	r2, [r2, #0]
 80078d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078f2:	e02c      	b.n	800794e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d113      	bne.n	800792a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	7812      	ldrb	r2, [r2, #0]
 800790e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	86da      	strh	r2, [r3, #54]	; 0x36
 8007928:	e011      	b.n	800794e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800792a:	f7fd f95d 	bl	8004be8 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	429a      	cmp	r2, r3
 8007938:	d803      	bhi.n	8007942 <HAL_SPI_Transmit+0x204>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d102      	bne.n	8007948 <HAL_SPI_Transmit+0x20a>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d102      	bne.n	800794e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800794c:	e026      	b.n	800799c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007952:	b29b      	uxth	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1cd      	bne.n	80078f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 f8b3 	bl	8007ac8 <SPI_EndRxTxTransaction>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2220      	movs	r2, #32
 800796c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007976:	2300      	movs	r3, #0
 8007978:	613b      	str	r3, [r7, #16]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	77fb      	strb	r3, [r7, #31]
 8007998:	e000      	b.n	800799c <HAL_SPI_Transmit+0x25e>
  }

error:
 800799a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3720      	adds	r7, #32
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079c8:	f7fd f90e 	bl	8004be8 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	4413      	add	r3, r2
 80079d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079d8:	f7fd f906 	bl	8004be8 <HAL_GetTick>
 80079dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079de:	4b39      	ldr	r3, [pc, #228]	; (8007ac4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	015b      	lsls	r3, r3, #5
 80079e4:	0d1b      	lsrs	r3, r3, #20
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	fb02 f303 	mul.w	r3, r2, r3
 80079ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ee:	e054      	b.n	8007a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f6:	d050      	beq.n	8007a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079f8:	f7fd f8f6 	bl	8004be8 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d902      	bls.n	8007a0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d13d      	bne.n	8007a8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a26:	d111      	bne.n	8007a4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a30:	d004      	beq.n	8007a3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a3a:	d107      	bne.n	8007a4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a54:	d10f      	bne.n	8007a76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e017      	b.n	8007aba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	bf0c      	ite	eq
 8007aaa:	2301      	moveq	r3, #1
 8007aac:	2300      	movne	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d19b      	bne.n	80079f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3720      	adds	r7, #32
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	2000002c 	.word	0x2000002c

08007ac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ad4:	4b1b      	ldr	r3, [pc, #108]	; (8007b44 <SPI_EndRxTxTransaction+0x7c>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1b      	ldr	r2, [pc, #108]	; (8007b48 <SPI_EndRxTxTransaction+0x80>)
 8007ada:	fba2 2303 	umull	r2, r3, r2, r3
 8007ade:	0d5b      	lsrs	r3, r3, #21
 8007ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ae4:	fb02 f303 	mul.w	r3, r2, r3
 8007ae8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007af2:	d112      	bne.n	8007b1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2200      	movs	r2, #0
 8007afc:	2180      	movs	r1, #128	; 0x80
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7ff ff5a 	bl	80079b8 <SPI_WaitFlagStateUntilTimeout>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d016      	beq.n	8007b38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0e:	f043 0220 	orr.w	r2, r3, #32
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e00f      	b.n	8007b3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00a      	beq.n	8007b36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b30:	2b80      	cmp	r3, #128	; 0x80
 8007b32:	d0f2      	beq.n	8007b1a <SPI_EndRxTxTransaction+0x52>
 8007b34:	e000      	b.n	8007b38 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b36:	bf00      	nop
  }

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	2000002c 	.word	0x2000002c
 8007b48:	165e9f81 	.word	0x165e9f81

08007b4c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e034      	b.n	8007bcc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7f9 fd0c 	bl	8001594 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3308      	adds	r3, #8
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	f001 ffa2 	bl	8009ad0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	461a      	mov	r2, r3
 8007b96:	68b9      	ldr	r1, [r7, #8]
 8007b98:	f001 ffec 	bl	8009b74 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6858      	ldr	r0, [r3, #4]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	f002 f821 	bl	8009bf0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	6892      	ldr	r2, [r2, #8]
 8007bb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	6892      	ldr	r2, [r2, #8]
 8007bc2:	f041 0101 	orr.w	r1, r1, #1
 8007bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e041      	b.n	8007c6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d106      	bne.n	8007c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7fb fe04 	bl	8003808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3304      	adds	r3, #4
 8007c10:	4619      	mov	r1, r3
 8007c12:	4610      	mov	r0, r2
 8007c14:	f000 fc1a 	bl	800844c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d001      	beq.n	8007c8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e046      	b.n	8007d1a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a23      	ldr	r2, [pc, #140]	; (8007d28 <HAL_TIM_Base_Start+0xb4>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d022      	beq.n	8007ce4 <HAL_TIM_Base_Start+0x70>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca6:	d01d      	beq.n	8007ce4 <HAL_TIM_Base_Start+0x70>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a1f      	ldr	r2, [pc, #124]	; (8007d2c <HAL_TIM_Base_Start+0xb8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d018      	beq.n	8007ce4 <HAL_TIM_Base_Start+0x70>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a1e      	ldr	r2, [pc, #120]	; (8007d30 <HAL_TIM_Base_Start+0xbc>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d013      	beq.n	8007ce4 <HAL_TIM_Base_Start+0x70>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a1c      	ldr	r2, [pc, #112]	; (8007d34 <HAL_TIM_Base_Start+0xc0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00e      	beq.n	8007ce4 <HAL_TIM_Base_Start+0x70>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1b      	ldr	r2, [pc, #108]	; (8007d38 <HAL_TIM_Base_Start+0xc4>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d009      	beq.n	8007ce4 <HAL_TIM_Base_Start+0x70>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a19      	ldr	r2, [pc, #100]	; (8007d3c <HAL_TIM_Base_Start+0xc8>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d004      	beq.n	8007ce4 <HAL_TIM_Base_Start+0x70>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a18      	ldr	r2, [pc, #96]	; (8007d40 <HAL_TIM_Base_Start+0xcc>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d111      	bne.n	8007d08 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b06      	cmp	r3, #6
 8007cf4:	d010      	beq.n	8007d18 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f042 0201 	orr.w	r2, r2, #1
 8007d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d06:	e007      	b.n	8007d18 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f042 0201 	orr.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	40000c00 	.word	0x40000c00
 8007d38:	40010400 	.word	0x40010400
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40001800 	.word	0x40001800

08007d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d001      	beq.n	8007d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e04e      	b.n	8007dfa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0201 	orr.w	r2, r2, #1
 8007d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a23      	ldr	r2, [pc, #140]	; (8007e08 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d022      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x80>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d86:	d01d      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x80>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1f      	ldr	r2, [pc, #124]	; (8007e0c <HAL_TIM_Base_Start_IT+0xc8>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d018      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x80>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1e      	ldr	r2, [pc, #120]	; (8007e10 <HAL_TIM_Base_Start_IT+0xcc>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d013      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x80>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a1c      	ldr	r2, [pc, #112]	; (8007e14 <HAL_TIM_Base_Start_IT+0xd0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d00e      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x80>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a1b      	ldr	r2, [pc, #108]	; (8007e18 <HAL_TIM_Base_Start_IT+0xd4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d009      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x80>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a19      	ldr	r2, [pc, #100]	; (8007e1c <HAL_TIM_Base_Start_IT+0xd8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d004      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0x80>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a18      	ldr	r2, [pc, #96]	; (8007e20 <HAL_TIM_Base_Start_IT+0xdc>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d111      	bne.n	8007de8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 0307 	and.w	r3, r3, #7
 8007dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b06      	cmp	r3, #6
 8007dd4:	d010      	beq.n	8007df8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f042 0201 	orr.w	r2, r2, #1
 8007de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007de6:	e007      	b.n	8007df8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0201 	orr.w	r2, r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	40010000 	.word	0x40010000
 8007e0c:	40000400 	.word	0x40000400
 8007e10:	40000800 	.word	0x40000800
 8007e14:	40000c00 	.word	0x40000c00
 8007e18:	40010400 	.word	0x40010400
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40001800 	.word	0x40001800

08007e24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e041      	b.n	8007eba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d106      	bne.n	8007e50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f839 	bl	8007ec2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4619      	mov	r1, r3
 8007e62:	4610      	mov	r0, r2
 8007e64:	f000 faf2 	bl	800844c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b082      	sub	sp, #8
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d122      	bne.n	8007f32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d11b      	bne.n	8007f32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f06f 0202 	mvn.w	r2, #2
 8007f02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	f003 0303 	and.w	r3, r3, #3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fa78 	bl	800840e <HAL_TIM_IC_CaptureCallback>
 8007f1e:	e005      	b.n	8007f2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fa6a 	bl	80083fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fa7b 	bl	8008422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d122      	bne.n	8007f86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f003 0304 	and.w	r3, r3, #4
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d11b      	bne.n	8007f86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f06f 0204 	mvn.w	r2, #4
 8007f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fa4e 	bl	800840e <HAL_TIM_IC_CaptureCallback>
 8007f72:	e005      	b.n	8007f80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fa40 	bl	80083fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fa51 	bl	8008422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	f003 0308 	and.w	r3, r3, #8
 8007f90:	2b08      	cmp	r3, #8
 8007f92:	d122      	bne.n	8007fda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f003 0308 	and.w	r3, r3, #8
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d11b      	bne.n	8007fda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f06f 0208 	mvn.w	r2, #8
 8007faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2204      	movs	r2, #4
 8007fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	f003 0303 	and.w	r3, r3, #3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fa24 	bl	800840e <HAL_TIM_IC_CaptureCallback>
 8007fc6:	e005      	b.n	8007fd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fa16 	bl	80083fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa27 	bl	8008422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	f003 0310 	and.w	r3, r3, #16
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d122      	bne.n	800802e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f003 0310 	and.w	r3, r3, #16
 8007ff2:	2b10      	cmp	r3, #16
 8007ff4:	d11b      	bne.n	800802e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f06f 0210 	mvn.w	r2, #16
 8007ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2208      	movs	r2, #8
 8008004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f9fa 	bl	800840e <HAL_TIM_IC_CaptureCallback>
 800801a:	e005      	b.n	8008028 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f9ec 	bl	80083fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f9fd 	bl	8008422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b01      	cmp	r3, #1
 800803a:	d10e      	bne.n	800805a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b01      	cmp	r3, #1
 8008048:	d107      	bne.n	800805a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f06f 0201 	mvn.w	r2, #1
 8008052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fb f851 	bl	80030fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d10e      	bne.n	8008086 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008072:	2b80      	cmp	r3, #128	; 0x80
 8008074:	d107      	bne.n	8008086 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800807e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fd53 	bl	8008b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008090:	2b40      	cmp	r3, #64	; 0x40
 8008092:	d10e      	bne.n	80080b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809e:	2b40      	cmp	r3, #64	; 0x40
 80080a0:	d107      	bne.n	80080b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f9c2 	bl	8008436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	f003 0320 	and.w	r3, r3, #32
 80080bc:	2b20      	cmp	r3, #32
 80080be:	d10e      	bne.n	80080de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d107      	bne.n	80080de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f06f 0220 	mvn.w	r2, #32
 80080d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fd1d 	bl	8008b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008102:	2302      	movs	r3, #2
 8008104:	e0ae      	b.n	8008264 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b0c      	cmp	r3, #12
 8008112:	f200 809f 	bhi.w	8008254 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008116:	a201      	add	r2, pc, #4	; (adr r2, 800811c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811c:	08008151 	.word	0x08008151
 8008120:	08008255 	.word	0x08008255
 8008124:	08008255 	.word	0x08008255
 8008128:	08008255 	.word	0x08008255
 800812c:	08008191 	.word	0x08008191
 8008130:	08008255 	.word	0x08008255
 8008134:	08008255 	.word	0x08008255
 8008138:	08008255 	.word	0x08008255
 800813c:	080081d3 	.word	0x080081d3
 8008140:	08008255 	.word	0x08008255
 8008144:	08008255 	.word	0x08008255
 8008148:	08008255 	.word	0x08008255
 800814c:	08008213 	.word	0x08008213
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68b9      	ldr	r1, [r7, #8]
 8008156:	4618      	mov	r0, r3
 8008158:	f000 fa18 	bl	800858c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0208 	orr.w	r2, r2, #8
 800816a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699a      	ldr	r2, [r3, #24]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0204 	bic.w	r2, r2, #4
 800817a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6999      	ldr	r1, [r3, #24]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	691a      	ldr	r2, [r3, #16]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	619a      	str	r2, [r3, #24]
      break;
 800818e:	e064      	b.n	800825a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fa68 	bl	800866c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	699a      	ldr	r2, [r3, #24]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699a      	ldr	r2, [r3, #24]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6999      	ldr	r1, [r3, #24]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	021a      	lsls	r2, r3, #8
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	619a      	str	r2, [r3, #24]
      break;
 80081d0:	e043      	b.n	800825a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fabd 	bl	8008758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69da      	ldr	r2, [r3, #28]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f042 0208 	orr.w	r2, r2, #8
 80081ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69da      	ldr	r2, [r3, #28]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0204 	bic.w	r2, r2, #4
 80081fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69d9      	ldr	r1, [r3, #28]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	691a      	ldr	r2, [r3, #16]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	61da      	str	r2, [r3, #28]
      break;
 8008210:	e023      	b.n	800825a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68b9      	ldr	r1, [r7, #8]
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fb11 	bl	8008840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	69da      	ldr	r2, [r3, #28]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800822c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69da      	ldr	r2, [r3, #28]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800823c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69d9      	ldr	r1, [r3, #28]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	021a      	lsls	r2, r3, #8
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	61da      	str	r2, [r3, #28]
      break;
 8008252:	e002      	b.n	800825a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	75fb      	strb	r3, [r7, #23]
      break;
 8008258:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008262:	7dfb      	ldrb	r3, [r7, #23]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_TIM_ConfigClockSource+0x1c>
 8008284:	2302      	movs	r3, #2
 8008286:	e0b4      	b.n	80083f2 <HAL_TIM_ConfigClockSource+0x186>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c0:	d03e      	beq.n	8008340 <HAL_TIM_ConfigClockSource+0xd4>
 80082c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c6:	f200 8087 	bhi.w	80083d8 <HAL_TIM_ConfigClockSource+0x16c>
 80082ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ce:	f000 8086 	beq.w	80083de <HAL_TIM_ConfigClockSource+0x172>
 80082d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d6:	d87f      	bhi.n	80083d8 <HAL_TIM_ConfigClockSource+0x16c>
 80082d8:	2b70      	cmp	r3, #112	; 0x70
 80082da:	d01a      	beq.n	8008312 <HAL_TIM_ConfigClockSource+0xa6>
 80082dc:	2b70      	cmp	r3, #112	; 0x70
 80082de:	d87b      	bhi.n	80083d8 <HAL_TIM_ConfigClockSource+0x16c>
 80082e0:	2b60      	cmp	r3, #96	; 0x60
 80082e2:	d050      	beq.n	8008386 <HAL_TIM_ConfigClockSource+0x11a>
 80082e4:	2b60      	cmp	r3, #96	; 0x60
 80082e6:	d877      	bhi.n	80083d8 <HAL_TIM_ConfigClockSource+0x16c>
 80082e8:	2b50      	cmp	r3, #80	; 0x50
 80082ea:	d03c      	beq.n	8008366 <HAL_TIM_ConfigClockSource+0xfa>
 80082ec:	2b50      	cmp	r3, #80	; 0x50
 80082ee:	d873      	bhi.n	80083d8 <HAL_TIM_ConfigClockSource+0x16c>
 80082f0:	2b40      	cmp	r3, #64	; 0x40
 80082f2:	d058      	beq.n	80083a6 <HAL_TIM_ConfigClockSource+0x13a>
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	d86f      	bhi.n	80083d8 <HAL_TIM_ConfigClockSource+0x16c>
 80082f8:	2b30      	cmp	r3, #48	; 0x30
 80082fa:	d064      	beq.n	80083c6 <HAL_TIM_ConfigClockSource+0x15a>
 80082fc:	2b30      	cmp	r3, #48	; 0x30
 80082fe:	d86b      	bhi.n	80083d8 <HAL_TIM_ConfigClockSource+0x16c>
 8008300:	2b20      	cmp	r3, #32
 8008302:	d060      	beq.n	80083c6 <HAL_TIM_ConfigClockSource+0x15a>
 8008304:	2b20      	cmp	r3, #32
 8008306:	d867      	bhi.n	80083d8 <HAL_TIM_ConfigClockSource+0x16c>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d05c      	beq.n	80083c6 <HAL_TIM_ConfigClockSource+0x15a>
 800830c:	2b10      	cmp	r3, #16
 800830e:	d05a      	beq.n	80083c6 <HAL_TIM_ConfigClockSource+0x15a>
 8008310:	e062      	b.n	80083d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	6899      	ldr	r1, [r3, #8]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f000 fb5d 	bl	80089e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	609a      	str	r2, [r3, #8]
      break;
 800833e:	e04f      	b.n	80083e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	6899      	ldr	r1, [r3, #8]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f000 fb46 	bl	80089e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689a      	ldr	r2, [r3, #8]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008362:	609a      	str	r2, [r3, #8]
      break;
 8008364:	e03c      	b.n	80083e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6859      	ldr	r1, [r3, #4]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	461a      	mov	r2, r3
 8008374:	f000 faba 	bl	80088ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2150      	movs	r1, #80	; 0x50
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fb13 	bl	80089aa <TIM_ITRx_SetConfig>
      break;
 8008384:	e02c      	b.n	80083e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	6859      	ldr	r1, [r3, #4]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	461a      	mov	r2, r3
 8008394:	f000 fad9 	bl	800894a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2160      	movs	r1, #96	; 0x60
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fb03 	bl	80089aa <TIM_ITRx_SetConfig>
      break;
 80083a4:	e01c      	b.n	80083e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6818      	ldr	r0, [r3, #0]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	6859      	ldr	r1, [r3, #4]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	461a      	mov	r2, r3
 80083b4:	f000 fa9a 	bl	80088ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2140      	movs	r1, #64	; 0x40
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 faf3 	bl	80089aa <TIM_ITRx_SetConfig>
      break;
 80083c4:	e00c      	b.n	80083e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4619      	mov	r1, r3
 80083d0:	4610      	mov	r0, r2
 80083d2:	f000 faea 	bl	80089aa <TIM_ITRx_SetConfig>
      break;
 80083d6:	e003      	b.n	80083e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	73fb      	strb	r3, [r7, #15]
      break;
 80083dc:	e000      	b.n	80083e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80083de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
	...

0800844c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a40      	ldr	r2, [pc, #256]	; (8008560 <TIM_Base_SetConfig+0x114>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d013      	beq.n	800848c <TIM_Base_SetConfig+0x40>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800846a:	d00f      	beq.n	800848c <TIM_Base_SetConfig+0x40>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a3d      	ldr	r2, [pc, #244]	; (8008564 <TIM_Base_SetConfig+0x118>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00b      	beq.n	800848c <TIM_Base_SetConfig+0x40>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a3c      	ldr	r2, [pc, #240]	; (8008568 <TIM_Base_SetConfig+0x11c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d007      	beq.n	800848c <TIM_Base_SetConfig+0x40>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a3b      	ldr	r2, [pc, #236]	; (800856c <TIM_Base_SetConfig+0x120>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d003      	beq.n	800848c <TIM_Base_SetConfig+0x40>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a3a      	ldr	r2, [pc, #232]	; (8008570 <TIM_Base_SetConfig+0x124>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d108      	bne.n	800849e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a2f      	ldr	r2, [pc, #188]	; (8008560 <TIM_Base_SetConfig+0x114>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d02b      	beq.n	80084fe <TIM_Base_SetConfig+0xb2>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ac:	d027      	beq.n	80084fe <TIM_Base_SetConfig+0xb2>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a2c      	ldr	r2, [pc, #176]	; (8008564 <TIM_Base_SetConfig+0x118>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d023      	beq.n	80084fe <TIM_Base_SetConfig+0xb2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a2b      	ldr	r2, [pc, #172]	; (8008568 <TIM_Base_SetConfig+0x11c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d01f      	beq.n	80084fe <TIM_Base_SetConfig+0xb2>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a2a      	ldr	r2, [pc, #168]	; (800856c <TIM_Base_SetConfig+0x120>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d01b      	beq.n	80084fe <TIM_Base_SetConfig+0xb2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a29      	ldr	r2, [pc, #164]	; (8008570 <TIM_Base_SetConfig+0x124>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d017      	beq.n	80084fe <TIM_Base_SetConfig+0xb2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a28      	ldr	r2, [pc, #160]	; (8008574 <TIM_Base_SetConfig+0x128>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d013      	beq.n	80084fe <TIM_Base_SetConfig+0xb2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a27      	ldr	r2, [pc, #156]	; (8008578 <TIM_Base_SetConfig+0x12c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00f      	beq.n	80084fe <TIM_Base_SetConfig+0xb2>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a26      	ldr	r2, [pc, #152]	; (800857c <TIM_Base_SetConfig+0x130>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d00b      	beq.n	80084fe <TIM_Base_SetConfig+0xb2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a25      	ldr	r2, [pc, #148]	; (8008580 <TIM_Base_SetConfig+0x134>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d007      	beq.n	80084fe <TIM_Base_SetConfig+0xb2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a24      	ldr	r2, [pc, #144]	; (8008584 <TIM_Base_SetConfig+0x138>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d003      	beq.n	80084fe <TIM_Base_SetConfig+0xb2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a23      	ldr	r2, [pc, #140]	; (8008588 <TIM_Base_SetConfig+0x13c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d108      	bne.n	8008510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	4313      	orrs	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a0a      	ldr	r2, [pc, #40]	; (8008560 <TIM_Base_SetConfig+0x114>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d003      	beq.n	8008544 <TIM_Base_SetConfig+0xf8>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a0c      	ldr	r2, [pc, #48]	; (8008570 <TIM_Base_SetConfig+0x124>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d103      	bne.n	800854c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	691a      	ldr	r2, [r3, #16]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	615a      	str	r2, [r3, #20]
}
 8008552:	bf00      	nop
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	40010000 	.word	0x40010000
 8008564:	40000400 	.word	0x40000400
 8008568:	40000800 	.word	0x40000800
 800856c:	40000c00 	.word	0x40000c00
 8008570:	40010400 	.word	0x40010400
 8008574:	40014000 	.word	0x40014000
 8008578:	40014400 	.word	0x40014400
 800857c:	40014800 	.word	0x40014800
 8008580:	40001800 	.word	0x40001800
 8008584:	40001c00 	.word	0x40001c00
 8008588:	40002000 	.word	0x40002000

0800858c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	f023 0201 	bic.w	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f023 0303 	bic.w	r3, r3, #3
 80085c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f023 0302 	bic.w	r3, r3, #2
 80085d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	4313      	orrs	r3, r2
 80085de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a20      	ldr	r2, [pc, #128]	; (8008664 <TIM_OC1_SetConfig+0xd8>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d003      	beq.n	80085f0 <TIM_OC1_SetConfig+0x64>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a1f      	ldr	r2, [pc, #124]	; (8008668 <TIM_OC1_SetConfig+0xdc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d10c      	bne.n	800860a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f023 0308 	bic.w	r3, r3, #8
 80085f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f023 0304 	bic.w	r3, r3, #4
 8008608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a15      	ldr	r2, [pc, #84]	; (8008664 <TIM_OC1_SetConfig+0xd8>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d003      	beq.n	800861a <TIM_OC1_SetConfig+0x8e>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a14      	ldr	r2, [pc, #80]	; (8008668 <TIM_OC1_SetConfig+0xdc>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d111      	bne.n	800863e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	4313      	orrs	r3, r2
 8008632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	4313      	orrs	r3, r2
 800863c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	621a      	str	r2, [r3, #32]
}
 8008658:	bf00      	nop
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	40010000 	.word	0x40010000
 8008668:	40010400 	.word	0x40010400

0800866c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f023 0210 	bic.w	r2, r3, #16
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	021b      	lsls	r3, r3, #8
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f023 0320 	bic.w	r3, r3, #32
 80086b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a22      	ldr	r2, [pc, #136]	; (8008750 <TIM_OC2_SetConfig+0xe4>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d003      	beq.n	80086d4 <TIM_OC2_SetConfig+0x68>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a21      	ldr	r2, [pc, #132]	; (8008754 <TIM_OC2_SetConfig+0xe8>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d10d      	bne.n	80086f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a17      	ldr	r2, [pc, #92]	; (8008750 <TIM_OC2_SetConfig+0xe4>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d003      	beq.n	8008700 <TIM_OC2_SetConfig+0x94>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a16      	ldr	r2, [pc, #88]	; (8008754 <TIM_OC2_SetConfig+0xe8>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d113      	bne.n	8008728 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800870e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	4313      	orrs	r3, r2
 800871a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	621a      	str	r2, [r3, #32]
}
 8008742:	bf00      	nop
 8008744:	371c      	adds	r7, #28
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	40010000 	.word	0x40010000
 8008754:	40010400 	.word	0x40010400

08008758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0303 	bic.w	r3, r3, #3
 800878e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	021b      	lsls	r3, r3, #8
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a21      	ldr	r2, [pc, #132]	; (8008838 <TIM_OC3_SetConfig+0xe0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d003      	beq.n	80087be <TIM_OC3_SetConfig+0x66>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a20      	ldr	r2, [pc, #128]	; (800883c <TIM_OC3_SetConfig+0xe4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d10d      	bne.n	80087da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a16      	ldr	r2, [pc, #88]	; (8008838 <TIM_OC3_SetConfig+0xe0>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d003      	beq.n	80087ea <TIM_OC3_SetConfig+0x92>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a15      	ldr	r2, [pc, #84]	; (800883c <TIM_OC3_SetConfig+0xe4>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d113      	bne.n	8008812 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	4313      	orrs	r3, r2
 8008804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	4313      	orrs	r3, r2
 8008810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	621a      	str	r2, [r3, #32]
}
 800882c:	bf00      	nop
 800882e:	371c      	adds	r7, #28
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	40010000 	.word	0x40010000
 800883c:	40010400 	.word	0x40010400

08008840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800886e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	021b      	lsls	r3, r3, #8
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	4313      	orrs	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800888a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	031b      	lsls	r3, r3, #12
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a12      	ldr	r2, [pc, #72]	; (80088e4 <TIM_OC4_SetConfig+0xa4>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d003      	beq.n	80088a8 <TIM_OC4_SetConfig+0x68>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a11      	ldr	r2, [pc, #68]	; (80088e8 <TIM_OC4_SetConfig+0xa8>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d109      	bne.n	80088bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	019b      	lsls	r3, r3, #6
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	621a      	str	r2, [r3, #32]
}
 80088d6:	bf00      	nop
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	40010000 	.word	0x40010000
 80088e8:	40010400 	.word	0x40010400

080088ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	f023 0201 	bic.w	r2, r3, #1
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	011b      	lsls	r3, r3, #4
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4313      	orrs	r3, r2
 8008920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f023 030a 	bic.w	r3, r3, #10
 8008928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4313      	orrs	r3, r2
 8008930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	621a      	str	r2, [r3, #32]
}
 800893e:	bf00      	nop
 8008940:	371c      	adds	r7, #28
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800894a:	b480      	push	{r7}
 800894c:	b087      	sub	sp, #28
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	f023 0210 	bic.w	r2, r3, #16
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	031b      	lsls	r3, r3, #12
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008986:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4313      	orrs	r3, r2
 8008990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	621a      	str	r2, [r3, #32]
}
 800899e:	bf00      	nop
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b085      	sub	sp, #20
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	f043 0307 	orr.w	r3, r3, #7
 80089cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	609a      	str	r2, [r3, #8]
}
 80089d4:	bf00      	nop
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	021a      	lsls	r2, r3, #8
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	431a      	orrs	r2, r3
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	609a      	str	r2, [r3, #8]
}
 8008a14:	bf00      	nop
 8008a16:	371c      	adds	r7, #28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d101      	bne.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a34:	2302      	movs	r3, #2
 8008a36:	e05a      	b.n	8008aee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a21      	ldr	r2, [pc, #132]	; (8008afc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d022      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a84:	d01d      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a1d      	ldr	r2, [pc, #116]	; (8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d018      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a1b      	ldr	r2, [pc, #108]	; (8008b04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d013      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a1a      	ldr	r2, [pc, #104]	; (8008b08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d00e      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a18      	ldr	r2, [pc, #96]	; (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d009      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a17      	ldr	r2, [pc, #92]	; (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d004      	beq.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a15      	ldr	r2, [pc, #84]	; (8008b14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d10c      	bne.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	40010000 	.word	0x40010000
 8008b00:	40000400 	.word	0x40000400
 8008b04:	40000800 	.word	0x40000800
 8008b08:	40000c00 	.word	0x40000c00
 8008b0c:	40010400 	.word	0x40010400
 8008b10:	40014000 	.word	0x40014000
 8008b14:	40001800 	.word	0x40001800

08008b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e03f      	b.n	8008bd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d106      	bne.n	8008b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7fb ff22 	bl	80049b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2224      	movs	r2, #36	; 0x24
 8008b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68da      	ldr	r2, [r3, #12]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fddb 	bl	8009740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	691a      	ldr	r2, [r3, #16]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	695a      	ldr	r2, [r3, #20]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68da      	ldr	r2, [r3, #12]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b08a      	sub	sp, #40	; 0x28
 8008bde:	af02      	add	r7, sp, #8
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	603b      	str	r3, [r7, #0]
 8008be6:	4613      	mov	r3, r2
 8008be8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008bea:	2300      	movs	r3, #0
 8008bec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b20      	cmp	r3, #32
 8008bf8:	d17c      	bne.n	8008cf4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <HAL_UART_Transmit+0x2c>
 8008c00:	88fb      	ldrh	r3, [r7, #6]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e075      	b.n	8008cf6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d101      	bne.n	8008c18 <HAL_UART_Transmit+0x3e>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e06e      	b.n	8008cf6 <HAL_UART_Transmit+0x11c>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2221      	movs	r2, #33	; 0x21
 8008c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c2e:	f7fb ffdb 	bl	8004be8 <HAL_GetTick>
 8008c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	88fa      	ldrh	r2, [r7, #6]
 8008c38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	88fa      	ldrh	r2, [r7, #6]
 8008c3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c48:	d108      	bne.n	8008c5c <HAL_UART_Transmit+0x82>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	61bb      	str	r3, [r7, #24]
 8008c5a:	e003      	b.n	8008c64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c60:	2300      	movs	r3, #0
 8008c62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008c6c:	e02a      	b.n	8008cc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2200      	movs	r2, #0
 8008c76:	2180      	movs	r1, #128	; 0x80
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fb1f 	bl	80092bc <UART_WaitOnFlagUntilTimeout>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e036      	b.n	8008cf6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10b      	bne.n	8008ca6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	3302      	adds	r3, #2
 8008ca2:	61bb      	str	r3, [r7, #24]
 8008ca4:	e007      	b.n	8008cb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	781a      	ldrb	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1cf      	bne.n	8008c6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2140      	movs	r1, #64	; 0x40
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 faef 	bl	80092bc <UART_WaitOnFlagUntilTimeout>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e006      	b.n	8008cf6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	e000      	b.n	8008cf6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008cf4:	2302      	movs	r3, #2
  }
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3720      	adds	r7, #32
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b20      	cmp	r3, #32
 8008d16:	d11d      	bne.n	8008d54 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <HAL_UART_Receive_IT+0x26>
 8008d1e:	88fb      	ldrh	r3, [r7, #6]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e016      	b.n	8008d56 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_UART_Receive_IT+0x38>
 8008d32:	2302      	movs	r3, #2
 8008d34:	e00f      	b.n	8008d56 <HAL_UART_Receive_IT+0x58>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d44:	88fb      	ldrh	r3, [r7, #6]
 8008d46:	461a      	mov	r2, r3
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f000 fb24 	bl	8009398 <UART_Start_Receive_IT>
 8008d50:	4603      	mov	r3, r0
 8008d52:	e000      	b.n	8008d56 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008d54:	2302      	movs	r3, #2
  }
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b0ba      	sub	sp, #232	; 0xe8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d96:	f003 030f 	and.w	r3, r3, #15
 8008d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10f      	bne.n	8008dc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008daa:	f003 0320 	and.w	r3, r3, #32
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d009      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x66>
 8008db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fc03 	bl	80095ca <UART_Receive_IT>
      return;
 8008dc4:	e256      	b.n	8009274 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 80de 	beq.w	8008f8c <HAL_UART_IRQHandler+0x22c>
 8008dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d106      	bne.n	8008dea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008de0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 80d1 	beq.w	8008f8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00b      	beq.n	8008e0e <HAL_UART_IRQHandler+0xae>
 8008df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d005      	beq.n	8008e0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	f043 0201 	orr.w	r2, r3, #1
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e12:	f003 0304 	and.w	r3, r3, #4
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00b      	beq.n	8008e32 <HAL_UART_IRQHandler+0xd2>
 8008e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	f043 0202 	orr.w	r2, r3, #2
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00b      	beq.n	8008e56 <HAL_UART_IRQHandler+0xf6>
 8008e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d005      	beq.n	8008e56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	f043 0204 	orr.w	r2, r3, #4
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e5a:	f003 0308 	and.w	r3, r3, #8
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d011      	beq.n	8008e86 <HAL_UART_IRQHandler+0x126>
 8008e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d105      	bne.n	8008e7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	f043 0208 	orr.w	r2, r3, #8
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 81ed 	beq.w	800926a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e94:	f003 0320 	and.w	r3, r3, #32
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d008      	beq.n	8008eae <HAL_UART_IRQHandler+0x14e>
 8008e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fb8e 	bl	80095ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb8:	2b40      	cmp	r3, #64	; 0x40
 8008eba:	bf0c      	ite	eq
 8008ebc:	2301      	moveq	r3, #1
 8008ebe:	2300      	movne	r3, #0
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	f003 0308 	and.w	r3, r3, #8
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d103      	bne.n	8008eda <HAL_UART_IRQHandler+0x17a>
 8008ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d04f      	beq.n	8008f7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa96 	bl	800940c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eea:	2b40      	cmp	r3, #64	; 0x40
 8008eec:	d141      	bne.n	8008f72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3314      	adds	r3, #20
 8008ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008efc:	e853 3f00 	ldrex	r3, [r3]
 8008f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3314      	adds	r3, #20
 8008f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f2a:	e841 2300 	strex	r3, r2, [r1]
 8008f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1d9      	bne.n	8008eee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d013      	beq.n	8008f6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	4a7d      	ldr	r2, [pc, #500]	; (800913c <HAL_UART_IRQHandler+0x3dc>)
 8008f48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fc fb0c 	bl	800556c <HAL_DMA_Abort_IT>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d016      	beq.n	8008f88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f64:	4610      	mov	r0, r2
 8008f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f68:	e00e      	b.n	8008f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f990 	bl	8009290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f70:	e00a      	b.n	8008f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f98c 	bl	8009290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f78:	e006      	b.n	8008f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f988 	bl	8009290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008f86:	e170      	b.n	800926a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f88:	bf00      	nop
    return;
 8008f8a:	e16e      	b.n	800926a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	f040 814a 	bne.w	800922a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f9a:	f003 0310 	and.w	r3, r3, #16
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 8143 	beq.w	800922a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa8:	f003 0310 	and.w	r3, r3, #16
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 813c 	beq.w	800922a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60bb      	str	r3, [r7, #8]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	60bb      	str	r3, [r7, #8]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	60bb      	str	r3, [r7, #8]
 8008fc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd2:	2b40      	cmp	r3, #64	; 0x40
 8008fd4:	f040 80b4 	bne.w	8009140 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fe4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 8140 	beq.w	800926e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	f080 8139 	bcs.w	800926e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009002:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800900e:	f000 8088 	beq.w	8009122 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	330c      	adds	r3, #12
 8009018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800902c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	330c      	adds	r3, #12
 800903a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800903e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009046:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800904a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1d9      	bne.n	8009012 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3314      	adds	r3, #20
 8009064:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800906e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009070:	f023 0301 	bic.w	r3, r3, #1
 8009074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3314      	adds	r3, #20
 800907e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009082:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009086:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800908a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e1      	bne.n	800905e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3314      	adds	r3, #20
 80090a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3314      	adds	r3, #20
 80090ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80090be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80090c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80090cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e3      	bne.n	800909a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2220      	movs	r2, #32
 80090d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	330c      	adds	r3, #12
 80090e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f2:	f023 0310 	bic.w	r3, r3, #16
 80090f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	330c      	adds	r3, #12
 8009100:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009104:	65ba      	str	r2, [r7, #88]	; 0x58
 8009106:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800910a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800910c:	e841 2300 	strex	r3, r2, [r1]
 8009110:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e3      	bne.n	80090e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911c:	4618      	mov	r0, r3
 800911e:	f7fc f9b5 	bl	800548c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800912a:	b29b      	uxth	r3, r3
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	b29b      	uxth	r3, r3
 8009130:	4619      	mov	r1, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f8b6 	bl	80092a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009138:	e099      	b.n	800926e <HAL_UART_IRQHandler+0x50e>
 800913a:	bf00      	nop
 800913c:	080094d3 	.word	0x080094d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009148:	b29b      	uxth	r3, r3
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009154:	b29b      	uxth	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 808b 	beq.w	8009272 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800915c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 8086 	beq.w	8009272 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	330c      	adds	r3, #12
 800916c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800917c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	330c      	adds	r3, #12
 8009186:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800918a:	647a      	str	r2, [r7, #68]	; 0x44
 800918c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e3      	bne.n	8009166 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3314      	adds	r3, #20
 80091a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	623b      	str	r3, [r7, #32]
   return(result);
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	f023 0301 	bic.w	r3, r3, #1
 80091b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3314      	adds	r3, #20
 80091be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80091c2:	633a      	str	r2, [r7, #48]	; 0x30
 80091c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e3      	bne.n	800919e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	330c      	adds	r3, #12
 80091ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0310 	bic.w	r3, r3, #16
 80091fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	330c      	adds	r3, #12
 8009204:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009208:	61fa      	str	r2, [r7, #28]
 800920a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920c:	69b9      	ldr	r1, [r7, #24]
 800920e:	69fa      	ldr	r2, [r7, #28]
 8009210:	e841 2300 	strex	r3, r2, [r1]
 8009214:	617b      	str	r3, [r7, #20]
   return(result);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e3      	bne.n	80091e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800921c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f83e 	bl	80092a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009228:	e023      	b.n	8009272 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800922a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800922e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009232:	2b00      	cmp	r3, #0
 8009234:	d009      	beq.n	800924a <HAL_UART_IRQHandler+0x4ea>
 8009236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800923a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f959 	bl	80094fa <UART_Transmit_IT>
    return;
 8009248:	e014      	b.n	8009274 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800924a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800924e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00e      	beq.n	8009274 <HAL_UART_IRQHandler+0x514>
 8009256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800925a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925e:	2b00      	cmp	r3, #0
 8009260:	d008      	beq.n	8009274 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f999 	bl	800959a <UART_EndTransmit_IT>
    return;
 8009268:	e004      	b.n	8009274 <HAL_UART_IRQHandler+0x514>
    return;
 800926a:	bf00      	nop
 800926c:	e002      	b.n	8009274 <HAL_UART_IRQHandler+0x514>
      return;
 800926e:	bf00      	nop
 8009270:	e000      	b.n	8009274 <HAL_UART_IRQHandler+0x514>
      return;
 8009272:	bf00      	nop
  }
}
 8009274:	37e8      	adds	r7, #232	; 0xe8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop

0800927c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b090      	sub	sp, #64	; 0x40
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	603b      	str	r3, [r7, #0]
 80092c8:	4613      	mov	r3, r2
 80092ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092cc:	e050      	b.n	8009370 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d4:	d04c      	beq.n	8009370 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d007      	beq.n	80092ec <UART_WaitOnFlagUntilTimeout+0x30>
 80092dc:	f7fb fc84 	bl	8004be8 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d241      	bcs.n	8009370 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	330c      	adds	r3, #12
 80092f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	e853 3f00 	ldrex	r3, [r3]
 80092fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	330c      	adds	r3, #12
 800930a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800930c:	637a      	str	r2, [r7, #52]	; 0x34
 800930e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009310:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009314:	e841 2300 	strex	r3, r2, [r1]
 8009318:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800931a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1e5      	bne.n	80092ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3314      	adds	r3, #20
 8009326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	e853 3f00 	ldrex	r3, [r3]
 800932e:	613b      	str	r3, [r7, #16]
   return(result);
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	f023 0301 	bic.w	r3, r3, #1
 8009336:	63bb      	str	r3, [r7, #56]	; 0x38
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3314      	adds	r3, #20
 800933e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009340:	623a      	str	r2, [r7, #32]
 8009342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009344:	69f9      	ldr	r1, [r7, #28]
 8009346:	6a3a      	ldr	r2, [r7, #32]
 8009348:	e841 2300 	strex	r3, r2, [r1]
 800934c:	61bb      	str	r3, [r7, #24]
   return(result);
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1e5      	bne.n	8009320 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2220      	movs	r2, #32
 8009358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2220      	movs	r2, #32
 8009360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800936c:	2303      	movs	r3, #3
 800936e:	e00f      	b.n	8009390 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	4013      	ands	r3, r2
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	429a      	cmp	r2, r3
 800937e:	bf0c      	ite	eq
 8009380:	2301      	moveq	r3, #1
 8009382:	2300      	movne	r3, #0
 8009384:	b2db      	uxtb	r3, r3
 8009386:	461a      	mov	r2, r3
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	429a      	cmp	r2, r3
 800938c:	d09f      	beq.n	80092ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3740      	adds	r7, #64	; 0x40
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	4613      	mov	r3, r2
 80093a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	88fa      	ldrh	r2, [r7, #6]
 80093b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	88fa      	ldrh	r2, [r7, #6]
 80093b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2222      	movs	r2, #34	; 0x22
 80093c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68da      	ldr	r2, [r3, #12]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093dc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	695a      	ldr	r2, [r3, #20]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f042 0201 	orr.w	r2, r2, #1
 80093ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68da      	ldr	r2, [r3, #12]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f042 0220 	orr.w	r2, r2, #32
 80093fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800940c:	b480      	push	{r7}
 800940e:	b095      	sub	sp, #84	; 0x54
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	330c      	adds	r3, #12
 800941a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800942a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	330c      	adds	r3, #12
 8009432:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009434:	643a      	str	r2, [r7, #64]	; 0x40
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800943a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e5      	bne.n	8009414 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3314      	adds	r3, #20
 800944e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	61fb      	str	r3, [r7, #28]
   return(result);
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	f023 0301 	bic.w	r3, r3, #1
 800945e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3314      	adds	r3, #20
 8009466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009468:	62fa      	str	r2, [r7, #44]	; 0x2c
 800946a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800946e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009470:	e841 2300 	strex	r3, r2, [r1]
 8009474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e5      	bne.n	8009448 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009480:	2b01      	cmp	r3, #1
 8009482:	d119      	bne.n	80094b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	330c      	adds	r3, #12
 800948a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	e853 3f00 	ldrex	r3, [r3]
 8009492:	60bb      	str	r3, [r7, #8]
   return(result);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f023 0310 	bic.w	r3, r3, #16
 800949a:	647b      	str	r3, [r7, #68]	; 0x44
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	330c      	adds	r3, #12
 80094a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094a4:	61ba      	str	r2, [r7, #24]
 80094a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a8:	6979      	ldr	r1, [r7, #20]
 80094aa:	69ba      	ldr	r2, [r7, #24]
 80094ac:	e841 2300 	strex	r3, r2, [r1]
 80094b0:	613b      	str	r3, [r7, #16]
   return(result);
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e5      	bne.n	8009484 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2220      	movs	r2, #32
 80094bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80094c6:	bf00      	nop
 80094c8:	3754      	adds	r7, #84	; 0x54
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f7ff fecf 	bl	8009290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094f2:	bf00      	nop
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b085      	sub	sp, #20
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b21      	cmp	r3, #33	; 0x21
 800950c:	d13e      	bne.n	800958c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009516:	d114      	bne.n	8009542 <UART_Transmit_IT+0x48>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d110      	bne.n	8009542 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	461a      	mov	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009534:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	1c9a      	adds	r2, r3, #2
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	621a      	str	r2, [r3, #32]
 8009540:	e008      	b.n	8009554 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	1c59      	adds	r1, r3, #1
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	6211      	str	r1, [r2, #32]
 800954c:	781a      	ldrb	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009558:	b29b      	uxth	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	b29b      	uxth	r3, r3
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	4619      	mov	r1, r3
 8009562:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10f      	bne.n	8009588 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68da      	ldr	r2, [r3, #12]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009576:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68da      	ldr	r2, [r3, #12]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009586:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	e000      	b.n	800958e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800958c:	2302      	movs	r3, #2
  }
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2220      	movs	r2, #32
 80095b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7ff fe5e 	bl	800927c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b08c      	sub	sp, #48	; 0x30
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2b22      	cmp	r3, #34	; 0x22
 80095dc:	f040 80ab 	bne.w	8009736 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095e8:	d117      	bne.n	800961a <UART_Receive_IT+0x50>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d113      	bne.n	800961a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	b29b      	uxth	r3, r3
 8009604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009608:	b29a      	uxth	r2, r3
 800960a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009612:	1c9a      	adds	r2, r3, #2
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	629a      	str	r2, [r3, #40]	; 0x28
 8009618:	e026      	b.n	8009668 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009620:	2300      	movs	r3, #0
 8009622:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800962c:	d007      	beq.n	800963e <UART_Receive_IT+0x74>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10a      	bne.n	800964c <UART_Receive_IT+0x82>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	b2da      	uxtb	r2, r3
 8009646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009648:	701a      	strb	r2, [r3, #0]
 800964a:	e008      	b.n	800965e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	b2db      	uxtb	r3, r3
 8009654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009658:	b2da      	uxtb	r2, r3
 800965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800966c:	b29b      	uxth	r3, r3
 800966e:	3b01      	subs	r3, #1
 8009670:	b29b      	uxth	r3, r3
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	4619      	mov	r1, r3
 8009676:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009678:	2b00      	cmp	r3, #0
 800967a:	d15a      	bne.n	8009732 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f022 0220 	bic.w	r2, r2, #32
 800968a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68da      	ldr	r2, [r3, #12]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800969a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	695a      	ldr	r2, [r3, #20]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0201 	bic.w	r2, r2, #1
 80096aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2220      	movs	r2, #32
 80096b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d135      	bne.n	8009728 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	330c      	adds	r3, #12
 80096c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	e853 3f00 	ldrex	r3, [r3]
 80096d0:	613b      	str	r3, [r7, #16]
   return(result);
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	f023 0310 	bic.w	r3, r3, #16
 80096d8:	627b      	str	r3, [r7, #36]	; 0x24
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	330c      	adds	r3, #12
 80096e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e2:	623a      	str	r2, [r7, #32]
 80096e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e6:	69f9      	ldr	r1, [r7, #28]
 80096e8:	6a3a      	ldr	r2, [r7, #32]
 80096ea:	e841 2300 	strex	r3, r2, [r1]
 80096ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1e5      	bne.n	80096c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0310 	and.w	r3, r3, #16
 8009700:	2b10      	cmp	r3, #16
 8009702:	d10a      	bne.n	800971a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009704:	2300      	movs	r3, #0
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	60fb      	str	r3, [r7, #12]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff fdbf 	bl	80092a4 <HAL_UARTEx_RxEventCallback>
 8009726:	e002      	b.n	800972e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7fb f8b9 	bl	80048a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	e002      	b.n	8009738 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	e000      	b.n	8009738 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009736:	2302      	movs	r3, #2
  }
}
 8009738:	4618      	mov	r0, r3
 800973a:	3730      	adds	r7, #48	; 0x30
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	b09f      	sub	sp, #124	; 0x7c
 8009746:	af00      	add	r7, sp, #0
 8009748:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800974a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009756:	68d9      	ldr	r1, [r3, #12]
 8009758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	ea40 0301 	orr.w	r3, r0, r1
 8009760:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009764:	689a      	ldr	r2, [r3, #8]
 8009766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	431a      	orrs	r2, r3
 800976c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	431a      	orrs	r2, r3
 8009772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	4313      	orrs	r3, r2
 8009778:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800977a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009784:	f021 010c 	bic.w	r1, r1, #12
 8009788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800978e:	430b      	orrs	r3, r1
 8009790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800979c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800979e:	6999      	ldr	r1, [r3, #24]
 80097a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	ea40 0301 	orr.w	r3, r0, r1
 80097a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	4bc5      	ldr	r3, [pc, #788]	; (8009ac4 <UART_SetConfig+0x384>)
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d004      	beq.n	80097be <UART_SetConfig+0x7e>
 80097b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	4bc3      	ldr	r3, [pc, #780]	; (8009ac8 <UART_SetConfig+0x388>)
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d103      	bne.n	80097c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097be:	f7fd ff21 	bl	8007604 <HAL_RCC_GetPCLK2Freq>
 80097c2:	6778      	str	r0, [r7, #116]	; 0x74
 80097c4:	e002      	b.n	80097cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097c6:	f7fd ff09 	bl	80075dc <HAL_RCC_GetPCLK1Freq>
 80097ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097d4:	f040 80b6 	bne.w	8009944 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097da:	461c      	mov	r4, r3
 80097dc:	f04f 0500 	mov.w	r5, #0
 80097e0:	4622      	mov	r2, r4
 80097e2:	462b      	mov	r3, r5
 80097e4:	1891      	adds	r1, r2, r2
 80097e6:	6439      	str	r1, [r7, #64]	; 0x40
 80097e8:	415b      	adcs	r3, r3
 80097ea:	647b      	str	r3, [r7, #68]	; 0x44
 80097ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80097f0:	1912      	adds	r2, r2, r4
 80097f2:	eb45 0303 	adc.w	r3, r5, r3
 80097f6:	f04f 0000 	mov.w	r0, #0
 80097fa:	f04f 0100 	mov.w	r1, #0
 80097fe:	00d9      	lsls	r1, r3, #3
 8009800:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009804:	00d0      	lsls	r0, r2, #3
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	1911      	adds	r1, r2, r4
 800980c:	6639      	str	r1, [r7, #96]	; 0x60
 800980e:	416b      	adcs	r3, r5
 8009810:	667b      	str	r3, [r7, #100]	; 0x64
 8009812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	461a      	mov	r2, r3
 8009818:	f04f 0300 	mov.w	r3, #0
 800981c:	1891      	adds	r1, r2, r2
 800981e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009820:	415b      	adcs	r3, r3
 8009822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009828:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800982c:	f7f7 f9ac 	bl	8000b88 <__aeabi_uldivmod>
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	4ba5      	ldr	r3, [pc, #660]	; (8009acc <UART_SetConfig+0x38c>)
 8009836:	fba3 2302 	umull	r2, r3, r3, r2
 800983a:	095b      	lsrs	r3, r3, #5
 800983c:	011e      	lsls	r6, r3, #4
 800983e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009840:	461c      	mov	r4, r3
 8009842:	f04f 0500 	mov.w	r5, #0
 8009846:	4622      	mov	r2, r4
 8009848:	462b      	mov	r3, r5
 800984a:	1891      	adds	r1, r2, r2
 800984c:	6339      	str	r1, [r7, #48]	; 0x30
 800984e:	415b      	adcs	r3, r3
 8009850:	637b      	str	r3, [r7, #52]	; 0x34
 8009852:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009856:	1912      	adds	r2, r2, r4
 8009858:	eb45 0303 	adc.w	r3, r5, r3
 800985c:	f04f 0000 	mov.w	r0, #0
 8009860:	f04f 0100 	mov.w	r1, #0
 8009864:	00d9      	lsls	r1, r3, #3
 8009866:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800986a:	00d0      	lsls	r0, r2, #3
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	1911      	adds	r1, r2, r4
 8009872:	65b9      	str	r1, [r7, #88]	; 0x58
 8009874:	416b      	adcs	r3, r5
 8009876:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	461a      	mov	r2, r3
 800987e:	f04f 0300 	mov.w	r3, #0
 8009882:	1891      	adds	r1, r2, r2
 8009884:	62b9      	str	r1, [r7, #40]	; 0x28
 8009886:	415b      	adcs	r3, r3
 8009888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800988a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800988e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009892:	f7f7 f979 	bl	8000b88 <__aeabi_uldivmod>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4b8c      	ldr	r3, [pc, #560]	; (8009acc <UART_SetConfig+0x38c>)
 800989c:	fba3 1302 	umull	r1, r3, r3, r2
 80098a0:	095b      	lsrs	r3, r3, #5
 80098a2:	2164      	movs	r1, #100	; 0x64
 80098a4:	fb01 f303 	mul.w	r3, r1, r3
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	00db      	lsls	r3, r3, #3
 80098ac:	3332      	adds	r3, #50	; 0x32
 80098ae:	4a87      	ldr	r2, [pc, #540]	; (8009acc <UART_SetConfig+0x38c>)
 80098b0:	fba2 2303 	umull	r2, r3, r2, r3
 80098b4:	095b      	lsrs	r3, r3, #5
 80098b6:	005b      	lsls	r3, r3, #1
 80098b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80098bc:	441e      	add	r6, r3
 80098be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098c0:	4618      	mov	r0, r3
 80098c2:	f04f 0100 	mov.w	r1, #0
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	1894      	adds	r4, r2, r2
 80098cc:	623c      	str	r4, [r7, #32]
 80098ce:	415b      	adcs	r3, r3
 80098d0:	627b      	str	r3, [r7, #36]	; 0x24
 80098d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098d6:	1812      	adds	r2, r2, r0
 80098d8:	eb41 0303 	adc.w	r3, r1, r3
 80098dc:	f04f 0400 	mov.w	r4, #0
 80098e0:	f04f 0500 	mov.w	r5, #0
 80098e4:	00dd      	lsls	r5, r3, #3
 80098e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80098ea:	00d4      	lsls	r4, r2, #3
 80098ec:	4622      	mov	r2, r4
 80098ee:	462b      	mov	r3, r5
 80098f0:	1814      	adds	r4, r2, r0
 80098f2:	653c      	str	r4, [r7, #80]	; 0x50
 80098f4:	414b      	adcs	r3, r1
 80098f6:	657b      	str	r3, [r7, #84]	; 0x54
 80098f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	461a      	mov	r2, r3
 80098fe:	f04f 0300 	mov.w	r3, #0
 8009902:	1891      	adds	r1, r2, r2
 8009904:	61b9      	str	r1, [r7, #24]
 8009906:	415b      	adcs	r3, r3
 8009908:	61fb      	str	r3, [r7, #28]
 800990a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800990e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009912:	f7f7 f939 	bl	8000b88 <__aeabi_uldivmod>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	4b6c      	ldr	r3, [pc, #432]	; (8009acc <UART_SetConfig+0x38c>)
 800991c:	fba3 1302 	umull	r1, r3, r3, r2
 8009920:	095b      	lsrs	r3, r3, #5
 8009922:	2164      	movs	r1, #100	; 0x64
 8009924:	fb01 f303 	mul.w	r3, r1, r3
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	3332      	adds	r3, #50	; 0x32
 800992e:	4a67      	ldr	r2, [pc, #412]	; (8009acc <UART_SetConfig+0x38c>)
 8009930:	fba2 2303 	umull	r2, r3, r2, r3
 8009934:	095b      	lsrs	r3, r3, #5
 8009936:	f003 0207 	and.w	r2, r3, #7
 800993a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4432      	add	r2, r6
 8009940:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009942:	e0b9      	b.n	8009ab8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009946:	461c      	mov	r4, r3
 8009948:	f04f 0500 	mov.w	r5, #0
 800994c:	4622      	mov	r2, r4
 800994e:	462b      	mov	r3, r5
 8009950:	1891      	adds	r1, r2, r2
 8009952:	6139      	str	r1, [r7, #16]
 8009954:	415b      	adcs	r3, r3
 8009956:	617b      	str	r3, [r7, #20]
 8009958:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800995c:	1912      	adds	r2, r2, r4
 800995e:	eb45 0303 	adc.w	r3, r5, r3
 8009962:	f04f 0000 	mov.w	r0, #0
 8009966:	f04f 0100 	mov.w	r1, #0
 800996a:	00d9      	lsls	r1, r3, #3
 800996c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009970:	00d0      	lsls	r0, r2, #3
 8009972:	4602      	mov	r2, r0
 8009974:	460b      	mov	r3, r1
 8009976:	eb12 0804 	adds.w	r8, r2, r4
 800997a:	eb43 0905 	adc.w	r9, r3, r5
 800997e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	4618      	mov	r0, r3
 8009984:	f04f 0100 	mov.w	r1, #0
 8009988:	f04f 0200 	mov.w	r2, #0
 800998c:	f04f 0300 	mov.w	r3, #0
 8009990:	008b      	lsls	r3, r1, #2
 8009992:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009996:	0082      	lsls	r2, r0, #2
 8009998:	4640      	mov	r0, r8
 800999a:	4649      	mov	r1, r9
 800999c:	f7f7 f8f4 	bl	8000b88 <__aeabi_uldivmod>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4b49      	ldr	r3, [pc, #292]	; (8009acc <UART_SetConfig+0x38c>)
 80099a6:	fba3 2302 	umull	r2, r3, r3, r2
 80099aa:	095b      	lsrs	r3, r3, #5
 80099ac:	011e      	lsls	r6, r3, #4
 80099ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099b0:	4618      	mov	r0, r3
 80099b2:	f04f 0100 	mov.w	r1, #0
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	1894      	adds	r4, r2, r2
 80099bc:	60bc      	str	r4, [r7, #8]
 80099be:	415b      	adcs	r3, r3
 80099c0:	60fb      	str	r3, [r7, #12]
 80099c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099c6:	1812      	adds	r2, r2, r0
 80099c8:	eb41 0303 	adc.w	r3, r1, r3
 80099cc:	f04f 0400 	mov.w	r4, #0
 80099d0:	f04f 0500 	mov.w	r5, #0
 80099d4:	00dd      	lsls	r5, r3, #3
 80099d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80099da:	00d4      	lsls	r4, r2, #3
 80099dc:	4622      	mov	r2, r4
 80099de:	462b      	mov	r3, r5
 80099e0:	1814      	adds	r4, r2, r0
 80099e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80099e4:	414b      	adcs	r3, r1
 80099e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f04f 0100 	mov.w	r1, #0
 80099f2:	f04f 0200 	mov.w	r2, #0
 80099f6:	f04f 0300 	mov.w	r3, #0
 80099fa:	008b      	lsls	r3, r1, #2
 80099fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a00:	0082      	lsls	r2, r0, #2
 8009a02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009a06:	f7f7 f8bf 	bl	8000b88 <__aeabi_uldivmod>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4b2f      	ldr	r3, [pc, #188]	; (8009acc <UART_SetConfig+0x38c>)
 8009a10:	fba3 1302 	umull	r1, r3, r3, r2
 8009a14:	095b      	lsrs	r3, r3, #5
 8009a16:	2164      	movs	r1, #100	; 0x64
 8009a18:	fb01 f303 	mul.w	r3, r1, r3
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	011b      	lsls	r3, r3, #4
 8009a20:	3332      	adds	r3, #50	; 0x32
 8009a22:	4a2a      	ldr	r2, [pc, #168]	; (8009acc <UART_SetConfig+0x38c>)
 8009a24:	fba2 2303 	umull	r2, r3, r2, r3
 8009a28:	095b      	lsrs	r3, r3, #5
 8009a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a2e:	441e      	add	r6, r3
 8009a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a32:	4618      	mov	r0, r3
 8009a34:	f04f 0100 	mov.w	r1, #0
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	1894      	adds	r4, r2, r2
 8009a3e:	603c      	str	r4, [r7, #0]
 8009a40:	415b      	adcs	r3, r3
 8009a42:	607b      	str	r3, [r7, #4]
 8009a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a48:	1812      	adds	r2, r2, r0
 8009a4a:	eb41 0303 	adc.w	r3, r1, r3
 8009a4e:	f04f 0400 	mov.w	r4, #0
 8009a52:	f04f 0500 	mov.w	r5, #0
 8009a56:	00dd      	lsls	r5, r3, #3
 8009a58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a5c:	00d4      	lsls	r4, r2, #3
 8009a5e:	4622      	mov	r2, r4
 8009a60:	462b      	mov	r3, r5
 8009a62:	eb12 0a00 	adds.w	sl, r2, r0
 8009a66:	eb43 0b01 	adc.w	fp, r3, r1
 8009a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f04f 0100 	mov.w	r1, #0
 8009a74:	f04f 0200 	mov.w	r2, #0
 8009a78:	f04f 0300 	mov.w	r3, #0
 8009a7c:	008b      	lsls	r3, r1, #2
 8009a7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a82:	0082      	lsls	r2, r0, #2
 8009a84:	4650      	mov	r0, sl
 8009a86:	4659      	mov	r1, fp
 8009a88:	f7f7 f87e 	bl	8000b88 <__aeabi_uldivmod>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <UART_SetConfig+0x38c>)
 8009a92:	fba3 1302 	umull	r1, r3, r3, r2
 8009a96:	095b      	lsrs	r3, r3, #5
 8009a98:	2164      	movs	r1, #100	; 0x64
 8009a9a:	fb01 f303 	mul.w	r3, r1, r3
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	011b      	lsls	r3, r3, #4
 8009aa2:	3332      	adds	r3, #50	; 0x32
 8009aa4:	4a09      	ldr	r2, [pc, #36]	; (8009acc <UART_SetConfig+0x38c>)
 8009aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aaa:	095b      	lsrs	r3, r3, #5
 8009aac:	f003 020f 	and.w	r2, r3, #15
 8009ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4432      	add	r2, r6
 8009ab6:	609a      	str	r2, [r3, #8]
}
 8009ab8:	bf00      	nop
 8009aba:	377c      	adds	r7, #124	; 0x7c
 8009abc:	46bd      	mov	sp, r7
 8009abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac2:	bf00      	nop
 8009ac4:	40011000 	.word	0x40011000
 8009ac8:	40011400 	.word	0x40011400
 8009acc:	51eb851f 	.word	0x51eb851f

08009ad0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	4b20      	ldr	r3, [pc, #128]	; (8009b70 <FSMC_NORSRAM_Init+0xa0>)
 8009aee:	4013      	ands	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009afa:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8009b00:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8009b06:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009b0c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8009b12:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8009b18:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8009b1e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009b24:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8009b2a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009b30:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8009b36:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8009b3c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	2b08      	cmp	r3, #8
 8009b4a:	d103      	bne.n	8009b54 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b52:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68f9      	ldr	r1, [r7, #12]
 8009b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	fff00080 	.word	0xfff00080

08009b74 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b087      	sub	sp, #28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009b80:	2300      	movs	r3, #0
 8009b82:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b8e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009b96:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009ba2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009baa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8009bb2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009bbc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	3b02      	subs	r3, #2
 8009bc4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009bc6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6979      	ldr	r1, [r7, #20]
 8009bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	371c      	adds	r7, #28
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
	...

08009bf0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c08:	d122      	bne.n	8009c50 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c12:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	4b15      	ldr	r3, [pc, #84]	; (8009c6c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009c18:	4013      	ands	r3, r2
 8009c1a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009c26:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009c2e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009c36:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009c3c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	6979      	ldr	r1, [r7, #20]
 8009c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009c4e:	e005      	b.n	8009c5c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	371c      	adds	r7, #28
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	cff00000 	.word	0xcff00000

08009c70 <__errno>:
 8009c70:	4b01      	ldr	r3, [pc, #4]	; (8009c78 <__errno+0x8>)
 8009c72:	6818      	ldr	r0, [r3, #0]
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	20000070 	.word	0x20000070

08009c7c <__libc_init_array>:
 8009c7c:	b570      	push	{r4, r5, r6, lr}
 8009c7e:	4d0d      	ldr	r5, [pc, #52]	; (8009cb4 <__libc_init_array+0x38>)
 8009c80:	4c0d      	ldr	r4, [pc, #52]	; (8009cb8 <__libc_init_array+0x3c>)
 8009c82:	1b64      	subs	r4, r4, r5
 8009c84:	10a4      	asrs	r4, r4, #2
 8009c86:	2600      	movs	r6, #0
 8009c88:	42a6      	cmp	r6, r4
 8009c8a:	d109      	bne.n	8009ca0 <__libc_init_array+0x24>
 8009c8c:	4d0b      	ldr	r5, [pc, #44]	; (8009cbc <__libc_init_array+0x40>)
 8009c8e:	4c0c      	ldr	r4, [pc, #48]	; (8009cc0 <__libc_init_array+0x44>)
 8009c90:	f001 f90a 	bl	800aea8 <_init>
 8009c94:	1b64      	subs	r4, r4, r5
 8009c96:	10a4      	asrs	r4, r4, #2
 8009c98:	2600      	movs	r6, #0
 8009c9a:	42a6      	cmp	r6, r4
 8009c9c:	d105      	bne.n	8009caa <__libc_init_array+0x2e>
 8009c9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca4:	4798      	blx	r3
 8009ca6:	3601      	adds	r6, #1
 8009ca8:	e7ee      	b.n	8009c88 <__libc_init_array+0xc>
 8009caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cae:	4798      	blx	r3
 8009cb0:	3601      	adds	r6, #1
 8009cb2:	e7f2      	b.n	8009c9a <__libc_init_array+0x1e>
 8009cb4:	0800e0d8 	.word	0x0800e0d8
 8009cb8:	0800e0d8 	.word	0x0800e0d8
 8009cbc:	0800e0d8 	.word	0x0800e0d8
 8009cc0:	0800e0dc 	.word	0x0800e0dc

08009cc4 <malloc>:
 8009cc4:	4b02      	ldr	r3, [pc, #8]	; (8009cd0 <malloc+0xc>)
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	6818      	ldr	r0, [r3, #0]
 8009cca:	f000 b85b 	b.w	8009d84 <_malloc_r>
 8009cce:	bf00      	nop
 8009cd0:	20000070 	.word	0x20000070

08009cd4 <memset>:
 8009cd4:	4402      	add	r2, r0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d100      	bne.n	8009cde <memset+0xa>
 8009cdc:	4770      	bx	lr
 8009cde:	f803 1b01 	strb.w	r1, [r3], #1
 8009ce2:	e7f9      	b.n	8009cd8 <memset+0x4>

08009ce4 <_free_r>:
 8009ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d048      	beq.n	8009d7c <_free_r+0x98>
 8009cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cee:	9001      	str	r0, [sp, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8009cf6:	bfb8      	it	lt
 8009cf8:	18e4      	addlt	r4, r4, r3
 8009cfa:	f000 f91d 	bl	8009f38 <__malloc_lock>
 8009cfe:	4a20      	ldr	r2, [pc, #128]	; (8009d80 <_free_r+0x9c>)
 8009d00:	9801      	ldr	r0, [sp, #4]
 8009d02:	6813      	ldr	r3, [r2, #0]
 8009d04:	4615      	mov	r5, r2
 8009d06:	b933      	cbnz	r3, 8009d16 <_free_r+0x32>
 8009d08:	6063      	str	r3, [r4, #4]
 8009d0a:	6014      	str	r4, [r2, #0]
 8009d0c:	b003      	add	sp, #12
 8009d0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d12:	f000 b917 	b.w	8009f44 <__malloc_unlock>
 8009d16:	42a3      	cmp	r3, r4
 8009d18:	d90b      	bls.n	8009d32 <_free_r+0x4e>
 8009d1a:	6821      	ldr	r1, [r4, #0]
 8009d1c:	1862      	adds	r2, r4, r1
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	bf04      	itt	eq
 8009d22:	681a      	ldreq	r2, [r3, #0]
 8009d24:	685b      	ldreq	r3, [r3, #4]
 8009d26:	6063      	str	r3, [r4, #4]
 8009d28:	bf04      	itt	eq
 8009d2a:	1852      	addeq	r2, r2, r1
 8009d2c:	6022      	streq	r2, [r4, #0]
 8009d2e:	602c      	str	r4, [r5, #0]
 8009d30:	e7ec      	b.n	8009d0c <_free_r+0x28>
 8009d32:	461a      	mov	r2, r3
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	b10b      	cbz	r3, 8009d3c <_free_r+0x58>
 8009d38:	42a3      	cmp	r3, r4
 8009d3a:	d9fa      	bls.n	8009d32 <_free_r+0x4e>
 8009d3c:	6811      	ldr	r1, [r2, #0]
 8009d3e:	1855      	adds	r5, r2, r1
 8009d40:	42a5      	cmp	r5, r4
 8009d42:	d10b      	bne.n	8009d5c <_free_r+0x78>
 8009d44:	6824      	ldr	r4, [r4, #0]
 8009d46:	4421      	add	r1, r4
 8009d48:	1854      	adds	r4, r2, r1
 8009d4a:	42a3      	cmp	r3, r4
 8009d4c:	6011      	str	r1, [r2, #0]
 8009d4e:	d1dd      	bne.n	8009d0c <_free_r+0x28>
 8009d50:	681c      	ldr	r4, [r3, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	6053      	str	r3, [r2, #4]
 8009d56:	4421      	add	r1, r4
 8009d58:	6011      	str	r1, [r2, #0]
 8009d5a:	e7d7      	b.n	8009d0c <_free_r+0x28>
 8009d5c:	d902      	bls.n	8009d64 <_free_r+0x80>
 8009d5e:	230c      	movs	r3, #12
 8009d60:	6003      	str	r3, [r0, #0]
 8009d62:	e7d3      	b.n	8009d0c <_free_r+0x28>
 8009d64:	6825      	ldr	r5, [r4, #0]
 8009d66:	1961      	adds	r1, r4, r5
 8009d68:	428b      	cmp	r3, r1
 8009d6a:	bf04      	itt	eq
 8009d6c:	6819      	ldreq	r1, [r3, #0]
 8009d6e:	685b      	ldreq	r3, [r3, #4]
 8009d70:	6063      	str	r3, [r4, #4]
 8009d72:	bf04      	itt	eq
 8009d74:	1949      	addeq	r1, r1, r5
 8009d76:	6021      	streq	r1, [r4, #0]
 8009d78:	6054      	str	r4, [r2, #4]
 8009d7a:	e7c7      	b.n	8009d0c <_free_r+0x28>
 8009d7c:	b003      	add	sp, #12
 8009d7e:	bd30      	pop	{r4, r5, pc}
 8009d80:	2000098c 	.word	0x2000098c

08009d84 <_malloc_r>:
 8009d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d86:	1ccd      	adds	r5, r1, #3
 8009d88:	f025 0503 	bic.w	r5, r5, #3
 8009d8c:	3508      	adds	r5, #8
 8009d8e:	2d0c      	cmp	r5, #12
 8009d90:	bf38      	it	cc
 8009d92:	250c      	movcc	r5, #12
 8009d94:	2d00      	cmp	r5, #0
 8009d96:	4606      	mov	r6, r0
 8009d98:	db01      	blt.n	8009d9e <_malloc_r+0x1a>
 8009d9a:	42a9      	cmp	r1, r5
 8009d9c:	d903      	bls.n	8009da6 <_malloc_r+0x22>
 8009d9e:	230c      	movs	r3, #12
 8009da0:	6033      	str	r3, [r6, #0]
 8009da2:	2000      	movs	r0, #0
 8009da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da6:	f000 f8c7 	bl	8009f38 <__malloc_lock>
 8009daa:	4921      	ldr	r1, [pc, #132]	; (8009e30 <_malloc_r+0xac>)
 8009dac:	680a      	ldr	r2, [r1, #0]
 8009dae:	4614      	mov	r4, r2
 8009db0:	b99c      	cbnz	r4, 8009dda <_malloc_r+0x56>
 8009db2:	4f20      	ldr	r7, [pc, #128]	; (8009e34 <_malloc_r+0xb0>)
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	b923      	cbnz	r3, 8009dc2 <_malloc_r+0x3e>
 8009db8:	4621      	mov	r1, r4
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f000 f87c 	bl	8009eb8 <_sbrk_r>
 8009dc0:	6038      	str	r0, [r7, #0]
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f000 f877 	bl	8009eb8 <_sbrk_r>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	d123      	bne.n	8009e16 <_malloc_r+0x92>
 8009dce:	230c      	movs	r3, #12
 8009dd0:	6033      	str	r3, [r6, #0]
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f000 f8b6 	bl	8009f44 <__malloc_unlock>
 8009dd8:	e7e3      	b.n	8009da2 <_malloc_r+0x1e>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	1b5b      	subs	r3, r3, r5
 8009dde:	d417      	bmi.n	8009e10 <_malloc_r+0x8c>
 8009de0:	2b0b      	cmp	r3, #11
 8009de2:	d903      	bls.n	8009dec <_malloc_r+0x68>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	441c      	add	r4, r3
 8009de8:	6025      	str	r5, [r4, #0]
 8009dea:	e004      	b.n	8009df6 <_malloc_r+0x72>
 8009dec:	6863      	ldr	r3, [r4, #4]
 8009dee:	42a2      	cmp	r2, r4
 8009df0:	bf0c      	ite	eq
 8009df2:	600b      	streq	r3, [r1, #0]
 8009df4:	6053      	strne	r3, [r2, #4]
 8009df6:	4630      	mov	r0, r6
 8009df8:	f000 f8a4 	bl	8009f44 <__malloc_unlock>
 8009dfc:	f104 000b 	add.w	r0, r4, #11
 8009e00:	1d23      	adds	r3, r4, #4
 8009e02:	f020 0007 	bic.w	r0, r0, #7
 8009e06:	1ac2      	subs	r2, r0, r3
 8009e08:	d0cc      	beq.n	8009da4 <_malloc_r+0x20>
 8009e0a:	1a1b      	subs	r3, r3, r0
 8009e0c:	50a3      	str	r3, [r4, r2]
 8009e0e:	e7c9      	b.n	8009da4 <_malloc_r+0x20>
 8009e10:	4622      	mov	r2, r4
 8009e12:	6864      	ldr	r4, [r4, #4]
 8009e14:	e7cc      	b.n	8009db0 <_malloc_r+0x2c>
 8009e16:	1cc4      	adds	r4, r0, #3
 8009e18:	f024 0403 	bic.w	r4, r4, #3
 8009e1c:	42a0      	cmp	r0, r4
 8009e1e:	d0e3      	beq.n	8009de8 <_malloc_r+0x64>
 8009e20:	1a21      	subs	r1, r4, r0
 8009e22:	4630      	mov	r0, r6
 8009e24:	f000 f848 	bl	8009eb8 <_sbrk_r>
 8009e28:	3001      	adds	r0, #1
 8009e2a:	d1dd      	bne.n	8009de8 <_malloc_r+0x64>
 8009e2c:	e7cf      	b.n	8009dce <_malloc_r+0x4a>
 8009e2e:	bf00      	nop
 8009e30:	2000098c 	.word	0x2000098c
 8009e34:	20000990 	.word	0x20000990

08009e38 <rand>:
 8009e38:	4b17      	ldr	r3, [pc, #92]	; (8009e98 <rand+0x60>)
 8009e3a:	b510      	push	{r4, lr}
 8009e3c:	681c      	ldr	r4, [r3, #0]
 8009e3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e40:	b9b3      	cbnz	r3, 8009e70 <rand+0x38>
 8009e42:	2018      	movs	r0, #24
 8009e44:	f7ff ff3e 	bl	8009cc4 <malloc>
 8009e48:	63a0      	str	r0, [r4, #56]	; 0x38
 8009e4a:	b928      	cbnz	r0, 8009e58 <rand+0x20>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	4b13      	ldr	r3, [pc, #76]	; (8009e9c <rand+0x64>)
 8009e50:	4813      	ldr	r0, [pc, #76]	; (8009ea0 <rand+0x68>)
 8009e52:	214e      	movs	r1, #78	; 0x4e
 8009e54:	f000 f840 	bl	8009ed8 <__assert_func>
 8009e58:	4a12      	ldr	r2, [pc, #72]	; (8009ea4 <rand+0x6c>)
 8009e5a:	4b13      	ldr	r3, [pc, #76]	; (8009ea8 <rand+0x70>)
 8009e5c:	e9c0 2300 	strd	r2, r3, [r0]
 8009e60:	4b12      	ldr	r3, [pc, #72]	; (8009eac <rand+0x74>)
 8009e62:	6083      	str	r3, [r0, #8]
 8009e64:	230b      	movs	r3, #11
 8009e66:	8183      	strh	r3, [r0, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009e70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009e72:	480f      	ldr	r0, [pc, #60]	; (8009eb0 <rand+0x78>)
 8009e74:	690a      	ldr	r2, [r1, #16]
 8009e76:	694b      	ldr	r3, [r1, #20]
 8009e78:	4c0e      	ldr	r4, [pc, #56]	; (8009eb4 <rand+0x7c>)
 8009e7a:	4350      	muls	r0, r2
 8009e7c:	fb04 0003 	mla	r0, r4, r3, r0
 8009e80:	fba2 3404 	umull	r3, r4, r2, r4
 8009e84:	1c5a      	adds	r2, r3, #1
 8009e86:	4404      	add	r4, r0
 8009e88:	f144 0000 	adc.w	r0, r4, #0
 8009e8c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8009e90:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009e94:	bd10      	pop	{r4, pc}
 8009e96:	bf00      	nop
 8009e98:	20000070 	.word	0x20000070
 8009e9c:	0800df88 	.word	0x0800df88
 8009ea0:	0800df9f 	.word	0x0800df9f
 8009ea4:	abcd330e 	.word	0xabcd330e
 8009ea8:	e66d1234 	.word	0xe66d1234
 8009eac:	0005deec 	.word	0x0005deec
 8009eb0:	5851f42d 	.word	0x5851f42d
 8009eb4:	4c957f2d 	.word	0x4c957f2d

08009eb8 <_sbrk_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d06      	ldr	r5, [pc, #24]	; (8009ed4 <_sbrk_r+0x1c>)
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	602b      	str	r3, [r5, #0]
 8009ec4:	f7f9 fb6e 	bl	80035a4 <_sbrk>
 8009ec8:	1c43      	adds	r3, r0, #1
 8009eca:	d102      	bne.n	8009ed2 <_sbrk_r+0x1a>
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	b103      	cbz	r3, 8009ed2 <_sbrk_r+0x1a>
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	20000e3c 	.word	0x20000e3c

08009ed8 <__assert_func>:
 8009ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eda:	4614      	mov	r4, r2
 8009edc:	461a      	mov	r2, r3
 8009ede:	4b09      	ldr	r3, [pc, #36]	; (8009f04 <__assert_func+0x2c>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	68d8      	ldr	r0, [r3, #12]
 8009ee6:	b14c      	cbz	r4, 8009efc <__assert_func+0x24>
 8009ee8:	4b07      	ldr	r3, [pc, #28]	; (8009f08 <__assert_func+0x30>)
 8009eea:	9100      	str	r1, [sp, #0]
 8009eec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ef0:	4906      	ldr	r1, [pc, #24]	; (8009f0c <__assert_func+0x34>)
 8009ef2:	462b      	mov	r3, r5
 8009ef4:	f000 f80e 	bl	8009f14 <fiprintf>
 8009ef8:	f000 fbd8 	bl	800a6ac <abort>
 8009efc:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <__assert_func+0x38>)
 8009efe:	461c      	mov	r4, r3
 8009f00:	e7f3      	b.n	8009eea <__assert_func+0x12>
 8009f02:	bf00      	nop
 8009f04:	20000070 	.word	0x20000070
 8009f08:	0800dffe 	.word	0x0800dffe
 8009f0c:	0800e00b 	.word	0x0800e00b
 8009f10:	0800e039 	.word	0x0800e039

08009f14 <fiprintf>:
 8009f14:	b40e      	push	{r1, r2, r3}
 8009f16:	b503      	push	{r0, r1, lr}
 8009f18:	4601      	mov	r1, r0
 8009f1a:	ab03      	add	r3, sp, #12
 8009f1c:	4805      	ldr	r0, [pc, #20]	; (8009f34 <fiprintf+0x20>)
 8009f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f22:	6800      	ldr	r0, [r0, #0]
 8009f24:	9301      	str	r3, [sp, #4]
 8009f26:	f000 f83d 	bl	8009fa4 <_vfiprintf_r>
 8009f2a:	b002      	add	sp, #8
 8009f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f30:	b003      	add	sp, #12
 8009f32:	4770      	bx	lr
 8009f34:	20000070 	.word	0x20000070

08009f38 <__malloc_lock>:
 8009f38:	4801      	ldr	r0, [pc, #4]	; (8009f40 <__malloc_lock+0x8>)
 8009f3a:	f000 bd77 	b.w	800aa2c <__retarget_lock_acquire_recursive>
 8009f3e:	bf00      	nop
 8009f40:	20000e44 	.word	0x20000e44

08009f44 <__malloc_unlock>:
 8009f44:	4801      	ldr	r0, [pc, #4]	; (8009f4c <__malloc_unlock+0x8>)
 8009f46:	f000 bd72 	b.w	800aa2e <__retarget_lock_release_recursive>
 8009f4a:	bf00      	nop
 8009f4c:	20000e44 	.word	0x20000e44

08009f50 <__sfputc_r>:
 8009f50:	6893      	ldr	r3, [r2, #8]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	b410      	push	{r4}
 8009f58:	6093      	str	r3, [r2, #8]
 8009f5a:	da08      	bge.n	8009f6e <__sfputc_r+0x1e>
 8009f5c:	6994      	ldr	r4, [r2, #24]
 8009f5e:	42a3      	cmp	r3, r4
 8009f60:	db01      	blt.n	8009f66 <__sfputc_r+0x16>
 8009f62:	290a      	cmp	r1, #10
 8009f64:	d103      	bne.n	8009f6e <__sfputc_r+0x1e>
 8009f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f6a:	f000 badf 	b.w	800a52c <__swbuf_r>
 8009f6e:	6813      	ldr	r3, [r2, #0]
 8009f70:	1c58      	adds	r0, r3, #1
 8009f72:	6010      	str	r0, [r2, #0]
 8009f74:	7019      	strb	r1, [r3, #0]
 8009f76:	4608      	mov	r0, r1
 8009f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <__sfputs_r>:
 8009f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f80:	4606      	mov	r6, r0
 8009f82:	460f      	mov	r7, r1
 8009f84:	4614      	mov	r4, r2
 8009f86:	18d5      	adds	r5, r2, r3
 8009f88:	42ac      	cmp	r4, r5
 8009f8a:	d101      	bne.n	8009f90 <__sfputs_r+0x12>
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	e007      	b.n	8009fa0 <__sfputs_r+0x22>
 8009f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f94:	463a      	mov	r2, r7
 8009f96:	4630      	mov	r0, r6
 8009f98:	f7ff ffda 	bl	8009f50 <__sfputc_r>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d1f3      	bne.n	8009f88 <__sfputs_r+0xa>
 8009fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fa4 <_vfiprintf_r>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	460d      	mov	r5, r1
 8009faa:	b09d      	sub	sp, #116	; 0x74
 8009fac:	4614      	mov	r4, r2
 8009fae:	4698      	mov	r8, r3
 8009fb0:	4606      	mov	r6, r0
 8009fb2:	b118      	cbz	r0, 8009fbc <_vfiprintf_r+0x18>
 8009fb4:	6983      	ldr	r3, [r0, #24]
 8009fb6:	b90b      	cbnz	r3, 8009fbc <_vfiprintf_r+0x18>
 8009fb8:	f000 fc9a 	bl	800a8f0 <__sinit>
 8009fbc:	4b89      	ldr	r3, [pc, #548]	; (800a1e4 <_vfiprintf_r+0x240>)
 8009fbe:	429d      	cmp	r5, r3
 8009fc0:	d11b      	bne.n	8009ffa <_vfiprintf_r+0x56>
 8009fc2:	6875      	ldr	r5, [r6, #4]
 8009fc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fc6:	07d9      	lsls	r1, r3, #31
 8009fc8:	d405      	bmi.n	8009fd6 <_vfiprintf_r+0x32>
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	059a      	lsls	r2, r3, #22
 8009fce:	d402      	bmi.n	8009fd6 <_vfiprintf_r+0x32>
 8009fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fd2:	f000 fd2b 	bl	800aa2c <__retarget_lock_acquire_recursive>
 8009fd6:	89ab      	ldrh	r3, [r5, #12]
 8009fd8:	071b      	lsls	r3, r3, #28
 8009fda:	d501      	bpl.n	8009fe0 <_vfiprintf_r+0x3c>
 8009fdc:	692b      	ldr	r3, [r5, #16]
 8009fde:	b9eb      	cbnz	r3, 800a01c <_vfiprintf_r+0x78>
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f000 faf4 	bl	800a5d0 <__swsetup_r>
 8009fe8:	b1c0      	cbz	r0, 800a01c <_vfiprintf_r+0x78>
 8009fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fec:	07dc      	lsls	r4, r3, #31
 8009fee:	d50e      	bpl.n	800a00e <_vfiprintf_r+0x6a>
 8009ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff4:	b01d      	add	sp, #116	; 0x74
 8009ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffa:	4b7b      	ldr	r3, [pc, #492]	; (800a1e8 <_vfiprintf_r+0x244>)
 8009ffc:	429d      	cmp	r5, r3
 8009ffe:	d101      	bne.n	800a004 <_vfiprintf_r+0x60>
 800a000:	68b5      	ldr	r5, [r6, #8]
 800a002:	e7df      	b.n	8009fc4 <_vfiprintf_r+0x20>
 800a004:	4b79      	ldr	r3, [pc, #484]	; (800a1ec <_vfiprintf_r+0x248>)
 800a006:	429d      	cmp	r5, r3
 800a008:	bf08      	it	eq
 800a00a:	68f5      	ldreq	r5, [r6, #12]
 800a00c:	e7da      	b.n	8009fc4 <_vfiprintf_r+0x20>
 800a00e:	89ab      	ldrh	r3, [r5, #12]
 800a010:	0598      	lsls	r0, r3, #22
 800a012:	d4ed      	bmi.n	8009ff0 <_vfiprintf_r+0x4c>
 800a014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a016:	f000 fd0a 	bl	800aa2e <__retarget_lock_release_recursive>
 800a01a:	e7e9      	b.n	8009ff0 <_vfiprintf_r+0x4c>
 800a01c:	2300      	movs	r3, #0
 800a01e:	9309      	str	r3, [sp, #36]	; 0x24
 800a020:	2320      	movs	r3, #32
 800a022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a026:	f8cd 800c 	str.w	r8, [sp, #12]
 800a02a:	2330      	movs	r3, #48	; 0x30
 800a02c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1f0 <_vfiprintf_r+0x24c>
 800a030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a034:	f04f 0901 	mov.w	r9, #1
 800a038:	4623      	mov	r3, r4
 800a03a:	469a      	mov	sl, r3
 800a03c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a040:	b10a      	cbz	r2, 800a046 <_vfiprintf_r+0xa2>
 800a042:	2a25      	cmp	r2, #37	; 0x25
 800a044:	d1f9      	bne.n	800a03a <_vfiprintf_r+0x96>
 800a046:	ebba 0b04 	subs.w	fp, sl, r4
 800a04a:	d00b      	beq.n	800a064 <_vfiprintf_r+0xc0>
 800a04c:	465b      	mov	r3, fp
 800a04e:	4622      	mov	r2, r4
 800a050:	4629      	mov	r1, r5
 800a052:	4630      	mov	r0, r6
 800a054:	f7ff ff93 	bl	8009f7e <__sfputs_r>
 800a058:	3001      	adds	r0, #1
 800a05a:	f000 80aa 	beq.w	800a1b2 <_vfiprintf_r+0x20e>
 800a05e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a060:	445a      	add	r2, fp
 800a062:	9209      	str	r2, [sp, #36]	; 0x24
 800a064:	f89a 3000 	ldrb.w	r3, [sl]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 80a2 	beq.w	800a1b2 <_vfiprintf_r+0x20e>
 800a06e:	2300      	movs	r3, #0
 800a070:	f04f 32ff 	mov.w	r2, #4294967295
 800a074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a078:	f10a 0a01 	add.w	sl, sl, #1
 800a07c:	9304      	str	r3, [sp, #16]
 800a07e:	9307      	str	r3, [sp, #28]
 800a080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a084:	931a      	str	r3, [sp, #104]	; 0x68
 800a086:	4654      	mov	r4, sl
 800a088:	2205      	movs	r2, #5
 800a08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a08e:	4858      	ldr	r0, [pc, #352]	; (800a1f0 <_vfiprintf_r+0x24c>)
 800a090:	f7f6 f89e 	bl	80001d0 <memchr>
 800a094:	9a04      	ldr	r2, [sp, #16]
 800a096:	b9d8      	cbnz	r0, 800a0d0 <_vfiprintf_r+0x12c>
 800a098:	06d1      	lsls	r1, r2, #27
 800a09a:	bf44      	itt	mi
 800a09c:	2320      	movmi	r3, #32
 800a09e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a2:	0713      	lsls	r3, r2, #28
 800a0a4:	bf44      	itt	mi
 800a0a6:	232b      	movmi	r3, #43	; 0x2b
 800a0a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b2:	d015      	beq.n	800a0e0 <_vfiprintf_r+0x13c>
 800a0b4:	9a07      	ldr	r2, [sp, #28]
 800a0b6:	4654      	mov	r4, sl
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	f04f 0c0a 	mov.w	ip, #10
 800a0be:	4621      	mov	r1, r4
 800a0c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0c4:	3b30      	subs	r3, #48	; 0x30
 800a0c6:	2b09      	cmp	r3, #9
 800a0c8:	d94e      	bls.n	800a168 <_vfiprintf_r+0x1c4>
 800a0ca:	b1b0      	cbz	r0, 800a0fa <_vfiprintf_r+0x156>
 800a0cc:	9207      	str	r2, [sp, #28]
 800a0ce:	e014      	b.n	800a0fa <_vfiprintf_r+0x156>
 800a0d0:	eba0 0308 	sub.w	r3, r0, r8
 800a0d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	46a2      	mov	sl, r4
 800a0de:	e7d2      	b.n	800a086 <_vfiprintf_r+0xe2>
 800a0e0:	9b03      	ldr	r3, [sp, #12]
 800a0e2:	1d19      	adds	r1, r3, #4
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	9103      	str	r1, [sp, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	bfbb      	ittet	lt
 800a0ec:	425b      	neglt	r3, r3
 800a0ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a0f2:	9307      	strge	r3, [sp, #28]
 800a0f4:	9307      	strlt	r3, [sp, #28]
 800a0f6:	bfb8      	it	lt
 800a0f8:	9204      	strlt	r2, [sp, #16]
 800a0fa:	7823      	ldrb	r3, [r4, #0]
 800a0fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a0fe:	d10c      	bne.n	800a11a <_vfiprintf_r+0x176>
 800a100:	7863      	ldrb	r3, [r4, #1]
 800a102:	2b2a      	cmp	r3, #42	; 0x2a
 800a104:	d135      	bne.n	800a172 <_vfiprintf_r+0x1ce>
 800a106:	9b03      	ldr	r3, [sp, #12]
 800a108:	1d1a      	adds	r2, r3, #4
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	9203      	str	r2, [sp, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	bfb8      	it	lt
 800a112:	f04f 33ff 	movlt.w	r3, #4294967295
 800a116:	3402      	adds	r4, #2
 800a118:	9305      	str	r3, [sp, #20]
 800a11a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a200 <_vfiprintf_r+0x25c>
 800a11e:	7821      	ldrb	r1, [r4, #0]
 800a120:	2203      	movs	r2, #3
 800a122:	4650      	mov	r0, sl
 800a124:	f7f6 f854 	bl	80001d0 <memchr>
 800a128:	b140      	cbz	r0, 800a13c <_vfiprintf_r+0x198>
 800a12a:	2340      	movs	r3, #64	; 0x40
 800a12c:	eba0 000a 	sub.w	r0, r0, sl
 800a130:	fa03 f000 	lsl.w	r0, r3, r0
 800a134:	9b04      	ldr	r3, [sp, #16]
 800a136:	4303      	orrs	r3, r0
 800a138:	3401      	adds	r4, #1
 800a13a:	9304      	str	r3, [sp, #16]
 800a13c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a140:	482c      	ldr	r0, [pc, #176]	; (800a1f4 <_vfiprintf_r+0x250>)
 800a142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a146:	2206      	movs	r2, #6
 800a148:	f7f6 f842 	bl	80001d0 <memchr>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d03f      	beq.n	800a1d0 <_vfiprintf_r+0x22c>
 800a150:	4b29      	ldr	r3, [pc, #164]	; (800a1f8 <_vfiprintf_r+0x254>)
 800a152:	bb1b      	cbnz	r3, 800a19c <_vfiprintf_r+0x1f8>
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	3307      	adds	r3, #7
 800a158:	f023 0307 	bic.w	r3, r3, #7
 800a15c:	3308      	adds	r3, #8
 800a15e:	9303      	str	r3, [sp, #12]
 800a160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a162:	443b      	add	r3, r7
 800a164:	9309      	str	r3, [sp, #36]	; 0x24
 800a166:	e767      	b.n	800a038 <_vfiprintf_r+0x94>
 800a168:	fb0c 3202 	mla	r2, ip, r2, r3
 800a16c:	460c      	mov	r4, r1
 800a16e:	2001      	movs	r0, #1
 800a170:	e7a5      	b.n	800a0be <_vfiprintf_r+0x11a>
 800a172:	2300      	movs	r3, #0
 800a174:	3401      	adds	r4, #1
 800a176:	9305      	str	r3, [sp, #20]
 800a178:	4619      	mov	r1, r3
 800a17a:	f04f 0c0a 	mov.w	ip, #10
 800a17e:	4620      	mov	r0, r4
 800a180:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a184:	3a30      	subs	r2, #48	; 0x30
 800a186:	2a09      	cmp	r2, #9
 800a188:	d903      	bls.n	800a192 <_vfiprintf_r+0x1ee>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d0c5      	beq.n	800a11a <_vfiprintf_r+0x176>
 800a18e:	9105      	str	r1, [sp, #20]
 800a190:	e7c3      	b.n	800a11a <_vfiprintf_r+0x176>
 800a192:	fb0c 2101 	mla	r1, ip, r1, r2
 800a196:	4604      	mov	r4, r0
 800a198:	2301      	movs	r3, #1
 800a19a:	e7f0      	b.n	800a17e <_vfiprintf_r+0x1da>
 800a19c:	ab03      	add	r3, sp, #12
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	462a      	mov	r2, r5
 800a1a2:	4b16      	ldr	r3, [pc, #88]	; (800a1fc <_vfiprintf_r+0x258>)
 800a1a4:	a904      	add	r1, sp, #16
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f3af 8000 	nop.w
 800a1ac:	4607      	mov	r7, r0
 800a1ae:	1c78      	adds	r0, r7, #1
 800a1b0:	d1d6      	bne.n	800a160 <_vfiprintf_r+0x1bc>
 800a1b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1b4:	07d9      	lsls	r1, r3, #31
 800a1b6:	d405      	bmi.n	800a1c4 <_vfiprintf_r+0x220>
 800a1b8:	89ab      	ldrh	r3, [r5, #12]
 800a1ba:	059a      	lsls	r2, r3, #22
 800a1bc:	d402      	bmi.n	800a1c4 <_vfiprintf_r+0x220>
 800a1be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1c0:	f000 fc35 	bl	800aa2e <__retarget_lock_release_recursive>
 800a1c4:	89ab      	ldrh	r3, [r5, #12]
 800a1c6:	065b      	lsls	r3, r3, #25
 800a1c8:	f53f af12 	bmi.w	8009ff0 <_vfiprintf_r+0x4c>
 800a1cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1ce:	e711      	b.n	8009ff4 <_vfiprintf_r+0x50>
 800a1d0:	ab03      	add	r3, sp, #12
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4b09      	ldr	r3, [pc, #36]	; (800a1fc <_vfiprintf_r+0x258>)
 800a1d8:	a904      	add	r1, sp, #16
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f000 f880 	bl	800a2e0 <_printf_i>
 800a1e0:	e7e4      	b.n	800a1ac <_vfiprintf_r+0x208>
 800a1e2:	bf00      	nop
 800a1e4:	0800e090 	.word	0x0800e090
 800a1e8:	0800e0b0 	.word	0x0800e0b0
 800a1ec:	0800e070 	.word	0x0800e070
 800a1f0:	0800e03a 	.word	0x0800e03a
 800a1f4:	0800e044 	.word	0x0800e044
 800a1f8:	00000000 	.word	0x00000000
 800a1fc:	08009f7f 	.word	0x08009f7f
 800a200:	0800e040 	.word	0x0800e040

0800a204 <_printf_common>:
 800a204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a208:	4616      	mov	r6, r2
 800a20a:	4699      	mov	r9, r3
 800a20c:	688a      	ldr	r2, [r1, #8]
 800a20e:	690b      	ldr	r3, [r1, #16]
 800a210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a214:	4293      	cmp	r3, r2
 800a216:	bfb8      	it	lt
 800a218:	4613      	movlt	r3, r2
 800a21a:	6033      	str	r3, [r6, #0]
 800a21c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a220:	4607      	mov	r7, r0
 800a222:	460c      	mov	r4, r1
 800a224:	b10a      	cbz	r2, 800a22a <_printf_common+0x26>
 800a226:	3301      	adds	r3, #1
 800a228:	6033      	str	r3, [r6, #0]
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	0699      	lsls	r1, r3, #26
 800a22e:	bf42      	ittt	mi
 800a230:	6833      	ldrmi	r3, [r6, #0]
 800a232:	3302      	addmi	r3, #2
 800a234:	6033      	strmi	r3, [r6, #0]
 800a236:	6825      	ldr	r5, [r4, #0]
 800a238:	f015 0506 	ands.w	r5, r5, #6
 800a23c:	d106      	bne.n	800a24c <_printf_common+0x48>
 800a23e:	f104 0a19 	add.w	sl, r4, #25
 800a242:	68e3      	ldr	r3, [r4, #12]
 800a244:	6832      	ldr	r2, [r6, #0]
 800a246:	1a9b      	subs	r3, r3, r2
 800a248:	42ab      	cmp	r3, r5
 800a24a:	dc26      	bgt.n	800a29a <_printf_common+0x96>
 800a24c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a250:	1e13      	subs	r3, r2, #0
 800a252:	6822      	ldr	r2, [r4, #0]
 800a254:	bf18      	it	ne
 800a256:	2301      	movne	r3, #1
 800a258:	0692      	lsls	r2, r2, #26
 800a25a:	d42b      	bmi.n	800a2b4 <_printf_common+0xb0>
 800a25c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a260:	4649      	mov	r1, r9
 800a262:	4638      	mov	r0, r7
 800a264:	47c0      	blx	r8
 800a266:	3001      	adds	r0, #1
 800a268:	d01e      	beq.n	800a2a8 <_printf_common+0xa4>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	68e5      	ldr	r5, [r4, #12]
 800a26e:	6832      	ldr	r2, [r6, #0]
 800a270:	f003 0306 	and.w	r3, r3, #6
 800a274:	2b04      	cmp	r3, #4
 800a276:	bf08      	it	eq
 800a278:	1aad      	subeq	r5, r5, r2
 800a27a:	68a3      	ldr	r3, [r4, #8]
 800a27c:	6922      	ldr	r2, [r4, #16]
 800a27e:	bf0c      	ite	eq
 800a280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a284:	2500      	movne	r5, #0
 800a286:	4293      	cmp	r3, r2
 800a288:	bfc4      	itt	gt
 800a28a:	1a9b      	subgt	r3, r3, r2
 800a28c:	18ed      	addgt	r5, r5, r3
 800a28e:	2600      	movs	r6, #0
 800a290:	341a      	adds	r4, #26
 800a292:	42b5      	cmp	r5, r6
 800a294:	d11a      	bne.n	800a2cc <_printf_common+0xc8>
 800a296:	2000      	movs	r0, #0
 800a298:	e008      	b.n	800a2ac <_printf_common+0xa8>
 800a29a:	2301      	movs	r3, #1
 800a29c:	4652      	mov	r2, sl
 800a29e:	4649      	mov	r1, r9
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	47c0      	blx	r8
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d103      	bne.n	800a2b0 <_printf_common+0xac>
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b0:	3501      	adds	r5, #1
 800a2b2:	e7c6      	b.n	800a242 <_printf_common+0x3e>
 800a2b4:	18e1      	adds	r1, r4, r3
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	2030      	movs	r0, #48	; 0x30
 800a2ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2be:	4422      	add	r2, r4
 800a2c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2c8:	3302      	adds	r3, #2
 800a2ca:	e7c7      	b.n	800a25c <_printf_common+0x58>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	4622      	mov	r2, r4
 800a2d0:	4649      	mov	r1, r9
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	47c0      	blx	r8
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	d0e6      	beq.n	800a2a8 <_printf_common+0xa4>
 800a2da:	3601      	adds	r6, #1
 800a2dc:	e7d9      	b.n	800a292 <_printf_common+0x8e>
	...

0800a2e0 <_printf_i>:
 800a2e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	4691      	mov	r9, r2
 800a2e8:	7e27      	ldrb	r7, [r4, #24]
 800a2ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a2ec:	2f78      	cmp	r7, #120	; 0x78
 800a2ee:	4680      	mov	r8, r0
 800a2f0:	469a      	mov	sl, r3
 800a2f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2f6:	d807      	bhi.n	800a308 <_printf_i+0x28>
 800a2f8:	2f62      	cmp	r7, #98	; 0x62
 800a2fa:	d80a      	bhi.n	800a312 <_printf_i+0x32>
 800a2fc:	2f00      	cmp	r7, #0
 800a2fe:	f000 80d8 	beq.w	800a4b2 <_printf_i+0x1d2>
 800a302:	2f58      	cmp	r7, #88	; 0x58
 800a304:	f000 80a3 	beq.w	800a44e <_printf_i+0x16e>
 800a308:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a30c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a310:	e03a      	b.n	800a388 <_printf_i+0xa8>
 800a312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a316:	2b15      	cmp	r3, #21
 800a318:	d8f6      	bhi.n	800a308 <_printf_i+0x28>
 800a31a:	a001      	add	r0, pc, #4	; (adr r0, 800a320 <_printf_i+0x40>)
 800a31c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a320:	0800a379 	.word	0x0800a379
 800a324:	0800a38d 	.word	0x0800a38d
 800a328:	0800a309 	.word	0x0800a309
 800a32c:	0800a309 	.word	0x0800a309
 800a330:	0800a309 	.word	0x0800a309
 800a334:	0800a309 	.word	0x0800a309
 800a338:	0800a38d 	.word	0x0800a38d
 800a33c:	0800a309 	.word	0x0800a309
 800a340:	0800a309 	.word	0x0800a309
 800a344:	0800a309 	.word	0x0800a309
 800a348:	0800a309 	.word	0x0800a309
 800a34c:	0800a499 	.word	0x0800a499
 800a350:	0800a3bd 	.word	0x0800a3bd
 800a354:	0800a47b 	.word	0x0800a47b
 800a358:	0800a309 	.word	0x0800a309
 800a35c:	0800a309 	.word	0x0800a309
 800a360:	0800a4bb 	.word	0x0800a4bb
 800a364:	0800a309 	.word	0x0800a309
 800a368:	0800a3bd 	.word	0x0800a3bd
 800a36c:	0800a309 	.word	0x0800a309
 800a370:	0800a309 	.word	0x0800a309
 800a374:	0800a483 	.word	0x0800a483
 800a378:	680b      	ldr	r3, [r1, #0]
 800a37a:	1d1a      	adds	r2, r3, #4
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	600a      	str	r2, [r1, #0]
 800a380:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a388:	2301      	movs	r3, #1
 800a38a:	e0a3      	b.n	800a4d4 <_printf_i+0x1f4>
 800a38c:	6825      	ldr	r5, [r4, #0]
 800a38e:	6808      	ldr	r0, [r1, #0]
 800a390:	062e      	lsls	r6, r5, #24
 800a392:	f100 0304 	add.w	r3, r0, #4
 800a396:	d50a      	bpl.n	800a3ae <_printf_i+0xce>
 800a398:	6805      	ldr	r5, [r0, #0]
 800a39a:	600b      	str	r3, [r1, #0]
 800a39c:	2d00      	cmp	r5, #0
 800a39e:	da03      	bge.n	800a3a8 <_printf_i+0xc8>
 800a3a0:	232d      	movs	r3, #45	; 0x2d
 800a3a2:	426d      	negs	r5, r5
 800a3a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3a8:	485e      	ldr	r0, [pc, #376]	; (800a524 <_printf_i+0x244>)
 800a3aa:	230a      	movs	r3, #10
 800a3ac:	e019      	b.n	800a3e2 <_printf_i+0x102>
 800a3ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a3b2:	6805      	ldr	r5, [r0, #0]
 800a3b4:	600b      	str	r3, [r1, #0]
 800a3b6:	bf18      	it	ne
 800a3b8:	b22d      	sxthne	r5, r5
 800a3ba:	e7ef      	b.n	800a39c <_printf_i+0xbc>
 800a3bc:	680b      	ldr	r3, [r1, #0]
 800a3be:	6825      	ldr	r5, [r4, #0]
 800a3c0:	1d18      	adds	r0, r3, #4
 800a3c2:	6008      	str	r0, [r1, #0]
 800a3c4:	0628      	lsls	r0, r5, #24
 800a3c6:	d501      	bpl.n	800a3cc <_printf_i+0xec>
 800a3c8:	681d      	ldr	r5, [r3, #0]
 800a3ca:	e002      	b.n	800a3d2 <_printf_i+0xf2>
 800a3cc:	0669      	lsls	r1, r5, #25
 800a3ce:	d5fb      	bpl.n	800a3c8 <_printf_i+0xe8>
 800a3d0:	881d      	ldrh	r5, [r3, #0]
 800a3d2:	4854      	ldr	r0, [pc, #336]	; (800a524 <_printf_i+0x244>)
 800a3d4:	2f6f      	cmp	r7, #111	; 0x6f
 800a3d6:	bf0c      	ite	eq
 800a3d8:	2308      	moveq	r3, #8
 800a3da:	230a      	movne	r3, #10
 800a3dc:	2100      	movs	r1, #0
 800a3de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3e2:	6866      	ldr	r6, [r4, #4]
 800a3e4:	60a6      	str	r6, [r4, #8]
 800a3e6:	2e00      	cmp	r6, #0
 800a3e8:	bfa2      	ittt	ge
 800a3ea:	6821      	ldrge	r1, [r4, #0]
 800a3ec:	f021 0104 	bicge.w	r1, r1, #4
 800a3f0:	6021      	strge	r1, [r4, #0]
 800a3f2:	b90d      	cbnz	r5, 800a3f8 <_printf_i+0x118>
 800a3f4:	2e00      	cmp	r6, #0
 800a3f6:	d04d      	beq.n	800a494 <_printf_i+0x1b4>
 800a3f8:	4616      	mov	r6, r2
 800a3fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3fe:	fb03 5711 	mls	r7, r3, r1, r5
 800a402:	5dc7      	ldrb	r7, [r0, r7]
 800a404:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a408:	462f      	mov	r7, r5
 800a40a:	42bb      	cmp	r3, r7
 800a40c:	460d      	mov	r5, r1
 800a40e:	d9f4      	bls.n	800a3fa <_printf_i+0x11a>
 800a410:	2b08      	cmp	r3, #8
 800a412:	d10b      	bne.n	800a42c <_printf_i+0x14c>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	07df      	lsls	r7, r3, #31
 800a418:	d508      	bpl.n	800a42c <_printf_i+0x14c>
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	6861      	ldr	r1, [r4, #4]
 800a41e:	4299      	cmp	r1, r3
 800a420:	bfde      	ittt	le
 800a422:	2330      	movle	r3, #48	; 0x30
 800a424:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a428:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a42c:	1b92      	subs	r2, r2, r6
 800a42e:	6122      	str	r2, [r4, #16]
 800a430:	f8cd a000 	str.w	sl, [sp]
 800a434:	464b      	mov	r3, r9
 800a436:	aa03      	add	r2, sp, #12
 800a438:	4621      	mov	r1, r4
 800a43a:	4640      	mov	r0, r8
 800a43c:	f7ff fee2 	bl	800a204 <_printf_common>
 800a440:	3001      	adds	r0, #1
 800a442:	d14c      	bne.n	800a4de <_printf_i+0x1fe>
 800a444:	f04f 30ff 	mov.w	r0, #4294967295
 800a448:	b004      	add	sp, #16
 800a44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a44e:	4835      	ldr	r0, [pc, #212]	; (800a524 <_printf_i+0x244>)
 800a450:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a454:	6823      	ldr	r3, [r4, #0]
 800a456:	680e      	ldr	r6, [r1, #0]
 800a458:	061f      	lsls	r7, r3, #24
 800a45a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a45e:	600e      	str	r6, [r1, #0]
 800a460:	d514      	bpl.n	800a48c <_printf_i+0x1ac>
 800a462:	07d9      	lsls	r1, r3, #31
 800a464:	bf44      	itt	mi
 800a466:	f043 0320 	orrmi.w	r3, r3, #32
 800a46a:	6023      	strmi	r3, [r4, #0]
 800a46c:	b91d      	cbnz	r5, 800a476 <_printf_i+0x196>
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	f023 0320 	bic.w	r3, r3, #32
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	2310      	movs	r3, #16
 800a478:	e7b0      	b.n	800a3dc <_printf_i+0xfc>
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	f043 0320 	orr.w	r3, r3, #32
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	2378      	movs	r3, #120	; 0x78
 800a484:	4828      	ldr	r0, [pc, #160]	; (800a528 <_printf_i+0x248>)
 800a486:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a48a:	e7e3      	b.n	800a454 <_printf_i+0x174>
 800a48c:	065e      	lsls	r6, r3, #25
 800a48e:	bf48      	it	mi
 800a490:	b2ad      	uxthmi	r5, r5
 800a492:	e7e6      	b.n	800a462 <_printf_i+0x182>
 800a494:	4616      	mov	r6, r2
 800a496:	e7bb      	b.n	800a410 <_printf_i+0x130>
 800a498:	680b      	ldr	r3, [r1, #0]
 800a49a:	6826      	ldr	r6, [r4, #0]
 800a49c:	6960      	ldr	r0, [r4, #20]
 800a49e:	1d1d      	adds	r5, r3, #4
 800a4a0:	600d      	str	r5, [r1, #0]
 800a4a2:	0635      	lsls	r5, r6, #24
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	d501      	bpl.n	800a4ac <_printf_i+0x1cc>
 800a4a8:	6018      	str	r0, [r3, #0]
 800a4aa:	e002      	b.n	800a4b2 <_printf_i+0x1d2>
 800a4ac:	0671      	lsls	r1, r6, #25
 800a4ae:	d5fb      	bpl.n	800a4a8 <_printf_i+0x1c8>
 800a4b0:	8018      	strh	r0, [r3, #0]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	6123      	str	r3, [r4, #16]
 800a4b6:	4616      	mov	r6, r2
 800a4b8:	e7ba      	b.n	800a430 <_printf_i+0x150>
 800a4ba:	680b      	ldr	r3, [r1, #0]
 800a4bc:	1d1a      	adds	r2, r3, #4
 800a4be:	600a      	str	r2, [r1, #0]
 800a4c0:	681e      	ldr	r6, [r3, #0]
 800a4c2:	6862      	ldr	r2, [r4, #4]
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f7f5 fe82 	bl	80001d0 <memchr>
 800a4cc:	b108      	cbz	r0, 800a4d2 <_printf_i+0x1f2>
 800a4ce:	1b80      	subs	r0, r0, r6
 800a4d0:	6060      	str	r0, [r4, #4]
 800a4d2:	6863      	ldr	r3, [r4, #4]
 800a4d4:	6123      	str	r3, [r4, #16]
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4dc:	e7a8      	b.n	800a430 <_printf_i+0x150>
 800a4de:	6923      	ldr	r3, [r4, #16]
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	4640      	mov	r0, r8
 800a4e6:	47d0      	blx	sl
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	d0ab      	beq.n	800a444 <_printf_i+0x164>
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	079b      	lsls	r3, r3, #30
 800a4f0:	d413      	bmi.n	800a51a <_printf_i+0x23a>
 800a4f2:	68e0      	ldr	r0, [r4, #12]
 800a4f4:	9b03      	ldr	r3, [sp, #12]
 800a4f6:	4298      	cmp	r0, r3
 800a4f8:	bfb8      	it	lt
 800a4fa:	4618      	movlt	r0, r3
 800a4fc:	e7a4      	b.n	800a448 <_printf_i+0x168>
 800a4fe:	2301      	movs	r3, #1
 800a500:	4632      	mov	r2, r6
 800a502:	4649      	mov	r1, r9
 800a504:	4640      	mov	r0, r8
 800a506:	47d0      	blx	sl
 800a508:	3001      	adds	r0, #1
 800a50a:	d09b      	beq.n	800a444 <_printf_i+0x164>
 800a50c:	3501      	adds	r5, #1
 800a50e:	68e3      	ldr	r3, [r4, #12]
 800a510:	9903      	ldr	r1, [sp, #12]
 800a512:	1a5b      	subs	r3, r3, r1
 800a514:	42ab      	cmp	r3, r5
 800a516:	dcf2      	bgt.n	800a4fe <_printf_i+0x21e>
 800a518:	e7eb      	b.n	800a4f2 <_printf_i+0x212>
 800a51a:	2500      	movs	r5, #0
 800a51c:	f104 0619 	add.w	r6, r4, #25
 800a520:	e7f5      	b.n	800a50e <_printf_i+0x22e>
 800a522:	bf00      	nop
 800a524:	0800e04b 	.word	0x0800e04b
 800a528:	0800e05c 	.word	0x0800e05c

0800a52c <__swbuf_r>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	460e      	mov	r6, r1
 800a530:	4614      	mov	r4, r2
 800a532:	4605      	mov	r5, r0
 800a534:	b118      	cbz	r0, 800a53e <__swbuf_r+0x12>
 800a536:	6983      	ldr	r3, [r0, #24]
 800a538:	b90b      	cbnz	r3, 800a53e <__swbuf_r+0x12>
 800a53a:	f000 f9d9 	bl	800a8f0 <__sinit>
 800a53e:	4b21      	ldr	r3, [pc, #132]	; (800a5c4 <__swbuf_r+0x98>)
 800a540:	429c      	cmp	r4, r3
 800a542:	d12b      	bne.n	800a59c <__swbuf_r+0x70>
 800a544:	686c      	ldr	r4, [r5, #4]
 800a546:	69a3      	ldr	r3, [r4, #24]
 800a548:	60a3      	str	r3, [r4, #8]
 800a54a:	89a3      	ldrh	r3, [r4, #12]
 800a54c:	071a      	lsls	r2, r3, #28
 800a54e:	d52f      	bpl.n	800a5b0 <__swbuf_r+0x84>
 800a550:	6923      	ldr	r3, [r4, #16]
 800a552:	b36b      	cbz	r3, 800a5b0 <__swbuf_r+0x84>
 800a554:	6923      	ldr	r3, [r4, #16]
 800a556:	6820      	ldr	r0, [r4, #0]
 800a558:	1ac0      	subs	r0, r0, r3
 800a55a:	6963      	ldr	r3, [r4, #20]
 800a55c:	b2f6      	uxtb	r6, r6
 800a55e:	4283      	cmp	r3, r0
 800a560:	4637      	mov	r7, r6
 800a562:	dc04      	bgt.n	800a56e <__swbuf_r+0x42>
 800a564:	4621      	mov	r1, r4
 800a566:	4628      	mov	r0, r5
 800a568:	f000 f92e 	bl	800a7c8 <_fflush_r>
 800a56c:	bb30      	cbnz	r0, 800a5bc <__swbuf_r+0x90>
 800a56e:	68a3      	ldr	r3, [r4, #8]
 800a570:	3b01      	subs	r3, #1
 800a572:	60a3      	str	r3, [r4, #8]
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	6022      	str	r2, [r4, #0]
 800a57a:	701e      	strb	r6, [r3, #0]
 800a57c:	6963      	ldr	r3, [r4, #20]
 800a57e:	3001      	adds	r0, #1
 800a580:	4283      	cmp	r3, r0
 800a582:	d004      	beq.n	800a58e <__swbuf_r+0x62>
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	07db      	lsls	r3, r3, #31
 800a588:	d506      	bpl.n	800a598 <__swbuf_r+0x6c>
 800a58a:	2e0a      	cmp	r6, #10
 800a58c:	d104      	bne.n	800a598 <__swbuf_r+0x6c>
 800a58e:	4621      	mov	r1, r4
 800a590:	4628      	mov	r0, r5
 800a592:	f000 f919 	bl	800a7c8 <_fflush_r>
 800a596:	b988      	cbnz	r0, 800a5bc <__swbuf_r+0x90>
 800a598:	4638      	mov	r0, r7
 800a59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a59c:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <__swbuf_r+0x9c>)
 800a59e:	429c      	cmp	r4, r3
 800a5a0:	d101      	bne.n	800a5a6 <__swbuf_r+0x7a>
 800a5a2:	68ac      	ldr	r4, [r5, #8]
 800a5a4:	e7cf      	b.n	800a546 <__swbuf_r+0x1a>
 800a5a6:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <__swbuf_r+0xa0>)
 800a5a8:	429c      	cmp	r4, r3
 800a5aa:	bf08      	it	eq
 800a5ac:	68ec      	ldreq	r4, [r5, #12]
 800a5ae:	e7ca      	b.n	800a546 <__swbuf_r+0x1a>
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f000 f80c 	bl	800a5d0 <__swsetup_r>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d0cb      	beq.n	800a554 <__swbuf_r+0x28>
 800a5bc:	f04f 37ff 	mov.w	r7, #4294967295
 800a5c0:	e7ea      	b.n	800a598 <__swbuf_r+0x6c>
 800a5c2:	bf00      	nop
 800a5c4:	0800e090 	.word	0x0800e090
 800a5c8:	0800e0b0 	.word	0x0800e0b0
 800a5cc:	0800e070 	.word	0x0800e070

0800a5d0 <__swsetup_r>:
 800a5d0:	4b32      	ldr	r3, [pc, #200]	; (800a69c <__swsetup_r+0xcc>)
 800a5d2:	b570      	push	{r4, r5, r6, lr}
 800a5d4:	681d      	ldr	r5, [r3, #0]
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	460c      	mov	r4, r1
 800a5da:	b125      	cbz	r5, 800a5e6 <__swsetup_r+0x16>
 800a5dc:	69ab      	ldr	r3, [r5, #24]
 800a5de:	b913      	cbnz	r3, 800a5e6 <__swsetup_r+0x16>
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f000 f985 	bl	800a8f0 <__sinit>
 800a5e6:	4b2e      	ldr	r3, [pc, #184]	; (800a6a0 <__swsetup_r+0xd0>)
 800a5e8:	429c      	cmp	r4, r3
 800a5ea:	d10f      	bne.n	800a60c <__swsetup_r+0x3c>
 800a5ec:	686c      	ldr	r4, [r5, #4]
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5f4:	0719      	lsls	r1, r3, #28
 800a5f6:	d42c      	bmi.n	800a652 <__swsetup_r+0x82>
 800a5f8:	06dd      	lsls	r5, r3, #27
 800a5fa:	d411      	bmi.n	800a620 <__swsetup_r+0x50>
 800a5fc:	2309      	movs	r3, #9
 800a5fe:	6033      	str	r3, [r6, #0]
 800a600:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a604:	81a3      	strh	r3, [r4, #12]
 800a606:	f04f 30ff 	mov.w	r0, #4294967295
 800a60a:	e03e      	b.n	800a68a <__swsetup_r+0xba>
 800a60c:	4b25      	ldr	r3, [pc, #148]	; (800a6a4 <__swsetup_r+0xd4>)
 800a60e:	429c      	cmp	r4, r3
 800a610:	d101      	bne.n	800a616 <__swsetup_r+0x46>
 800a612:	68ac      	ldr	r4, [r5, #8]
 800a614:	e7eb      	b.n	800a5ee <__swsetup_r+0x1e>
 800a616:	4b24      	ldr	r3, [pc, #144]	; (800a6a8 <__swsetup_r+0xd8>)
 800a618:	429c      	cmp	r4, r3
 800a61a:	bf08      	it	eq
 800a61c:	68ec      	ldreq	r4, [r5, #12]
 800a61e:	e7e6      	b.n	800a5ee <__swsetup_r+0x1e>
 800a620:	0758      	lsls	r0, r3, #29
 800a622:	d512      	bpl.n	800a64a <__swsetup_r+0x7a>
 800a624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a626:	b141      	cbz	r1, 800a63a <__swsetup_r+0x6a>
 800a628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a62c:	4299      	cmp	r1, r3
 800a62e:	d002      	beq.n	800a636 <__swsetup_r+0x66>
 800a630:	4630      	mov	r0, r6
 800a632:	f7ff fb57 	bl	8009ce4 <_free_r>
 800a636:	2300      	movs	r3, #0
 800a638:	6363      	str	r3, [r4, #52]	; 0x34
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a640:	81a3      	strh	r3, [r4, #12]
 800a642:	2300      	movs	r3, #0
 800a644:	6063      	str	r3, [r4, #4]
 800a646:	6923      	ldr	r3, [r4, #16]
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	89a3      	ldrh	r3, [r4, #12]
 800a64c:	f043 0308 	orr.w	r3, r3, #8
 800a650:	81a3      	strh	r3, [r4, #12]
 800a652:	6923      	ldr	r3, [r4, #16]
 800a654:	b94b      	cbnz	r3, 800a66a <__swsetup_r+0x9a>
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a65c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a660:	d003      	beq.n	800a66a <__swsetup_r+0x9a>
 800a662:	4621      	mov	r1, r4
 800a664:	4630      	mov	r0, r6
 800a666:	f000 fa07 	bl	800aa78 <__smakebuf_r>
 800a66a:	89a0      	ldrh	r0, [r4, #12]
 800a66c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a670:	f010 0301 	ands.w	r3, r0, #1
 800a674:	d00a      	beq.n	800a68c <__swsetup_r+0xbc>
 800a676:	2300      	movs	r3, #0
 800a678:	60a3      	str	r3, [r4, #8]
 800a67a:	6963      	ldr	r3, [r4, #20]
 800a67c:	425b      	negs	r3, r3
 800a67e:	61a3      	str	r3, [r4, #24]
 800a680:	6923      	ldr	r3, [r4, #16]
 800a682:	b943      	cbnz	r3, 800a696 <__swsetup_r+0xc6>
 800a684:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a688:	d1ba      	bne.n	800a600 <__swsetup_r+0x30>
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	0781      	lsls	r1, r0, #30
 800a68e:	bf58      	it	pl
 800a690:	6963      	ldrpl	r3, [r4, #20]
 800a692:	60a3      	str	r3, [r4, #8]
 800a694:	e7f4      	b.n	800a680 <__swsetup_r+0xb0>
 800a696:	2000      	movs	r0, #0
 800a698:	e7f7      	b.n	800a68a <__swsetup_r+0xba>
 800a69a:	bf00      	nop
 800a69c:	20000070 	.word	0x20000070
 800a6a0:	0800e090 	.word	0x0800e090
 800a6a4:	0800e0b0 	.word	0x0800e0b0
 800a6a8:	0800e070 	.word	0x0800e070

0800a6ac <abort>:
 800a6ac:	b508      	push	{r3, lr}
 800a6ae:	2006      	movs	r0, #6
 800a6b0:	f000 fa4a 	bl	800ab48 <raise>
 800a6b4:	2001      	movs	r0, #1
 800a6b6:	f7f8 fefd 	bl	80034b4 <_exit>
	...

0800a6bc <__sflush_r>:
 800a6bc:	898a      	ldrh	r2, [r1, #12]
 800a6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	0710      	lsls	r0, r2, #28
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	d458      	bmi.n	800a77c <__sflush_r+0xc0>
 800a6ca:	684b      	ldr	r3, [r1, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	dc05      	bgt.n	800a6dc <__sflush_r+0x20>
 800a6d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	dc02      	bgt.n	800a6dc <__sflush_r+0x20>
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6de:	2e00      	cmp	r6, #0
 800a6e0:	d0f9      	beq.n	800a6d6 <__sflush_r+0x1a>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6e8:	682f      	ldr	r7, [r5, #0]
 800a6ea:	602b      	str	r3, [r5, #0]
 800a6ec:	d032      	beq.n	800a754 <__sflush_r+0x98>
 800a6ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	075a      	lsls	r2, r3, #29
 800a6f4:	d505      	bpl.n	800a702 <__sflush_r+0x46>
 800a6f6:	6863      	ldr	r3, [r4, #4]
 800a6f8:	1ac0      	subs	r0, r0, r3
 800a6fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6fc:	b10b      	cbz	r3, 800a702 <__sflush_r+0x46>
 800a6fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a700:	1ac0      	subs	r0, r0, r3
 800a702:	2300      	movs	r3, #0
 800a704:	4602      	mov	r2, r0
 800a706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a708:	6a21      	ldr	r1, [r4, #32]
 800a70a:	4628      	mov	r0, r5
 800a70c:	47b0      	blx	r6
 800a70e:	1c43      	adds	r3, r0, #1
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	d106      	bne.n	800a722 <__sflush_r+0x66>
 800a714:	6829      	ldr	r1, [r5, #0]
 800a716:	291d      	cmp	r1, #29
 800a718:	d82c      	bhi.n	800a774 <__sflush_r+0xb8>
 800a71a:	4a2a      	ldr	r2, [pc, #168]	; (800a7c4 <__sflush_r+0x108>)
 800a71c:	40ca      	lsrs	r2, r1
 800a71e:	07d6      	lsls	r6, r2, #31
 800a720:	d528      	bpl.n	800a774 <__sflush_r+0xb8>
 800a722:	2200      	movs	r2, #0
 800a724:	6062      	str	r2, [r4, #4]
 800a726:	04d9      	lsls	r1, r3, #19
 800a728:	6922      	ldr	r2, [r4, #16]
 800a72a:	6022      	str	r2, [r4, #0]
 800a72c:	d504      	bpl.n	800a738 <__sflush_r+0x7c>
 800a72e:	1c42      	adds	r2, r0, #1
 800a730:	d101      	bne.n	800a736 <__sflush_r+0x7a>
 800a732:	682b      	ldr	r3, [r5, #0]
 800a734:	b903      	cbnz	r3, 800a738 <__sflush_r+0x7c>
 800a736:	6560      	str	r0, [r4, #84]	; 0x54
 800a738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a73a:	602f      	str	r7, [r5, #0]
 800a73c:	2900      	cmp	r1, #0
 800a73e:	d0ca      	beq.n	800a6d6 <__sflush_r+0x1a>
 800a740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a744:	4299      	cmp	r1, r3
 800a746:	d002      	beq.n	800a74e <__sflush_r+0x92>
 800a748:	4628      	mov	r0, r5
 800a74a:	f7ff facb 	bl	8009ce4 <_free_r>
 800a74e:	2000      	movs	r0, #0
 800a750:	6360      	str	r0, [r4, #52]	; 0x34
 800a752:	e7c1      	b.n	800a6d8 <__sflush_r+0x1c>
 800a754:	6a21      	ldr	r1, [r4, #32]
 800a756:	2301      	movs	r3, #1
 800a758:	4628      	mov	r0, r5
 800a75a:	47b0      	blx	r6
 800a75c:	1c41      	adds	r1, r0, #1
 800a75e:	d1c7      	bne.n	800a6f0 <__sflush_r+0x34>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0c4      	beq.n	800a6f0 <__sflush_r+0x34>
 800a766:	2b1d      	cmp	r3, #29
 800a768:	d001      	beq.n	800a76e <__sflush_r+0xb2>
 800a76a:	2b16      	cmp	r3, #22
 800a76c:	d101      	bne.n	800a772 <__sflush_r+0xb6>
 800a76e:	602f      	str	r7, [r5, #0]
 800a770:	e7b1      	b.n	800a6d6 <__sflush_r+0x1a>
 800a772:	89a3      	ldrh	r3, [r4, #12]
 800a774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a778:	81a3      	strh	r3, [r4, #12]
 800a77a:	e7ad      	b.n	800a6d8 <__sflush_r+0x1c>
 800a77c:	690f      	ldr	r7, [r1, #16]
 800a77e:	2f00      	cmp	r7, #0
 800a780:	d0a9      	beq.n	800a6d6 <__sflush_r+0x1a>
 800a782:	0793      	lsls	r3, r2, #30
 800a784:	680e      	ldr	r6, [r1, #0]
 800a786:	bf08      	it	eq
 800a788:	694b      	ldreq	r3, [r1, #20]
 800a78a:	600f      	str	r7, [r1, #0]
 800a78c:	bf18      	it	ne
 800a78e:	2300      	movne	r3, #0
 800a790:	eba6 0807 	sub.w	r8, r6, r7
 800a794:	608b      	str	r3, [r1, #8]
 800a796:	f1b8 0f00 	cmp.w	r8, #0
 800a79a:	dd9c      	ble.n	800a6d6 <__sflush_r+0x1a>
 800a79c:	6a21      	ldr	r1, [r4, #32]
 800a79e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7a0:	4643      	mov	r3, r8
 800a7a2:	463a      	mov	r2, r7
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	47b0      	blx	r6
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	dc06      	bgt.n	800a7ba <__sflush_r+0xfe>
 800a7ac:	89a3      	ldrh	r3, [r4, #12]
 800a7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b2:	81a3      	strh	r3, [r4, #12]
 800a7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b8:	e78e      	b.n	800a6d8 <__sflush_r+0x1c>
 800a7ba:	4407      	add	r7, r0
 800a7bc:	eba8 0800 	sub.w	r8, r8, r0
 800a7c0:	e7e9      	b.n	800a796 <__sflush_r+0xda>
 800a7c2:	bf00      	nop
 800a7c4:	20400001 	.word	0x20400001

0800a7c8 <_fflush_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	690b      	ldr	r3, [r1, #16]
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	b913      	cbnz	r3, 800a7d8 <_fflush_r+0x10>
 800a7d2:	2500      	movs	r5, #0
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	b118      	cbz	r0, 800a7e2 <_fflush_r+0x1a>
 800a7da:	6983      	ldr	r3, [r0, #24]
 800a7dc:	b90b      	cbnz	r3, 800a7e2 <_fflush_r+0x1a>
 800a7de:	f000 f887 	bl	800a8f0 <__sinit>
 800a7e2:	4b14      	ldr	r3, [pc, #80]	; (800a834 <_fflush_r+0x6c>)
 800a7e4:	429c      	cmp	r4, r3
 800a7e6:	d11b      	bne.n	800a820 <_fflush_r+0x58>
 800a7e8:	686c      	ldr	r4, [r5, #4]
 800a7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d0ef      	beq.n	800a7d2 <_fflush_r+0xa>
 800a7f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7f4:	07d0      	lsls	r0, r2, #31
 800a7f6:	d404      	bmi.n	800a802 <_fflush_r+0x3a>
 800a7f8:	0599      	lsls	r1, r3, #22
 800a7fa:	d402      	bmi.n	800a802 <_fflush_r+0x3a>
 800a7fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7fe:	f000 f915 	bl	800aa2c <__retarget_lock_acquire_recursive>
 800a802:	4628      	mov	r0, r5
 800a804:	4621      	mov	r1, r4
 800a806:	f7ff ff59 	bl	800a6bc <__sflush_r>
 800a80a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a80c:	07da      	lsls	r2, r3, #31
 800a80e:	4605      	mov	r5, r0
 800a810:	d4e0      	bmi.n	800a7d4 <_fflush_r+0xc>
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	059b      	lsls	r3, r3, #22
 800a816:	d4dd      	bmi.n	800a7d4 <_fflush_r+0xc>
 800a818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a81a:	f000 f908 	bl	800aa2e <__retarget_lock_release_recursive>
 800a81e:	e7d9      	b.n	800a7d4 <_fflush_r+0xc>
 800a820:	4b05      	ldr	r3, [pc, #20]	; (800a838 <_fflush_r+0x70>)
 800a822:	429c      	cmp	r4, r3
 800a824:	d101      	bne.n	800a82a <_fflush_r+0x62>
 800a826:	68ac      	ldr	r4, [r5, #8]
 800a828:	e7df      	b.n	800a7ea <_fflush_r+0x22>
 800a82a:	4b04      	ldr	r3, [pc, #16]	; (800a83c <_fflush_r+0x74>)
 800a82c:	429c      	cmp	r4, r3
 800a82e:	bf08      	it	eq
 800a830:	68ec      	ldreq	r4, [r5, #12]
 800a832:	e7da      	b.n	800a7ea <_fflush_r+0x22>
 800a834:	0800e090 	.word	0x0800e090
 800a838:	0800e0b0 	.word	0x0800e0b0
 800a83c:	0800e070 	.word	0x0800e070

0800a840 <std>:
 800a840:	2300      	movs	r3, #0
 800a842:	b510      	push	{r4, lr}
 800a844:	4604      	mov	r4, r0
 800a846:	e9c0 3300 	strd	r3, r3, [r0]
 800a84a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a84e:	6083      	str	r3, [r0, #8]
 800a850:	8181      	strh	r1, [r0, #12]
 800a852:	6643      	str	r3, [r0, #100]	; 0x64
 800a854:	81c2      	strh	r2, [r0, #14]
 800a856:	6183      	str	r3, [r0, #24]
 800a858:	4619      	mov	r1, r3
 800a85a:	2208      	movs	r2, #8
 800a85c:	305c      	adds	r0, #92	; 0x5c
 800a85e:	f7ff fa39 	bl	8009cd4 <memset>
 800a862:	4b05      	ldr	r3, [pc, #20]	; (800a878 <std+0x38>)
 800a864:	6263      	str	r3, [r4, #36]	; 0x24
 800a866:	4b05      	ldr	r3, [pc, #20]	; (800a87c <std+0x3c>)
 800a868:	62a3      	str	r3, [r4, #40]	; 0x28
 800a86a:	4b05      	ldr	r3, [pc, #20]	; (800a880 <std+0x40>)
 800a86c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a86e:	4b05      	ldr	r3, [pc, #20]	; (800a884 <std+0x44>)
 800a870:	6224      	str	r4, [r4, #32]
 800a872:	6323      	str	r3, [r4, #48]	; 0x30
 800a874:	bd10      	pop	{r4, pc}
 800a876:	bf00      	nop
 800a878:	0800ab81 	.word	0x0800ab81
 800a87c:	0800aba3 	.word	0x0800aba3
 800a880:	0800abdb 	.word	0x0800abdb
 800a884:	0800abff 	.word	0x0800abff

0800a888 <_cleanup_r>:
 800a888:	4901      	ldr	r1, [pc, #4]	; (800a890 <_cleanup_r+0x8>)
 800a88a:	f000 b8af 	b.w	800a9ec <_fwalk_reent>
 800a88e:	bf00      	nop
 800a890:	0800a7c9 	.word	0x0800a7c9

0800a894 <__sfmoreglue>:
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	1e4a      	subs	r2, r1, #1
 800a898:	2568      	movs	r5, #104	; 0x68
 800a89a:	4355      	muls	r5, r2
 800a89c:	460e      	mov	r6, r1
 800a89e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8a2:	f7ff fa6f 	bl	8009d84 <_malloc_r>
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	b140      	cbz	r0, 800a8bc <__sfmoreglue+0x28>
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	e9c0 1600 	strd	r1, r6, [r0]
 800a8b0:	300c      	adds	r0, #12
 800a8b2:	60a0      	str	r0, [r4, #8]
 800a8b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8b8:	f7ff fa0c 	bl	8009cd4 <memset>
 800a8bc:	4620      	mov	r0, r4
 800a8be:	bd70      	pop	{r4, r5, r6, pc}

0800a8c0 <__sfp_lock_acquire>:
 800a8c0:	4801      	ldr	r0, [pc, #4]	; (800a8c8 <__sfp_lock_acquire+0x8>)
 800a8c2:	f000 b8b3 	b.w	800aa2c <__retarget_lock_acquire_recursive>
 800a8c6:	bf00      	nop
 800a8c8:	20000e48 	.word	0x20000e48

0800a8cc <__sfp_lock_release>:
 800a8cc:	4801      	ldr	r0, [pc, #4]	; (800a8d4 <__sfp_lock_release+0x8>)
 800a8ce:	f000 b8ae 	b.w	800aa2e <__retarget_lock_release_recursive>
 800a8d2:	bf00      	nop
 800a8d4:	20000e48 	.word	0x20000e48

0800a8d8 <__sinit_lock_acquire>:
 800a8d8:	4801      	ldr	r0, [pc, #4]	; (800a8e0 <__sinit_lock_acquire+0x8>)
 800a8da:	f000 b8a7 	b.w	800aa2c <__retarget_lock_acquire_recursive>
 800a8de:	bf00      	nop
 800a8e0:	20000e43 	.word	0x20000e43

0800a8e4 <__sinit_lock_release>:
 800a8e4:	4801      	ldr	r0, [pc, #4]	; (800a8ec <__sinit_lock_release+0x8>)
 800a8e6:	f000 b8a2 	b.w	800aa2e <__retarget_lock_release_recursive>
 800a8ea:	bf00      	nop
 800a8ec:	20000e43 	.word	0x20000e43

0800a8f0 <__sinit>:
 800a8f0:	b510      	push	{r4, lr}
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	f7ff fff0 	bl	800a8d8 <__sinit_lock_acquire>
 800a8f8:	69a3      	ldr	r3, [r4, #24]
 800a8fa:	b11b      	cbz	r3, 800a904 <__sinit+0x14>
 800a8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a900:	f7ff bff0 	b.w	800a8e4 <__sinit_lock_release>
 800a904:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a908:	6523      	str	r3, [r4, #80]	; 0x50
 800a90a:	4b13      	ldr	r3, [pc, #76]	; (800a958 <__sinit+0x68>)
 800a90c:	4a13      	ldr	r2, [pc, #76]	; (800a95c <__sinit+0x6c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	62a2      	str	r2, [r4, #40]	; 0x28
 800a912:	42a3      	cmp	r3, r4
 800a914:	bf04      	itt	eq
 800a916:	2301      	moveq	r3, #1
 800a918:	61a3      	streq	r3, [r4, #24]
 800a91a:	4620      	mov	r0, r4
 800a91c:	f000 f820 	bl	800a960 <__sfp>
 800a920:	6060      	str	r0, [r4, #4]
 800a922:	4620      	mov	r0, r4
 800a924:	f000 f81c 	bl	800a960 <__sfp>
 800a928:	60a0      	str	r0, [r4, #8]
 800a92a:	4620      	mov	r0, r4
 800a92c:	f000 f818 	bl	800a960 <__sfp>
 800a930:	2200      	movs	r2, #0
 800a932:	60e0      	str	r0, [r4, #12]
 800a934:	2104      	movs	r1, #4
 800a936:	6860      	ldr	r0, [r4, #4]
 800a938:	f7ff ff82 	bl	800a840 <std>
 800a93c:	68a0      	ldr	r0, [r4, #8]
 800a93e:	2201      	movs	r2, #1
 800a940:	2109      	movs	r1, #9
 800a942:	f7ff ff7d 	bl	800a840 <std>
 800a946:	68e0      	ldr	r0, [r4, #12]
 800a948:	2202      	movs	r2, #2
 800a94a:	2112      	movs	r1, #18
 800a94c:	f7ff ff78 	bl	800a840 <std>
 800a950:	2301      	movs	r3, #1
 800a952:	61a3      	str	r3, [r4, #24]
 800a954:	e7d2      	b.n	800a8fc <__sinit+0xc>
 800a956:	bf00      	nop
 800a958:	0800df84 	.word	0x0800df84
 800a95c:	0800a889 	.word	0x0800a889

0800a960 <__sfp>:
 800a960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a962:	4607      	mov	r7, r0
 800a964:	f7ff ffac 	bl	800a8c0 <__sfp_lock_acquire>
 800a968:	4b1e      	ldr	r3, [pc, #120]	; (800a9e4 <__sfp+0x84>)
 800a96a:	681e      	ldr	r6, [r3, #0]
 800a96c:	69b3      	ldr	r3, [r6, #24]
 800a96e:	b913      	cbnz	r3, 800a976 <__sfp+0x16>
 800a970:	4630      	mov	r0, r6
 800a972:	f7ff ffbd 	bl	800a8f0 <__sinit>
 800a976:	3648      	adds	r6, #72	; 0x48
 800a978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	d503      	bpl.n	800a988 <__sfp+0x28>
 800a980:	6833      	ldr	r3, [r6, #0]
 800a982:	b30b      	cbz	r3, 800a9c8 <__sfp+0x68>
 800a984:	6836      	ldr	r6, [r6, #0]
 800a986:	e7f7      	b.n	800a978 <__sfp+0x18>
 800a988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a98c:	b9d5      	cbnz	r5, 800a9c4 <__sfp+0x64>
 800a98e:	4b16      	ldr	r3, [pc, #88]	; (800a9e8 <__sfp+0x88>)
 800a990:	60e3      	str	r3, [r4, #12]
 800a992:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a996:	6665      	str	r5, [r4, #100]	; 0x64
 800a998:	f000 f847 	bl	800aa2a <__retarget_lock_init_recursive>
 800a99c:	f7ff ff96 	bl	800a8cc <__sfp_lock_release>
 800a9a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9a8:	6025      	str	r5, [r4, #0]
 800a9aa:	61a5      	str	r5, [r4, #24]
 800a9ac:	2208      	movs	r2, #8
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9b4:	f7ff f98e 	bl	8009cd4 <memset>
 800a9b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a9bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9c4:	3468      	adds	r4, #104	; 0x68
 800a9c6:	e7d9      	b.n	800a97c <__sfp+0x1c>
 800a9c8:	2104      	movs	r1, #4
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	f7ff ff62 	bl	800a894 <__sfmoreglue>
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	6030      	str	r0, [r6, #0]
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d1d5      	bne.n	800a984 <__sfp+0x24>
 800a9d8:	f7ff ff78 	bl	800a8cc <__sfp_lock_release>
 800a9dc:	230c      	movs	r3, #12
 800a9de:	603b      	str	r3, [r7, #0]
 800a9e0:	e7ee      	b.n	800a9c0 <__sfp+0x60>
 800a9e2:	bf00      	nop
 800a9e4:	0800df84 	.word	0x0800df84
 800a9e8:	ffff0001 	.word	0xffff0001

0800a9ec <_fwalk_reent>:
 800a9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	4688      	mov	r8, r1
 800a9f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9f8:	2700      	movs	r7, #0
 800a9fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9fe:	f1b9 0901 	subs.w	r9, r9, #1
 800aa02:	d505      	bpl.n	800aa10 <_fwalk_reent+0x24>
 800aa04:	6824      	ldr	r4, [r4, #0]
 800aa06:	2c00      	cmp	r4, #0
 800aa08:	d1f7      	bne.n	800a9fa <_fwalk_reent+0xe>
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa10:	89ab      	ldrh	r3, [r5, #12]
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d907      	bls.n	800aa26 <_fwalk_reent+0x3a>
 800aa16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	d003      	beq.n	800aa26 <_fwalk_reent+0x3a>
 800aa1e:	4629      	mov	r1, r5
 800aa20:	4630      	mov	r0, r6
 800aa22:	47c0      	blx	r8
 800aa24:	4307      	orrs	r7, r0
 800aa26:	3568      	adds	r5, #104	; 0x68
 800aa28:	e7e9      	b.n	800a9fe <_fwalk_reent+0x12>

0800aa2a <__retarget_lock_init_recursive>:
 800aa2a:	4770      	bx	lr

0800aa2c <__retarget_lock_acquire_recursive>:
 800aa2c:	4770      	bx	lr

0800aa2e <__retarget_lock_release_recursive>:
 800aa2e:	4770      	bx	lr

0800aa30 <__swhatbuf_r>:
 800aa30:	b570      	push	{r4, r5, r6, lr}
 800aa32:	460e      	mov	r6, r1
 800aa34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	b096      	sub	sp, #88	; 0x58
 800aa3c:	4614      	mov	r4, r2
 800aa3e:	461d      	mov	r5, r3
 800aa40:	da07      	bge.n	800aa52 <__swhatbuf_r+0x22>
 800aa42:	2300      	movs	r3, #0
 800aa44:	602b      	str	r3, [r5, #0]
 800aa46:	89b3      	ldrh	r3, [r6, #12]
 800aa48:	061a      	lsls	r2, r3, #24
 800aa4a:	d410      	bmi.n	800aa6e <__swhatbuf_r+0x3e>
 800aa4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa50:	e00e      	b.n	800aa70 <__swhatbuf_r+0x40>
 800aa52:	466a      	mov	r2, sp
 800aa54:	f000 f8fa 	bl	800ac4c <_fstat_r>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	dbf2      	blt.n	800aa42 <__swhatbuf_r+0x12>
 800aa5c:	9a01      	ldr	r2, [sp, #4]
 800aa5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa66:	425a      	negs	r2, r3
 800aa68:	415a      	adcs	r2, r3
 800aa6a:	602a      	str	r2, [r5, #0]
 800aa6c:	e7ee      	b.n	800aa4c <__swhatbuf_r+0x1c>
 800aa6e:	2340      	movs	r3, #64	; 0x40
 800aa70:	2000      	movs	r0, #0
 800aa72:	6023      	str	r3, [r4, #0]
 800aa74:	b016      	add	sp, #88	; 0x58
 800aa76:	bd70      	pop	{r4, r5, r6, pc}

0800aa78 <__smakebuf_r>:
 800aa78:	898b      	ldrh	r3, [r1, #12]
 800aa7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa7c:	079d      	lsls	r5, r3, #30
 800aa7e:	4606      	mov	r6, r0
 800aa80:	460c      	mov	r4, r1
 800aa82:	d507      	bpl.n	800aa94 <__smakebuf_r+0x1c>
 800aa84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	6123      	str	r3, [r4, #16]
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	6163      	str	r3, [r4, #20]
 800aa90:	b002      	add	sp, #8
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	ab01      	add	r3, sp, #4
 800aa96:	466a      	mov	r2, sp
 800aa98:	f7ff ffca 	bl	800aa30 <__swhatbuf_r>
 800aa9c:	9900      	ldr	r1, [sp, #0]
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	f7ff f96f 	bl	8009d84 <_malloc_r>
 800aaa6:	b948      	cbnz	r0, 800aabc <__smakebuf_r+0x44>
 800aaa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaac:	059a      	lsls	r2, r3, #22
 800aaae:	d4ef      	bmi.n	800aa90 <__smakebuf_r+0x18>
 800aab0:	f023 0303 	bic.w	r3, r3, #3
 800aab4:	f043 0302 	orr.w	r3, r3, #2
 800aab8:	81a3      	strh	r3, [r4, #12]
 800aaba:	e7e3      	b.n	800aa84 <__smakebuf_r+0xc>
 800aabc:	4b0d      	ldr	r3, [pc, #52]	; (800aaf4 <__smakebuf_r+0x7c>)
 800aabe:	62b3      	str	r3, [r6, #40]	; 0x28
 800aac0:	89a3      	ldrh	r3, [r4, #12]
 800aac2:	6020      	str	r0, [r4, #0]
 800aac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac8:	81a3      	strh	r3, [r4, #12]
 800aaca:	9b00      	ldr	r3, [sp, #0]
 800aacc:	6163      	str	r3, [r4, #20]
 800aace:	9b01      	ldr	r3, [sp, #4]
 800aad0:	6120      	str	r0, [r4, #16]
 800aad2:	b15b      	cbz	r3, 800aaec <__smakebuf_r+0x74>
 800aad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aad8:	4630      	mov	r0, r6
 800aada:	f000 f8c9 	bl	800ac70 <_isatty_r>
 800aade:	b128      	cbz	r0, 800aaec <__smakebuf_r+0x74>
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	f023 0303 	bic.w	r3, r3, #3
 800aae6:	f043 0301 	orr.w	r3, r3, #1
 800aaea:	81a3      	strh	r3, [r4, #12]
 800aaec:	89a0      	ldrh	r0, [r4, #12]
 800aaee:	4305      	orrs	r5, r0
 800aaf0:	81a5      	strh	r5, [r4, #12]
 800aaf2:	e7cd      	b.n	800aa90 <__smakebuf_r+0x18>
 800aaf4:	0800a889 	.word	0x0800a889

0800aaf8 <_raise_r>:
 800aaf8:	291f      	cmp	r1, #31
 800aafa:	b538      	push	{r3, r4, r5, lr}
 800aafc:	4604      	mov	r4, r0
 800aafe:	460d      	mov	r5, r1
 800ab00:	d904      	bls.n	800ab0c <_raise_r+0x14>
 800ab02:	2316      	movs	r3, #22
 800ab04:	6003      	str	r3, [r0, #0]
 800ab06:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0a:	bd38      	pop	{r3, r4, r5, pc}
 800ab0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab0e:	b112      	cbz	r2, 800ab16 <_raise_r+0x1e>
 800ab10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab14:	b94b      	cbnz	r3, 800ab2a <_raise_r+0x32>
 800ab16:	4620      	mov	r0, r4
 800ab18:	f000 f830 	bl	800ab7c <_getpid_r>
 800ab1c:	462a      	mov	r2, r5
 800ab1e:	4601      	mov	r1, r0
 800ab20:	4620      	mov	r0, r4
 800ab22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab26:	f000 b817 	b.w	800ab58 <_kill_r>
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d00a      	beq.n	800ab44 <_raise_r+0x4c>
 800ab2e:	1c59      	adds	r1, r3, #1
 800ab30:	d103      	bne.n	800ab3a <_raise_r+0x42>
 800ab32:	2316      	movs	r3, #22
 800ab34:	6003      	str	r3, [r0, #0]
 800ab36:	2001      	movs	r0, #1
 800ab38:	e7e7      	b.n	800ab0a <_raise_r+0x12>
 800ab3a:	2400      	movs	r4, #0
 800ab3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab40:	4628      	mov	r0, r5
 800ab42:	4798      	blx	r3
 800ab44:	2000      	movs	r0, #0
 800ab46:	e7e0      	b.n	800ab0a <_raise_r+0x12>

0800ab48 <raise>:
 800ab48:	4b02      	ldr	r3, [pc, #8]	; (800ab54 <raise+0xc>)
 800ab4a:	4601      	mov	r1, r0
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	f7ff bfd3 	b.w	800aaf8 <_raise_r>
 800ab52:	bf00      	nop
 800ab54:	20000070 	.word	0x20000070

0800ab58 <_kill_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d07      	ldr	r5, [pc, #28]	; (800ab78 <_kill_r+0x20>)
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4604      	mov	r4, r0
 800ab60:	4608      	mov	r0, r1
 800ab62:	4611      	mov	r1, r2
 800ab64:	602b      	str	r3, [r5, #0]
 800ab66:	f7f8 fc95 	bl	8003494 <_kill>
 800ab6a:	1c43      	adds	r3, r0, #1
 800ab6c:	d102      	bne.n	800ab74 <_kill_r+0x1c>
 800ab6e:	682b      	ldr	r3, [r5, #0]
 800ab70:	b103      	cbz	r3, 800ab74 <_kill_r+0x1c>
 800ab72:	6023      	str	r3, [r4, #0]
 800ab74:	bd38      	pop	{r3, r4, r5, pc}
 800ab76:	bf00      	nop
 800ab78:	20000e3c 	.word	0x20000e3c

0800ab7c <_getpid_r>:
 800ab7c:	f7f8 bc82 	b.w	8003484 <_getpid>

0800ab80 <__sread>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	460c      	mov	r4, r1
 800ab84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab88:	f000 f894 	bl	800acb4 <_read_r>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	bfab      	itete	ge
 800ab90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab92:	89a3      	ldrhlt	r3, [r4, #12]
 800ab94:	181b      	addge	r3, r3, r0
 800ab96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab9a:	bfac      	ite	ge
 800ab9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab9e:	81a3      	strhlt	r3, [r4, #12]
 800aba0:	bd10      	pop	{r4, pc}

0800aba2 <__swrite>:
 800aba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba6:	461f      	mov	r7, r3
 800aba8:	898b      	ldrh	r3, [r1, #12]
 800abaa:	05db      	lsls	r3, r3, #23
 800abac:	4605      	mov	r5, r0
 800abae:	460c      	mov	r4, r1
 800abb0:	4616      	mov	r6, r2
 800abb2:	d505      	bpl.n	800abc0 <__swrite+0x1e>
 800abb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb8:	2302      	movs	r3, #2
 800abba:	2200      	movs	r2, #0
 800abbc:	f000 f868 	bl	800ac90 <_lseek_r>
 800abc0:	89a3      	ldrh	r3, [r4, #12]
 800abc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abca:	81a3      	strh	r3, [r4, #12]
 800abcc:	4632      	mov	r2, r6
 800abce:	463b      	mov	r3, r7
 800abd0:	4628      	mov	r0, r5
 800abd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abd6:	f000 b817 	b.w	800ac08 <_write_r>

0800abda <__sseek>:
 800abda:	b510      	push	{r4, lr}
 800abdc:	460c      	mov	r4, r1
 800abde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe2:	f000 f855 	bl	800ac90 <_lseek_r>
 800abe6:	1c43      	adds	r3, r0, #1
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	bf15      	itete	ne
 800abec:	6560      	strne	r0, [r4, #84]	; 0x54
 800abee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abf6:	81a3      	strheq	r3, [r4, #12]
 800abf8:	bf18      	it	ne
 800abfa:	81a3      	strhne	r3, [r4, #12]
 800abfc:	bd10      	pop	{r4, pc}

0800abfe <__sclose>:
 800abfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac02:	f000 b813 	b.w	800ac2c <_close_r>
	...

0800ac08 <_write_r>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4d07      	ldr	r5, [pc, #28]	; (800ac28 <_write_r+0x20>)
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	4608      	mov	r0, r1
 800ac10:	4611      	mov	r1, r2
 800ac12:	2200      	movs	r2, #0
 800ac14:	602a      	str	r2, [r5, #0]
 800ac16:	461a      	mov	r2, r3
 800ac18:	f7f8 fc73 	bl	8003502 <_write>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	d102      	bne.n	800ac26 <_write_r+0x1e>
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	b103      	cbz	r3, 800ac26 <_write_r+0x1e>
 800ac24:	6023      	str	r3, [r4, #0]
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
 800ac28:	20000e3c 	.word	0x20000e3c

0800ac2c <_close_r>:
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	4d06      	ldr	r5, [pc, #24]	; (800ac48 <_close_r+0x1c>)
 800ac30:	2300      	movs	r3, #0
 800ac32:	4604      	mov	r4, r0
 800ac34:	4608      	mov	r0, r1
 800ac36:	602b      	str	r3, [r5, #0]
 800ac38:	f7f8 fc7f 	bl	800353a <_close>
 800ac3c:	1c43      	adds	r3, r0, #1
 800ac3e:	d102      	bne.n	800ac46 <_close_r+0x1a>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	b103      	cbz	r3, 800ac46 <_close_r+0x1a>
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	20000e3c 	.word	0x20000e3c

0800ac4c <_fstat_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d07      	ldr	r5, [pc, #28]	; (800ac6c <_fstat_r+0x20>)
 800ac50:	2300      	movs	r3, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	4611      	mov	r1, r2
 800ac58:	602b      	str	r3, [r5, #0]
 800ac5a:	f7f8 fc7a 	bl	8003552 <_fstat>
 800ac5e:	1c43      	adds	r3, r0, #1
 800ac60:	d102      	bne.n	800ac68 <_fstat_r+0x1c>
 800ac62:	682b      	ldr	r3, [r5, #0]
 800ac64:	b103      	cbz	r3, 800ac68 <_fstat_r+0x1c>
 800ac66:	6023      	str	r3, [r4, #0]
 800ac68:	bd38      	pop	{r3, r4, r5, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20000e3c 	.word	0x20000e3c

0800ac70 <_isatty_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4d06      	ldr	r5, [pc, #24]	; (800ac8c <_isatty_r+0x1c>)
 800ac74:	2300      	movs	r3, #0
 800ac76:	4604      	mov	r4, r0
 800ac78:	4608      	mov	r0, r1
 800ac7a:	602b      	str	r3, [r5, #0]
 800ac7c:	f7f8 fc79 	bl	8003572 <_isatty>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	d102      	bne.n	800ac8a <_isatty_r+0x1a>
 800ac84:	682b      	ldr	r3, [r5, #0]
 800ac86:	b103      	cbz	r3, 800ac8a <_isatty_r+0x1a>
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	20000e3c 	.word	0x20000e3c

0800ac90 <_lseek_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4d07      	ldr	r5, [pc, #28]	; (800acb0 <_lseek_r+0x20>)
 800ac94:	4604      	mov	r4, r0
 800ac96:	4608      	mov	r0, r1
 800ac98:	4611      	mov	r1, r2
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	602a      	str	r2, [r5, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	f7f8 fc72 	bl	8003588 <_lseek>
 800aca4:	1c43      	adds	r3, r0, #1
 800aca6:	d102      	bne.n	800acae <_lseek_r+0x1e>
 800aca8:	682b      	ldr	r3, [r5, #0]
 800acaa:	b103      	cbz	r3, 800acae <_lseek_r+0x1e>
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	bd38      	pop	{r3, r4, r5, pc}
 800acb0:	20000e3c 	.word	0x20000e3c

0800acb4 <_read_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d07      	ldr	r5, [pc, #28]	; (800acd4 <_read_r+0x20>)
 800acb8:	4604      	mov	r4, r0
 800acba:	4608      	mov	r0, r1
 800acbc:	4611      	mov	r1, r2
 800acbe:	2200      	movs	r2, #0
 800acc0:	602a      	str	r2, [r5, #0]
 800acc2:	461a      	mov	r2, r3
 800acc4:	f7f8 fc00 	bl	80034c8 <_read>
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	d102      	bne.n	800acd2 <_read_r+0x1e>
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	b103      	cbz	r3, 800acd2 <_read_r+0x1e>
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	bd38      	pop	{r3, r4, r5, pc}
 800acd4:	20000e3c 	.word	0x20000e3c

0800acd8 <sqrt>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	ed2d 8b02 	vpush	{d8}
 800acde:	ec55 4b10 	vmov	r4, r5, d0
 800ace2:	f000 f82d 	bl	800ad40 <__ieee754_sqrt>
 800ace6:	4b15      	ldr	r3, [pc, #84]	; (800ad3c <sqrt+0x64>)
 800ace8:	eeb0 8a40 	vmov.f32	s16, s0
 800acec:	eef0 8a60 	vmov.f32	s17, s1
 800acf0:	f993 3000 	ldrsb.w	r3, [r3]
 800acf4:	3301      	adds	r3, #1
 800acf6:	d019      	beq.n	800ad2c <sqrt+0x54>
 800acf8:	4622      	mov	r2, r4
 800acfa:	462b      	mov	r3, r5
 800acfc:	4620      	mov	r0, r4
 800acfe:	4629      	mov	r1, r5
 800ad00:	f7f5 ff0c 	bl	8000b1c <__aeabi_dcmpun>
 800ad04:	b990      	cbnz	r0, 800ad2c <sqrt+0x54>
 800ad06:	2200      	movs	r2, #0
 800ad08:	2300      	movs	r3, #0
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	f7f5 fedd 	bl	8000acc <__aeabi_dcmplt>
 800ad12:	b158      	cbz	r0, 800ad2c <sqrt+0x54>
 800ad14:	f7fe ffac 	bl	8009c70 <__errno>
 800ad18:	2321      	movs	r3, #33	; 0x21
 800ad1a:	6003      	str	r3, [r0, #0]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	2300      	movs	r3, #0
 800ad20:	4610      	mov	r0, r2
 800ad22:	4619      	mov	r1, r3
 800ad24:	f7f5 fd8a 	bl	800083c <__aeabi_ddiv>
 800ad28:	ec41 0b18 	vmov	d8, r0, r1
 800ad2c:	eeb0 0a48 	vmov.f32	s0, s16
 800ad30:	eef0 0a68 	vmov.f32	s1, s17
 800ad34:	ecbd 8b02 	vpop	{d8}
 800ad38:	bd38      	pop	{r3, r4, r5, pc}
 800ad3a:	bf00      	nop
 800ad3c:	200000d4 	.word	0x200000d4

0800ad40 <__ieee754_sqrt>:
 800ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad44:	ec55 4b10 	vmov	r4, r5, d0
 800ad48:	4e56      	ldr	r6, [pc, #344]	; (800aea4 <__ieee754_sqrt+0x164>)
 800ad4a:	43ae      	bics	r6, r5
 800ad4c:	ee10 0a10 	vmov	r0, s0
 800ad50:	ee10 3a10 	vmov	r3, s0
 800ad54:	4629      	mov	r1, r5
 800ad56:	462a      	mov	r2, r5
 800ad58:	d110      	bne.n	800ad7c <__ieee754_sqrt+0x3c>
 800ad5a:	ee10 2a10 	vmov	r2, s0
 800ad5e:	462b      	mov	r3, r5
 800ad60:	f7f5 fc42 	bl	80005e8 <__aeabi_dmul>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4620      	mov	r0, r4
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	f7f5 fa86 	bl	800027c <__adddf3>
 800ad70:	4604      	mov	r4, r0
 800ad72:	460d      	mov	r5, r1
 800ad74:	ec45 4b10 	vmov	d0, r4, r5
 800ad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7c:	2d00      	cmp	r5, #0
 800ad7e:	dc10      	bgt.n	800ada2 <__ieee754_sqrt+0x62>
 800ad80:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ad84:	4330      	orrs	r0, r6
 800ad86:	d0f5      	beq.n	800ad74 <__ieee754_sqrt+0x34>
 800ad88:	b15d      	cbz	r5, 800ada2 <__ieee754_sqrt+0x62>
 800ad8a:	ee10 2a10 	vmov	r2, s0
 800ad8e:	462b      	mov	r3, r5
 800ad90:	ee10 0a10 	vmov	r0, s0
 800ad94:	f7f5 fa70 	bl	8000278 <__aeabi_dsub>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	f7f5 fd4e 	bl	800083c <__aeabi_ddiv>
 800ada0:	e7e6      	b.n	800ad70 <__ieee754_sqrt+0x30>
 800ada2:	1509      	asrs	r1, r1, #20
 800ada4:	d076      	beq.n	800ae94 <__ieee754_sqrt+0x154>
 800ada6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800adaa:	07ce      	lsls	r6, r1, #31
 800adac:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800adb0:	bf5e      	ittt	pl
 800adb2:	0fda      	lsrpl	r2, r3, #31
 800adb4:	005b      	lslpl	r3, r3, #1
 800adb6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800adba:	0fda      	lsrs	r2, r3, #31
 800adbc:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800adc0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800adc4:	2000      	movs	r0, #0
 800adc6:	106d      	asrs	r5, r5, #1
 800adc8:	005b      	lsls	r3, r3, #1
 800adca:	f04f 0e16 	mov.w	lr, #22
 800adce:	4684      	mov	ip, r0
 800add0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800add4:	eb0c 0401 	add.w	r4, ip, r1
 800add8:	4294      	cmp	r4, r2
 800adda:	bfde      	ittt	le
 800addc:	1b12      	suble	r2, r2, r4
 800adde:	eb04 0c01 	addle.w	ip, r4, r1
 800ade2:	1840      	addle	r0, r0, r1
 800ade4:	0052      	lsls	r2, r2, #1
 800ade6:	f1be 0e01 	subs.w	lr, lr, #1
 800adea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800adee:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800adf2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800adf6:	d1ed      	bne.n	800add4 <__ieee754_sqrt+0x94>
 800adf8:	4671      	mov	r1, lr
 800adfa:	2720      	movs	r7, #32
 800adfc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ae00:	4562      	cmp	r2, ip
 800ae02:	eb04 060e 	add.w	r6, r4, lr
 800ae06:	dc02      	bgt.n	800ae0e <__ieee754_sqrt+0xce>
 800ae08:	d113      	bne.n	800ae32 <__ieee754_sqrt+0xf2>
 800ae0a:	429e      	cmp	r6, r3
 800ae0c:	d811      	bhi.n	800ae32 <__ieee754_sqrt+0xf2>
 800ae0e:	2e00      	cmp	r6, #0
 800ae10:	eb06 0e04 	add.w	lr, r6, r4
 800ae14:	da43      	bge.n	800ae9e <__ieee754_sqrt+0x15e>
 800ae16:	f1be 0f00 	cmp.w	lr, #0
 800ae1a:	db40      	blt.n	800ae9e <__ieee754_sqrt+0x15e>
 800ae1c:	f10c 0801 	add.w	r8, ip, #1
 800ae20:	eba2 020c 	sub.w	r2, r2, ip
 800ae24:	429e      	cmp	r6, r3
 800ae26:	bf88      	it	hi
 800ae28:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ae2c:	1b9b      	subs	r3, r3, r6
 800ae2e:	4421      	add	r1, r4
 800ae30:	46c4      	mov	ip, r8
 800ae32:	0052      	lsls	r2, r2, #1
 800ae34:	3f01      	subs	r7, #1
 800ae36:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ae3a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ae3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae42:	d1dd      	bne.n	800ae00 <__ieee754_sqrt+0xc0>
 800ae44:	4313      	orrs	r3, r2
 800ae46:	d006      	beq.n	800ae56 <__ieee754_sqrt+0x116>
 800ae48:	1c4c      	adds	r4, r1, #1
 800ae4a:	bf13      	iteet	ne
 800ae4c:	3101      	addne	r1, #1
 800ae4e:	3001      	addeq	r0, #1
 800ae50:	4639      	moveq	r1, r7
 800ae52:	f021 0101 	bicne.w	r1, r1, #1
 800ae56:	1043      	asrs	r3, r0, #1
 800ae58:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ae5c:	0849      	lsrs	r1, r1, #1
 800ae5e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ae62:	07c2      	lsls	r2, r0, #31
 800ae64:	bf48      	it	mi
 800ae66:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ae6a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ae6e:	460c      	mov	r4, r1
 800ae70:	463d      	mov	r5, r7
 800ae72:	e77f      	b.n	800ad74 <__ieee754_sqrt+0x34>
 800ae74:	0ada      	lsrs	r2, r3, #11
 800ae76:	3815      	subs	r0, #21
 800ae78:	055b      	lsls	r3, r3, #21
 800ae7a:	2a00      	cmp	r2, #0
 800ae7c:	d0fa      	beq.n	800ae74 <__ieee754_sqrt+0x134>
 800ae7e:	02d7      	lsls	r7, r2, #11
 800ae80:	d50a      	bpl.n	800ae98 <__ieee754_sqrt+0x158>
 800ae82:	f1c1 0420 	rsb	r4, r1, #32
 800ae86:	fa23 f404 	lsr.w	r4, r3, r4
 800ae8a:	1e4d      	subs	r5, r1, #1
 800ae8c:	408b      	lsls	r3, r1
 800ae8e:	4322      	orrs	r2, r4
 800ae90:	1b41      	subs	r1, r0, r5
 800ae92:	e788      	b.n	800ada6 <__ieee754_sqrt+0x66>
 800ae94:	4608      	mov	r0, r1
 800ae96:	e7f0      	b.n	800ae7a <__ieee754_sqrt+0x13a>
 800ae98:	0052      	lsls	r2, r2, #1
 800ae9a:	3101      	adds	r1, #1
 800ae9c:	e7ef      	b.n	800ae7e <__ieee754_sqrt+0x13e>
 800ae9e:	46e0      	mov	r8, ip
 800aea0:	e7be      	b.n	800ae20 <__ieee754_sqrt+0xe0>
 800aea2:	bf00      	nop
 800aea4:	7ff00000 	.word	0x7ff00000

0800aea8 <_init>:
 800aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeaa:	bf00      	nop
 800aeac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeae:	bc08      	pop	{r3}
 800aeb0:	469e      	mov	lr, r3
 800aeb2:	4770      	bx	lr

0800aeb4 <_fini>:
 800aeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb6:	bf00      	nop
 800aeb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeba:	bc08      	pop	{r3}
 800aebc:	469e      	mov	lr, r3
 800aebe:	4770      	bx	lr
